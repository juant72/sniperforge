# Script para probar el sistema de arbitraje real
# Verifica c√°lculos, prevenci√≥n de p√©rdidas y funcionamiento correcto

Write-Host "üß™ === PRUEBAS DEL SISTEMA DE ARBITRAJE REAL ===" -ForegroundColor Cyan
Write-Host "   üîç Verificando c√°lculos matem√°ticos" -ForegroundColor Yellow
Write-Host "   üõ°Ô∏è Validando prevenci√≥n de p√©rdidas" -ForegroundColor Yellow
Write-Host "   ‚ö° Probando integraci√≥n con Jupiter API" -ForegroundColor Yellow
Write-Host ""

# Paso 1: Verificar que el sistema compila
Write-Host "üìã Paso 1: Verificando compilaci√≥n..." -ForegroundColor Green
cargo check --bin real_arbitrage_system
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå ERROR: El sistema principal no compila correctamente" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Sistema principal compila correctamente" -ForegroundColor Green
Write-Host ""

# Paso 2: Compilar el sistema de pruebas
Write-Host "üìã Paso 2: Compilando sistema de pruebas..." -ForegroundColor Green
cargo build --bin test_arbitrage_calculations
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå ERROR: El sistema de pruebas no compila" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Sistema de pruebas compilado correctamente" -ForegroundColor Green
Write-Host ""

# Paso 3: Ejecutar pruebas de c√°lculos (modo seguro, sin transacciones reales)
Write-Host "üìã Paso 3: Ejecutando pruebas de c√°lculos..." -ForegroundColor Green
Write-Host "‚ö†Ô∏è  NOTA: Estas pruebas NO ejecutan transacciones reales" -ForegroundColor Yellow
Write-Host "   Solo verifican c√°lculos y l√≥gica de prevenci√≥n de p√©rdidas" -ForegroundColor Yellow
Write-Host ""

cargo run --bin test_arbitrage_calculations
$test_result = $LASTEXITCODE

Write-Host ""
if ($test_result -eq 0) {
    Write-Host "‚úÖ === TODAS LAS PRUEBAS PASARON EXITOSAMENTE ===" -ForegroundColor Green
    Write-Host ""
    Write-Host "üéØ RESULTADOS DE LAS PRUEBAS:" -ForegroundColor Cyan
    Write-Host "   ‚úÖ C√°lculos matem√°ticos: CORRECTOS" -ForegroundColor Green
    Write-Host "   ‚úÖ Prevenci√≥n de p√©rdidas: FUNCIONAL" -ForegroundColor Green
    Write-Host "   ‚úÖ C√°lculos de slippage: SEGUROS" -ForegroundColor Green
    Write-Host "   ‚úÖ Integraci√≥n Jupiter API: OPERATIVA" -ForegroundColor Green
    Write-Host ""
    Write-Host "üöÄ CONCLUSI√ìN: El sistema est√° LISTO para uso con dinero real" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚ö†Ô∏è  RECORDATORIOS IMPORTANTES:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Siempre probar primero con cantidades peque√±as" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Verificar que tienes suficiente SOL para fees" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Configurar SOLANA_RPC_URL para un RPC premium" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Tener archivo mainnet_wallet.json en el directorio" -ForegroundColor Yellow
} else {
    Write-Host "‚ùå === ALGUNAS PRUEBAS FALLARON ===" -ForegroundColor Red
    Write-Host ""
    Write-Host "üîç REVISAR LOS LOGS ANTERIORES PARA VER DETALLES" -ForegroundColor Yellow
    Write-Host "   Las pruebas que fallaron pueden indicar:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Problemas de conectividad con Jupiter API" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Rate limits de la API" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Errores en c√°lculos matem√°ticos" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "‚ö†Ô∏è  NO EJECUTAR CON DINERO REAL HASTA RESOLVER LOS ERRORES" -ForegroundColor Red
}

Write-Host ""
Write-Host "üìö SIGUIENTE PASO:" -ForegroundColor Cyan
if ($test_result -eq 0) {
    Write-Host "   Si quieres ejecutar el sistema real:" -ForegroundColor White
    Write-Host "   cargo run --bin real_arbitrage_system" -ForegroundColor White
    Write-Host ""
    Write-Host "   ‚ö†Ô∏è  IMPORTANTE: Esto ejecutar√° transacciones REALES en mainnet" -ForegroundColor Red
} else {
    Write-Host "   Revisar y corregir los errores encontrados" -ForegroundColor White
    Write-Host "   Luego volver a ejecutar este script de pruebas" -ForegroundColor White
}

Write-Host ""
