// ================================================================================
// ARBITRAGE BOT PHASE 4.5 - ENHANCED WITH ACCI√ìN 7 OPTIMIZATIONS
// ================================================================================
// Versi√≥n mejorada del sistema con optimizaciones avanzadas de ACCI√ìN 7
// Incluye: Performance Optimizer, Profit Tracker, Real-time Dashboard
// ================================================================================

use std::sync::Arc;
use tokio::time::{sleep, Duration};
use tracing::{info, error, warn};
use anyhow::Result;
use solana_client::rpc_client::RpcClient;
use solana_sdk::{commitment_config::CommitmentConfig, pubkey::Pubkey};
use std::str::FromStr;

// Importar el sistema integrado Phase 4.5
use sniperforge::{
    arbitrage_bot_phase45_integrated::ArbitrageBotPhase45Integrated,
    unified_config::UnifiedPhase45Config,
    // ACCI√ìN 7 Modules
    advanced_performance_optimizer::{AdvancedPerformanceOptimizer, PerformanceConfig},
    advanced_profit_tracker::{AdvancedProfitTracker, ProfitTrackerConfig, TradeResult},
    real_time_trading_dashboard::{RealTimeTradingDashboard, DashboardConfig},
};

/// Funci√≥n para obtener el balance real de la wallet en mainnet
async fn get_wallet_balance(rpc_client: &RpcClient, wallet_pubkey: &Pubkey) -> Result<f64> {
    match rpc_client.get_balance(wallet_pubkey) {
        Ok(balance_lamports) => {
            let balance_sol = balance_lamports as f64 / 1_000_000_000.0; // Convertir lamports a SOL
            Ok(balance_sol)
        }
        Err(e) => {
            error!("‚ùå Error obteniendo balance de wallet: {}", e);
            Err(anyhow::anyhow!("Error consultando balance: {}", e))
        }
    }
}

#[tokio::main]
async fn main() -> Result<()> {
    // Inicializar logging
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();

    info!("üöÄ === ARBITRAGE BOT PHASE 4.5 - ENHANCED WITH ACCI√ìN 7 ===");
    info!("üí∞ ATENCI√ìN: Este programa ejecuta TRANSACCIONES REALES con SOL");
    info!("üéØ NUEVA VERSI√ìN: Incluye Performance Optimizer + Profit Tracker + Dashboard");
    info!("================================================================");
    
    // Verificar modo de operaci√≥n
    let force_real = std::env::var("FORCE_REAL_TRANSACTIONS").unwrap_or("false".to_string()) == "true";
    if force_real {
        info!("üî• MODO TRANSACCIONES REALES ACTIVADO");
        info!("‚ö†Ô∏è  ¬°CUIDADO! Las transacciones modificar√°n balance real");
    } else {
        info!("üß™ MODO SIMULACI√ìN SEGURA (para testing)");
        info!("üí° Para activar trades reales: set FORCE_REAL_TRANSACTIONS=true");
    }

    // Crear configuraci√≥n por defecto
    let config = UnifiedPhase45Config::safe_trading();
    
    // Crear cliente RPC para monitoreo de balance
    let rpc_client = Arc::new(RpcClient::new_with_commitment(
        config.rpc_endpoint.clone(),
        CommitmentConfig::confirmed(),
    ));
    
    // Wallet principal del sistema (mainnet)
    let wallet_pubkey = Pubkey::from_str("JDzF9LkpoQVac6c6ufHW1c6Gevd3vFB4RXSSjceL8Kq7")?;
    
    // Obtener balance inicial
    info!("üîç Consultando balance inicial de wallet...");
    let initial_balance = match get_wallet_balance(&rpc_client, &wallet_pubkey).await {
        Ok(balance) => {
            info!("üí∞ Balance inicial: {:.9} SOL", balance);
            balance
        }
        Err(e) => {
            warn!("‚ö†Ô∏è No se pudo obtener balance inicial: {}", e);
            0.0
        }
    };

    // ================================================================================
    // ACCI√ìN 7: INICIALIZAR SISTEMAS AVANZADOS
    // ================================================================================
    
    // 7.1: Performance Optimizer
    info!("üöÄ Inicializando Advanced Performance Optimizer...");
    let perf_config = PerformanceConfig::max_performance_config();
    let mut performance_optimizer = AdvancedPerformanceOptimizer::new(perf_config);

    // 7.2: Profit Tracker
    info!("üí∞ Inicializando Advanced Profit Tracker...");
    let profit_config = ProfitTrackerConfig::default();
    let mut profit_tracker = AdvancedProfitTracker::new(profit_config, initial_balance);

    // 7.3: Real-time Dashboard
    info!("üìä Inicializando Real-Time Trading Dashboard...");
    let dashboard_config = DashboardConfig::default();
    let dashboard = RealTimeTradingDashboard::new(dashboard_config, initial_balance);
    
    // Iniciar dashboard
    dashboard.start().await?;
    
    // Mostrar resumen de configuraci√≥n
    info!("üìã Configuraci√≥n del Sistema Enhanced:");
    info!("   ‚Ä¢ Trading Mode: SAFE (Conservador)");
    info!("   ‚Ä¢ Max Trade SOL: {:.3}", config.max_trade_sol);
    info!("   ‚Ä¢ Min Profit BPS: {}", config.min_profit_bps);
    info!("   ‚Ä¢ Jupiter Advanced: {}", if config.jupiter_advanced_enabled { "‚úÖ" } else { "‚ùå" });
    info!("   ‚Ä¢ MEV Protection: {}", if config.mev_protection_enabled { "‚úÖ" } else { "‚ùå" });
    info!("   ‚Ä¢ DEX Specialization: {}", if config.dex_specialization_enabled { "‚úÖ" } else { "‚ùå" });
    info!("   ‚Ä¢ Event Driven: {}", if config.event_driven_enabled { "‚úÖ" } else { "‚ùå" });
    info!("   ‚Ä¢ Performance Optimizer: ‚úÖ ACTIVO");
    info!("   ‚Ä¢ Advanced Profit Tracker: ‚úÖ ACTIVO");
    info!("   ‚Ä¢ Real-time Dashboard: ‚úÖ ACTIVO");

    // Crear e inicializar el sistema Phase 4.5
    info!("üîß Inicializando Sistema Phase 4.5 Enhanced...");
    let system = match ArbitrageBotPhase45Integrated::new(config).await {
        Ok(system) => {
            info!("‚úÖ Sistema Phase 4.5 Enhanced inicializado correctamente");
            Arc::new(system)
        }
        Err(e) => {
            error!("‚ùå Error inicializando sistema: {}", e);
            dashboard.record_error("System Init".to_string(), format!("Initialization failed: {}", e));
            return Err(e);
        }
    };

    // Ejecutar ciclo principal de trading con optimizaciones
    info!("üéØ Iniciando ciclo de trading optimizado...");
    info!("‚è∞ Intervalo entre ciclos: 10 segundos");
    let mut cycle_count = 0;
    let mut last_balance = initial_balance;
    let mut total_profit = 0.0;
    let mut total_opportunities_found = 0u64;
    let mut total_opportunities_executed = 0u64;

    loop {
        cycle_count += 1;
        info!("üîÑ Ciclo #{} - Buscando oportunidades optimizadas...", cycle_count);

        // Verificar balance actual al inicio del ciclo
        let current_balance = if let Ok(balance) = get_wallet_balance(&rpc_client, &wallet_pubkey).await {
            let balance_change = balance - last_balance;
            info!("üí∞ Balance actual: {:.9} SOL (cambio: {:+.9} SOL)", balance, balance_change);
            
            if balance_change.abs() > 0.000001 { // Si hay cambio significativo
                total_profit += balance_change;
                info!("üìà Profit acumulado total: {:+.9} SOL", total_profit);
                
                // Actualizar profit tracker con balance change
                profit_tracker.update_balance(balance);
            }
            last_balance = balance;
            balance
        } else {
            last_balance
        };

        // ACCI√ìN 7.1: Buscar oportunidades con Performance Optimizer
        let discovery_start = std::time::Instant::now();
        
        let opportunities = match performance_optimizer.optimize_opportunity_discovery(|| async {
            system.discover_opportunities().await
        }).await {
            Ok(opportunities) => {
                total_opportunities_found += opportunities.len() as u64;
                info!("üìä [OPTIMIZED] Encontradas {} oportunidades en {}ms", 
                      opportunities.len(), discovery_start.elapsed().as_millis());
                
                // Actualizar dashboard con m√©tricas
                dashboard.update_system_status(
                    current_balance,
                    total_profit,
                    total_opportunities_found,
                    total_opportunities_executed,
                    cycle_count,
                );
                
                opportunities
            }
            Err(e) => {
                error!("‚ö†Ô∏è Error en discovery optimizado en ciclo #{}: {}", cycle_count, e);
                dashboard.record_error("Discovery Engine".to_string(), format!("Cycle {}: {}", cycle_count, e));
                Vec::new()
            }
        };

        // Ejecutar oportunidades con tracking avanzado
        for (i, opportunity) in opportunities.iter().take(3).enumerate() {
            let trade_id = format!("trade_{}_{}", cycle_count, i + 1);
            let profit_estimate = opportunity.get_estimated_profit();
            
            info!("üí∞ EJECUTANDO TRADE REAL #{} - ID: {} - Profit esperado: {:.6} SOL", 
                  i + 1, trade_id, profit_estimate);
            
            // Balance antes del trade
            let balance_before = if let Ok(balance) = get_wallet_balance(&rpc_client, &wallet_pubkey).await {
                balance
            } else {
                last_balance
            };
            
            let execution_start = std::time::Instant::now();
            
            match system.execute_opportunity_real(opportunity.clone()).await {
                Ok(result) => {
                    let execution_time_ms = execution_start.elapsed().as_millis() as u64;
                    
                    if result.success {
                        total_opportunities_executed += 1;
                        
                        info!("‚úÖ üöÄ TRADE REAL #{} EXITOSO! Profit reportado: {:.6} SOL", i + 1, result.actual_profit_sol);
                        info!("   üéØ Transacciones: {:?}", result.transaction_signatures);
                        info!("   ‚è±Ô∏è Tiempo ejecuci√≥n: {}ms", execution_time_ms);
                        
                        // Verificar balance despu√©s del trade
                        tokio::time::sleep(Duration::from_secs(2)).await; // Esperar confirmaci√≥n
                        if let Ok(balance_after) = get_wallet_balance(&rpc_client, &wallet_pubkey).await {
                            let real_change = balance_after - balance_before;
                            info!("   üîç VERIFICACI√ìN REAL:");
                            info!("     ‚Ä¢ Balance antes: {:.9} SOL", balance_before);
                            info!("     ‚Ä¢ Balance despu√©s: {:.9} SOL", balance_after);
                            info!("     ‚Ä¢ Cambio real: {:+.9} SOL", real_change);
                            
                            // ACCI√ìN 7.2: Registrar trade en Profit Tracker
                            let trade_result = TradeResult::new(
                                trade_id.clone(),
                                format!("{}_{}", 
                                    opportunity.get_input_mint().to_string()[..8].to_string(),
                                    opportunity.get_output_mint().to_string()[..8].to_string()
                                ),
                                balance_before,
                                balance_after,
                                0.001, // Estimate gas cost
                                execution_time_ms,
                                "Jupiter".to_string(),
                            );
                            
                            if let Err(e) = profit_tracker.record_trade(trade_result.clone()) {
                                error!("‚ùå Error registrando trade en profit tracker: {}", e);
                            }
                            
                            // ACCI√ìN 7.3: Registrar trade en Dashboard
                            dashboard.record_trade(&trade_result);
                            
                            if real_change.abs() > 0.000001 {
                                info!("   ‚úÖ CONFIRMADO: Trade real ejecutado - Balance modificado");
                                last_balance = balance_after;
                            } else {
                                warn!("   ‚ö†Ô∏è POSIBLE SIMULACI√ìN: No hay cambio en balance real");
                            }
                        }
                    } else {
                        warn!("‚ö†Ô∏è Trade real #{} fall√≥: {:?}", i + 1, result.error_message);
                        dashboard.record_error("Trading Engine".to_string(), 
                                             format!("Trade {} failed: {:?}", trade_id, result.error_message));
                    }
                }
                Err(e) => {
                    error!("‚ùå Error ejecutando trade real #{}: {}", i + 1, e);
                    dashboard.record_error("Trading Engine".to_string(), 
                                         format!("Trade {} error: {}", trade_id, e));
                }
            }
        }

        // ACCI√ìN 7: Reportes peri√≥dicos cada 5 ciclos
        if cycle_count % 5 == 0 {
            info!("üìä === REPORTE ACCI√ìN 7 (Ciclo {}) ===", cycle_count);
            
            // Performance metrics
            let perf_metrics = performance_optimizer.get_metrics();
            info!("üöÄ Performance: {:.2} ops/sec, cache hit: {:.1}%", 
                  perf_metrics.opportunities_per_second,
                  perf_metrics.cache_hit_rate * 100.0);
            
            // Profit tracking stats
            let profit_stats = profit_tracker.get_stats();
            info!("üí∞ Profit Stats: {} trades, {:.1}% success, {:+.6} SOL total", 
                  profit_stats.total_trades,
                  profit_stats.success_rate,
                  profit_stats.net_profit_sol);
            
            // Auto-optimize configuration
            performance_optimizer.auto_optimize_config();
            
            info!("üìä === FIN REPORTE ACCI√ìN 7 ===");
        }

        // Pausa entre ciclos (10 segundos)
        info!("‚è≥ Esperando 10 segundos hasta pr√≥ximo ciclo...");
        sleep(Duration::from_secs(10)).await;
        
        // Limitar a 20 ciclos para demostraci√≥n (200 segundos total)
        if cycle_count >= 20 {
            info!("üèÅ Demo completada - 20 ciclos ejecutados");
            
            // Balance final
            if let Ok(final_balance) = get_wallet_balance(&rpc_client, &wallet_pubkey).await {
                let total_change = final_balance - initial_balance;
                info!("üìä RESUMEN FINAL ENHANCED:");
                info!("   ‚Ä¢ Balance inicial: {:.9} SOL", initial_balance);
                info!("   ‚Ä¢ Balance final: {:.9} SOL", final_balance);
                info!("   ‚Ä¢ Cambio total: {:+.9} SOL", total_change);
                info!("   ‚Ä¢ Profit acumulado: {:+.9} SOL", total_profit);
                info!("   ‚Ä¢ Oportunidades encontradas: {}", total_opportunities_found);
                info!("   ‚Ä¢ Oportunidades ejecutadas: {}", total_opportunities_executed);
                
                // Actualizar dashboard final
                dashboard.update_system_status(
                    final_balance,
                    total_profit,
                    total_opportunities_found,
                    total_opportunities_executed,
                    cycle_count,
                );
            }
            
            // Generar reportes finales ACCI√ìN 7
            info!("üìà === REPORTES FINALES ACCI√ìN 7 ===");
            
            // Performance report
            info!("üöÄ Performance Report:");
            let perf_report = performance_optimizer.generate_performance_report();
            info!("{}", perf_report);
            
            // Profit tracking report
            info!("üí∞ Profit Tracking Report:");
            let profit_report = profit_tracker.generate_report();
            info!("{}", profit_report);
            
            // Dashboard report
            info!("üìä Dashboard Report:");
            let dashboard_report = dashboard.generate_dashboard_report();
            info!("{}", dashboard_report);
            
            info!("üìà === FIN REPORTES ACCI√ìN 7 ===");
            
            break;
        }
    }

    // Detener dashboard
    dashboard.stop();

    info!("‚úÖ Sistema de Arbitraje Phase 4.5 Enhanced finalizado");
    info!("üéØ ACCI√ìN 7 completada exitosamente con optimizaciones avanzadas");
    Ok(())
}
