[platform]
name = "SniperForge"
version = "0.1.0"
max_concurrent_bots = 3
resource_allocation_strategy = "priority_based"
event_bus_buffer_size = 5000

# HYBRID TRADING MODE - Sprint 1.5
[trading]
mode = "hybrid"  # devnet_real + mainnet_paper
devnet_real_trading = true
mainnet_paper_trading = true

[network]
# DEVNET CONFIGURATION - SAFE FOR TESTING
environment = "devnet"

# Devnet endpoints (for testing) - Updated June 28, 2025
devnet_primary_rpc = "https://api.devnet.solana.com"

# Backup endpoints for devnet (alternative endpoints for redundancy)
devnet_backup_rpc = [
    # Note: Most public devnet endpoints require API keys
    # For now, we rely on the primary endpoint since devnet is for testing
    # To add backup endpoints, configure premium RPC with API keys below
    
    # Alternative: Use premium endpoints when API keys are configured
    # - Helius devnet (often free): https://devnet.helius-rpc.com/?api-key=YOUR_KEY
    # - Alchemy devnet: https://solana-devnet.g.alchemy.com/v2/YOUR_KEY
]
devnet_websocket_url = "wss://api.devnet.solana.com"

# Connection settings
connection_timeout_ms = 10000
request_timeout_ms = 15000
retry_attempts = 3
retry_delay_ms = 1000

# Premium RPC endpoints for devnet (require API keys - set via environment variables)
# Set these environment variables for premium access:
# - HELIUS_API_KEY=your_helius_api_key_here
# - ANKR_API_KEY=your_ankr_api_key_here
# - QUICKNODE_ENDPOINT=your_quicknode_devnet_endpoint_here
# - ALCHEMY_API_KEY=your_alchemy_api_key_here

[network.premium_rpc]
enabled = false  # Set to true when API keys are configured

# Premium devnet endpoints (will be used if API keys are available)
helius_rpc_template = "https://devnet.helius-rpc.com/?api-key={API_KEY}"
ankr_rpc_template = "https://rpc.ankr.com/solana_devnet/{API_KEY}"
quicknode_rpc_template = "{ENDPOINT}"  # Full endpoint provided by QuickNode
alchemy_rpc_template = "https://solana-devnet.g.alchemy.com/v2/{API_KEY}"

# Premium WebSocket endpoints
helius_ws_template = "wss://devnet.helius-rpc.com/?api-key={API_KEY}"
alchemy_ws_template = "wss://solana-devnet.g.alchemy.com/v2/{API_KEY}"

# Premium endpoint priorities (1 = highest priority)
endpoint_priorities = [
    { provider = "helius", priority = 1, max_requests_per_second = 100 },
    { provider = "alchemy", priority = 2, max_requests_per_second = 100 },
    { provider = "quicknode", priority = 3, max_requests_per_second = 50 },
    { provider = "ankr", priority = 4, max_requests_per_second = 25 }
]

[shared_services]
rpc_pool_size = 10
wallet_isolation = true
data_feed_aggregation = true
monitoring_enabled = true

[security]
# Wallet configuration (NEVER commit real private keys)
wallet_encryption_enabled = true
key_derivation_iterations = 100000
session_timeout_minutes = 30

# Wallet configuration - Sprint 1.5
[wallets]
auto_generate = true
auto_airdrop_devnet = true
devnet_airdrop_amount = 5.0  # 5 SOL for testing

# DevNet wallet (real keypair for testing)
[wallets.devnet]
enabled = true
real_trading = true
paper_trading = false
initial_balance_sol = 5.0
max_trade_amount_sol = 1.0

# MainNet wallet (virtual/paper trading only)
[wallets.mainnet]
enabled = true
real_trading = false
paper_trading = true
virtual_balance_sol = 100.0  # Virtual money for simulation
max_trade_amount_sol = 10.0

[logging]
level = "info"
file_enabled = true
console_enabled = true
max_file_size_mb = 50
max_files = 5

# Bot-specific configurations
[bots.lp_sniper]
enabled = true
priority = "high"
resource_allocation = { cpu = "30%", memory = "512MB" }

[bots.lp_sniper.detection]
target_dexs = ["raydium"]
min_liquidity_usd = 1000    # Lower threshold for testing
max_response_time_ms = 500  # More relaxed for devnet
pool_creation_buffer_blocks = 5

[bots.lp_sniper.risk]
max_position_size_usd = 100   # Much lower for testing
max_slippage_percent = 5.0
stop_loss_percent = -15.0
take_profit_percent = 25.0

[bots.copy_trading]
enabled = false
priority = "medium"
resource_allocation = { cpu = "15%", memory = "256MB" }

[bots.arbitrage]
enabled = false
priority = "high"
resource_allocation = { cpu = "20%", memory = "256MB" }

[bots.mev]
enabled = false
priority = "critical"
resource_allocation = { cpu = "25%", memory = "512MB" }

# Development settings
[development]
simulate_trades = false  # ENABLE REAL TRADES IN DEVNET (uses real SOL but low amounts)
use_devnet = true       # EXPLICITLY USE DEVNET (safe testing environment)
verbose_logging = true  # Enable detailed logging for debugging
enable_debug_mode = true # Enable debug features for development

# Performance settings
[performance]
target_latency_ms = 100     # More relaxed for testing
max_memory_usage_mb = 1024  # Lower memory usage
gc_interval_seconds = 30
metrics_collection_interval_ms = 2000
