# Test de Sistema de Arbitraje - Configuraci√≥n JSON
# Verifica que el sistema funcione correctamente con la nueva configuraci√≥n

param(
    [switch]$Quick,
    [switch]$Verbose
)

Write-Host "=== Test del Sistema de Arbitraje ===" -ForegroundColor Cyan

# 1. Verificar archivos de configuraci√≥n
Write-Host "`nüîç Verificando archivos de configuraci√≥n..." -ForegroundColor Yellow

$configFiles = @("arbitrage_settings.json", "arbitrage_settings.config")
foreach ($file in $configFiles) {
    if (Test-Path $file) {
        Write-Host "‚úì $file existe" -ForegroundColor Green
        
        # Verificar que el JSON es v√°lido
        if ($file -eq "arbitrage_settings.json") {
            try {
                $content = Get-Content $file -Raw | ConvertFrom-Json
                Write-Host "‚úì JSON v√°lido" -ForegroundColor Green
                
                # Verificar campos cr√≠ticos
                if ($content.trading.mode) {
                    Write-Host "‚úì Campo 'mode' presente: $($content.trading.mode)" -ForegroundColor Green
                } else {
                    Write-Host "‚ùå Campo 'mode' faltante" -ForegroundColor Red
                }
                
                if ($content.risk_management.emergency_stop_enabled) {
                    Write-Host "‚úì Emergency stop habilitado" -ForegroundColor Green
                } else {
                    Write-Host "‚ö†Ô∏è  Emergency stop no configurado" -ForegroundColor Yellow
                }
            } catch {
                Write-Host "‚ùå Error en JSON: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
    } else {
        Write-Host "‚ùå $file no encontrado" -ForegroundColor Red
    }
}

# 2. Verificar gitignore
Write-Host "`nüîç Verificando configuraci√≥n Git..." -ForegroundColor Yellow
if (Test-Path ".gitignore") {
    $gitignoreContent = Get-Content ".gitignore" -Raw
    if ($gitignoreContent -match "!arbitrage_settings\.json") {
        Write-Host "‚úì .gitignore permite versionar arbitrage_settings.json" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  .gitignore no configurado para settings" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ùå .gitignore no encontrado" -ForegroundColor Red
}

# 3. Test de compilaci√≥n
if (!$Quick) {
    Write-Host "`nüî® Verificando compilaci√≥n..." -ForegroundColor Yellow
    
    $buildResult = & cargo check --bin arbitrage_phase45_clean 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úì Compilaci√≥n exitosa" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error de compilaci√≥n:" -ForegroundColor Red
        Write-Host $buildResult -ForegroundColor Gray
    }
}

# 4. Test r√°pido de ejecuci√≥n (solo validaci√≥n)
if (!$Quick) {
    Write-Host "`nüöÄ Test de ejecuci√≥n (validaci√≥n r√°pida)..." -ForegroundColor Yellow
    
    # Crear timeout para evitar ejecuci√≥n larga
    $job = Start-Job -ScriptBlock {
        Set-Location $using:PWD
        & cargo run --bin arbitrage_phase45_clean 2>&1
    }
    
    # Esperar m√°ximo 10 segundos
    if (Wait-Job $job -Timeout 10) {
        $output = Receive-Job $job
        if ($output -match "‚úÖ.*JSON.*exitosa") {
            Write-Host "‚úì Sistema inicia correctamente con configuraci√≥n JSON" -ForegroundColor Green
        } elseif ($output -match "‚ùå.*Error") {
            Write-Host "‚ùå Error al iniciar sistema:" -ForegroundColor Red
            Write-Host ($output | Select-Object -Last 5) -ForegroundColor Gray
        } else {
            Write-Host "‚ö†Ô∏è  Sistema iniciando (timeout despu√©s de 10s)" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è  Sistema iniciando en segundo plano (normal)" -ForegroundColor Yellow
    }
    
    Stop-Job $job -ErrorAction SilentlyContinue
    Remove-Job $job -ErrorAction SilentlyContinue
}

# Resumen
Write-Host "`n=== Resumen del Test ===" -ForegroundColor Cyan
Write-Host "‚Ä¢ Configuraci√≥n JSON: Reparada y validada" -ForegroundColor White
Write-Host "‚Ä¢ Control de versiones: Configurado para permitir settings" -ForegroundColor White
Write-Host "‚Ä¢ Sistema: Listo para operaci√≥n" -ForegroundColor White

if ($Verbose) {
    Write-Host "`nüìã Comandos √∫tiles:" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Ejecutar sistema: cargo run --bin arbitrage_phase45_clean" -ForegroundColor Gray
    Write-Host "‚Ä¢ Convertir config: pwsh convert_config.ps1" -ForegroundColor Gray
    Write-Host "‚Ä¢ Ver diferencias: git diff arbitrage_settings.json" -ForegroundColor Gray
}

Write-Host "`n‚úÖ Test completado" -ForegroundColor Green
