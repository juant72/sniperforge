# üîç DIAGN√ìSTICO EXHAUSTIVO - DETECCI√ìN DE OPORTUNIDADES
Write-Host "üîç DIAGN√ìSTICO EXHAUSTIVO - DETECCI√ìN DE OPORTUNIDADES" -ForegroundColor Cyan

# Paso 1: Verificar precios obtenidos de APIs
Write-Host "`nüì° PASO 1: Verificaci√≥n de APIs de precios" -ForegroundColor Yellow

# Test DexScreener API directamente
Write-Host "üîç Testing DexScreener API..." -ForegroundColor Gray
try {
    $sol_mint = "So11111111111111111111111111111111111111112"
    $dexscreener_url = "https://api.dexscreener.com/latest/dex/tokens/$sol_mint"
    $dex_response = Invoke-RestMethod -Uri $dexscreener_url -TimeoutSec 10
    
    if ($dex_response.pairs -and $dex_response.pairs.Count -gt 0) {
        Write-Host "‚úÖ DexScreener: $($dex_response.pairs.Count) pares encontrados" -ForegroundColor Green
        
        # Mostrar primeros 3 pares para an√°lisis
        $dex_response.pairs | Select-Object -First 3 | ForEach-Object {
            $price_diff = if ($_.priceChange.h24) { [math]::Abs([double]$_.priceChange.h24) } else { 0 }
            Write-Host "    üìä $($_.dexId): Precio $($_.priceUsd), Liquidez $($_.liquidity.usd), Cambio 24h: $($price_diff)%" -ForegroundColor Gray
        }
    } else {
        Write-Host "‚ùå DexScreener: No pairs found" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå DexScreener API Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Test Jupiter API directamente
Write-Host "`nüîç Testing Jupiter API..." -ForegroundColor Gray
try {
    $jupiter_url = "https://price.jup.ag/v4/price?ids=$sol_mint"
    $jupiter_response = Invoke-RestMethod -Uri $jupiter_url -TimeoutSec 10
    
    if ($jupiter_response.data) {
        Write-Host "‚úÖ Jupiter: Precio obtenido" -ForegroundColor Green
        Write-Host "    üìä SOL: $($jupiter_response.data.$sol_mint.price)" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå Jupiter: No price data" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Jupiter API Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Paso 2: An√°lisis de tokens configurados
Write-Host "`nüìã PASO 2: Verificaci√≥n de tokens configurados" -ForegroundColor Yellow

# Buscar configuraci√≥n de tokens
$token_configs = Get-ChildItem -Path "src" -Recurse -Include "*.rs" | Select-String -Pattern "token.*mint|USDC|BONK|JUP" | Select-Object -First 10

if ($token_configs) {
    Write-Host "‚úÖ Configuraciones de tokens encontradas:" -ForegroundColor Green
    $token_configs | ForEach-Object {
        Write-Host "    üìÑ $($_.Filename):$($_.LineNumber) - $($_.Line.Trim())" -ForegroundColor Gray
    }
} else {
    Write-Host "‚ùå No se encontraron configuraciones de tokens" -ForegroundColor Red
}

# Paso 3: Verificar thresholds y filtros
Write-Host "`n‚öôÔ∏è PASO 3: Verificaci√≥n de thresholds y filtros" -ForegroundColor Yellow

$threshold_configs = Get-ChildItem -Path "src" -Recurse -Include "*.rs" | Select-String -Pattern "threshold|min.*profit|confidence.*score|price.*diff" | Select-Object -First 10

if ($threshold_configs) {
    Write-Host "‚úÖ Configuraciones de thresholds encontradas:" -ForegroundColor Green
    $threshold_configs | ForEach-Object {
        Write-Host "    üìÑ $($_.Filename):$($_.LineNumber) - $($_.Line.Trim())" -ForegroundColor Gray
    }
} else {
    Write-Host "‚ùå No se encontraron configuraciones de thresholds" -ForegroundColor Red
}

# Paso 4: Ejecutar sistema con logs detallados
Write-Host "`nüöÄ PASO 4: Ejecuci√≥n con logs detallados" -ForegroundColor Yellow

$env:RUST_LOG = "debug"
$env:REAL_TRADING_MODE = "false"  # Modo seguro

Write-Host "üîç Ejecutando sistema con logs DEBUG..." -ForegroundColor Gray

# Capturar output detallado y analizarlo
$output = & "./target/debug/arbitrage_phase45_clean.exe" 2>&1 | Select-Object -First 50

# Analizar output por categor√≠as
$price_logs = $output | Select-String -Pattern "precio|price|DexScreener|Jupiter|Coinbase"
$opportunity_logs = $output | Select-String -Pattern "oportunidad|opportunity|detected|found"
$error_logs = $output | Select-String -Pattern "error|Error|ERROR|failed|Failed"

Write-Host "`nüìä AN√ÅLISIS DE LOGS:" -ForegroundColor Cyan

Write-Host "  üî¢ Logs de precios: $($price_logs.Count)" -ForegroundColor $(if ($price_logs.Count -gt 0) { "Green" } else { "Red" })
Write-Host "  üíé Logs de oportunidades: $($opportunity_logs.Count)" -ForegroundColor $(if ($opportunity_logs.Count -gt 0) { "Green" } else { "Red" })
Write-Host "  ‚ùå Logs de errores: $($error_logs.Count)" -ForegroundColor $(if ($error_logs.Count -eq 0) { "Green" } else { "Red" })

if ($error_logs.Count -gt 0) {
    Write-Host "`nüö® ERRORES DETECTADOS:" -ForegroundColor Red
    $error_logs | Select-Object -First 5 | ForEach-Object {
        Write-Host "    $($_.Line)" -ForegroundColor Red
    }
}

# Paso 5: Recomendaciones espec√≠ficas
Write-Host "`nüí° PASO 5: Diagn√≥stico y recomendaciones" -ForegroundColor Yellow

$recommendations = @()

if ($price_logs.Count -eq 0) {
    $recommendations += "‚ùå CR√çTICO: No se est√°n obteniendo precios de APIs"
}

if ($opportunity_logs.Count -eq 0) {
    $recommendations += "‚ùå CR√çTICO: No se est√°n detectando oportunidades"
}

if ($error_logs.Count -gt 3) {
    $recommendations += "‚ö†Ô∏è ADVERTENCIA: M√∫ltiples errores en APIs"
}

if ($recommendations.Count -eq 0) {
    $recommendations += "‚úÖ APIs funcionando, problema en l√≥gica de detecci√≥n"
}

Write-Host "`nüìã RECOMENDACIONES:" -ForegroundColor Cyan
$recommendations | ForEach-Object {
    Write-Host "  $_" -ForegroundColor Yellow
}

Write-Host "`nüéØ SIGUIENTE ACCI√ìN RECOMENDADA:" -ForegroundColor Green
if ($price_logs.Count -eq 0) {
    Write-Host "  1. Reparar conectividad con APIs de precios" -ForegroundColor Cyan
} elseif ($opportunity_logs.Count -eq 0) {
    Write-Host "  1. Reducir thresholds de detecci√≥n de oportunidades" -ForegroundColor Cyan
    Write-Host "  2. Aumentar n√∫mero de tokens analizados" -ForegroundColor Cyan
    Write-Host "  3. Revisar l√≥gica de comparaci√≥n de precios" -ForegroundColor Cyan
} else {
    Write-Host "  1. Investigar l√≥gica de filtros en detecci√≥n" -ForegroundColor Cyan
}

Write-Host "`nüîç DIAGN√ìSTICO COMPLETO - Revisar resultados arriba" -ForegroundColor Green
