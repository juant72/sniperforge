    Checking sniperforge v1.0.0 (C:\work\encrypia\labs\sniperforge)
warning: redundant else block
   --> src\utils\config_loader.rs:112:14
    |
112 |               } else {
    |  ______________^
113 | |                 // Intermediate part - navigate deeper
114 | |                 if let Some(obj) = current.as_object_mut() {
115 | |                     if !obj.contains_key(*part) {
...   |
124 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
note: the lint level is defined here
   --> src\lib.rs:17:9
    |
17  | #![warn(clippy::pedantic)]
    |         ^^^^^^^^^^^^^^^^
    = note: `#[warn(clippy::redundant_else)]` implied by `#[warn(clippy::pedantic)]`
help: remove the `else` block and move the contents out
    |
112 ~             }
113 +             // Intermediate part - navigate deeper
114 +             if let Some(obj) = current.as_object_mut() {
115 +                 if !obj.contains_key(*part) {
116 +                     obj.insert(part.to_string(), serde_json::Value::Object(Default::default()));
117 +                 }
118 +                 // Get the next level - this resolves the borrow checker issue
119 +                 let next_key = part.to_string();
120 +                 current = obj.get_mut(&next_key).unwrap();
121 +             } else {
122 +                 return Err("Cannot navigate through non-object".to_string().into());
123 +             }
    |

warning: redundant else block
   --> src\utils\config_loader.rs:109:18
    |
109 |                   } else {
    |  __________________^
110 | |                     return Err("Cannot set value on non-object".to_string().into());
111 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
109 ~                 }
110 +                 return Err("Cannot set value on non-object".to_string().into());
    |

warning: first doc comment paragraph is too long
  --> src\config\api_credentials.rs:1:1
   |
1  | / //! Configuraci├│n de credenciales de APIs para el sistema `SniperForge`
2  | | //! Centraliza todas las credenciales y URLs de servicios externos
3  | | //! TODAS LAS CREDENCIALES SE CARGAN DESDE config.json - NO HAY HARDCODING
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph
note: the lint level is defined here
  --> src\lib.rs:18:9
   |
18 | #![warn(clippy::nursery)]
   |         ^^^^^^^^^^^^^^^
   = note: `#[warn(clippy::too_long_first_doc_paragraph)]` implied by `#[warn(clippy::nursery)]`

warning: unnecessary `Debug` formatting in `format!` args
   --> src\config\api_credentials.rs:112:91
    |
112 |             .with_context(|| format!("No se pudo leer el archivo de configuraci├│n: {:?}", path.as_ref()))?;
    |                                                                                           ^^^^^^^^^^^^^
    |
    = help: use `Display` formatting and change this to `path.as_ref().display()`
    = note: switching to `Display` formatting will change how the value is shown; escaped characters will no longer be escaped and surrounding quotes will be removed
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_debug_formatting
    = note: `#[warn(clippy::unnecessary_debug_formatting)]` implied by `#[warn(clippy::pedantic)]`

warning: unnecessary `Debug` formatting in `println!` args
   --> src\config\api_credentials.rs:117:70
    |
117 |         println!("Ô£à Configuraci├│n cargada exitosamente desde: {:?}", path.as_ref());
    |                                                                       ^^^^^^^^^^^^^
    |
    = help: use `Display` formatting and change this to `path.as_ref().display()`
    = note: switching to `Display` formatting will change how the value is shown; escaped characters will no longer be escaped and surrounding quotes will be removed
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_debug_formatting

warning: this method could have a `#[must_use]` attribute
   --> src\config\api_credentials.rs:180:5
    |
180 |     pub fn get_fallback_price(&self, token: &str) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_fallback_price(&self, token: &str) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
    = note: `#[warn(clippy::must_use_candidate)]` implied by `#[warn(clippy::pedantic)]`

warning: this method could have a `#[must_use]` attribute
   --> src\config\api_credentials.rs:185:5
    |
185 |     pub fn get_trading_config(&self) -> &TradingConfigData {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_trading_config(&self) -> &TradingConfigData`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\config\api_credentials.rs:185:5
    |
185 | /     pub fn get_trading_config(&self) -> &TradingConfigData {
186 | |         &self.trading_config
187 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
    = note: `#[warn(clippy::missing_const_for_fn)]` implied by `#[warn(clippy::nursery)]`
help: make the function `const`
    |
185 |     pub const fn get_trading_config(&self) -> &TradingConfigData {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\config\api_credentials.rs:190:5
    |
190 |     pub fn get_helius_url(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_helius_url(&self) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\config\api_credentials.rs:195:5
    |
195 |     pub fn get_helius_websocket_url(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_helius_websocket_url(&self) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\config\api_credentials.rs:200:5
    |
200 |     pub fn get_rate_limit(&self, provider: &str) -> u64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_rate_limit(&self, provider: &str) -> u64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\config\api_credentials.rs:205:5
    |
205 |     pub fn get_timeout(&self, provider: &str) -> u64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_timeout(&self, provider: &str) -> u64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\config\api_credentials.rs:210:5
    |
210 |     pub fn has_helius_credentials(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn has_helius_credentials(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\config\api_credentials.rs:217:5
    |
217 |     pub fn get_config_summary(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_config_summary(&self) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unnecessary boolean `not` operation
   --> src\config\api_credentials.rs:221:13
    |
221 |             if !self.jupiter_api_url.is_empty() { "Ô£à" } else { "ÔØî" },
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `if self.jupiter_api_url.is_empty() { "ÔØî" } else { "Ô£à" }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
    = note: `#[warn(clippy::if_not_else)]` implied by `#[warn(clippy::pedantic)]`

warning: unnecessary boolean `not` operation
   --> src\config\api_credentials.rs:222:13
    |
222 |             if !self.dexscreener_api_url.is_empty() { "Ô£à" } else { "ÔØî" },
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `if self.dexscreener_api_url.is_empty() { "ÔØî" } else { "Ô£à" }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary boolean `not` operation
   --> src\config\api_credentials.rs:223:13
    |
223 |             if !self.pyth_api_url.is_empty() { "Ô£à" } else { "ÔØî" },
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `if self.pyth_api_url.is_empty() { "ÔØî" } else { "Ô£à" }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: redundant pattern matching, consider using `is_err()`
  --> src\config\enterprise.rs:83:16
   |
83 |         if let Err(_) = dotenv::dotenv() {
   |         -------^^^^^^------------------- help: try: `if dotenv::dotenv().is_err()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching
note: the lint level is defined here
  --> src\lib.rs:16:9
   |
16 | #![warn(clippy::all)]
   |         ^^^^^^^^^^^
   = note: `#[warn(clippy::redundant_pattern_matching)]` implied by `#[warn(clippy::all)]`

warning: unnecessary structure name repetition
  --> src\config\enterprise.rs:87:22
   |
87 |         let config = EnterpriseConfig {
   |                      ^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self
   = note: `#[warn(clippy::use_self)]` implied by `#[warn(clippy::nursery)]`

warning: unnecessary `Debug` formatting in `format!` args
   --> src\config\enterprise.rs:205:56
    |
205 |                 format!("Wallet file not found: {:?}", self.security.private_key_path)
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `Display` formatting and change this to `self.security.private_key_path.display()`
    = note: switching to `Display` formatting will change how the value is shown; escaped characters will no longer be escaped and surrounding quotes will be removed
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_debug_formatting

warning: this method could have a `#[must_use]` attribute
   --> src\config\enterprise.rs:213:5
    |
213 |     pub fn get_helius_url(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_helius_url(&self) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: variables can be used directly in the `format!` string
   --> src\config\enterprise.rs:222:51
    |
222 |             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
    = note: `#[warn(clippy::uninlined_format_args)]` implied by `#[warn(clippy::all)]`
help: change this to
    |
222 -             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
222 +             .map_err(|_| SniperForgeError::config(format!("Invalid {key} value: {v}"))))
    |

warning: variables can be used directly in the `format!` string
   --> src\config\enterprise.rs:229:51
    |
229 |             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
229 -             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
229 +             .map_err(|_| SniperForgeError::config(format!("Invalid {key} value: {v}"))))
    |

warning: variables can be used directly in the `format!` string
   --> src\config\enterprise.rs:236:51
    |
236 |             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
236 -             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
236 +             .map_err(|_| SniperForgeError::config(format!("Invalid {key} value: {v}"))))
    |

warning: variables can be used directly in the `format!` string
   --> src\config\enterprise.rs:243:51
    |
243 |             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
243 -             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
243 +             .map_err(|_| SniperForgeError::config(format!("Invalid {key} value: {v}"))))
    |

warning: variables can be used directly in the `format!` string
   --> src\config\enterprise.rs:250:51
    |
250 |             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
250 -             .map_err(|_| SniperForgeError::config(format!("Invalid {} value: {}", key, v))))
250 +             .map_err(|_| SniperForgeError::config(format!("Invalid {key} value: {v}"))))
    |

warning: variables can be used directly in the `format!` string
   --> src\config\enterprise.rs:259:47
    |
259 |             _ => Err(SniperForgeError::config(format!("Invalid {} value: {}", key, v)))
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
259 -             _ => Err(SniperForgeError::config(format!("Invalid {} value: {}", key, v)))
259 +             _ => Err(SniperForgeError::config(format!("Invalid {key} value: {v}")))
    |

warning: item in documentation is missing backticks
 --> src\config\network\network_config.rs:1:31
  |
1 | //! Network Configuration for SniperForge Enterprise
  |                               ^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
  = note: `#[warn(clippy::doc_markdown)]` implied by `#[warn(clippy::pedantic)]`
help: try
  |
1 - //! Network Configuration for SniperForge Enterprise
1 + //! Network Configuration for `SniperForge` Enterprise
  |

warning: item in documentation is missing backticks
  --> src\config\network\network_config.rs:41:13
   |
41 |     /// Get DevNet configuration
   |             ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
41 -     /// Get DevNet configuration
41 +     /// Get `DevNet` configuration
   |

warning: this method could have a `#[must_use]` attribute
  --> src\config\network\network_config.rs:42:5
   |
42 |     pub fn devnet() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn devnet() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: item in documentation is missing backticks
  --> src\config\network\network_config.rs:87:13
   |
87 |     /// Get MainNet configuration
   |             ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
87 -     /// Get MainNet configuration
87 +     /// Get `MainNet` configuration
   |

warning: this method could have a `#[must_use]` attribute
  --> src\config\network\network_config.rs:88:5
   |
88 |     pub fn mainnet() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn mainnet() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src\config\mod.rs:35:5
   |
35 |     pub fn to_simple_config(&self) -> SimpleConfig {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn to_simple_config(&self) -> SimpleConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
  --> src\config\mod.rs:39:27
   |
39 |             max_slippage: self.trading.max_slippage_bps as f64 / 10000.0, // Convert bps to decimal
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: an `as` cast can become silently lossy if the types change in the future
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
   = note: `#[warn(clippy::cast_lossless)]` implied by `#[warn(clippy::pedantic)]`
help: use `f64::from` instead
   |
39 -             max_slippage: self.trading.max_slippage_bps as f64 / 10000.0, // Convert bps to decimal
39 +             max_slippage: f64::from(self.trading.max_slippage_bps) / 10000.0, // Convert bps to decimal
   |

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
  --> src\config\mod.rs:40:35
   |
40 |             min_profit_threshold: self.trading.min_profit_bps as f64 / 10000.0, // Convert bps to decimal
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: an `as` cast can become silently lossy if the types change in the future
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
   |
40 -             min_profit_threshold: self.trading.min_profit_bps as f64 / 10000.0, // Convert bps to decimal
40 +             min_profit_threshold: f64::from(self.trading.min_profit_bps) / 10000.0, // Convert bps to decimal
   |

warning: assigning the result of `Clone::clone()` may be inefficient
   --> src\config\mod.rs:101:13
    |
101 |             config.solana_rpc_url = rpc_url.clone();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `config.solana_rpc_url.clone_from(rpc_url)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones
    = note: `#[warn(clippy::assigning_clones)]` implied by `#[warn(clippy::pedantic)]`

warning: assigning the result of `Clone::clone()` may be inefficient
   --> src\config\mod.rs:105:13
    |
105 |             config.solana_ws_url = ws_url.clone();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `config.solana_ws_url.clone_from(ws_url)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> src\config\mod.rs:126:13
    |
126 |             config.private_key_path = wallet_path.clone();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `config.private_key_path.clone_from(wallet_path)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> src\config\mod.rs:153:13
    |
153 |             config.dexscreener_base_url = dex_url.clone();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `config.dexscreener_base_url.clone_from(dex_url)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> src\config\mod.rs:158:13
    |
158 |             config.log_level = log_level.clone();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `config.log_level.clone_from(log_level)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: variables can be used directly in the `format!` string
   --> src\config\mod.rs:169:24
    |
169 |             return Err(format!("Configuration file '{}' not found", file_path).into());
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
169 -             return Err(format!("Configuration file '{}' not found", file_path).into());
169 +             return Err(format!("Configuration file '{file_path}' not found").into());
    |

warning: variables can be used directly in the `format!` string
   --> src\config\mod.rs:173:26
    |
173 |             .map_err(|e| format!("Failed to read config file '{}': {}", file_path, e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
173 -             .map_err(|e| format!("Failed to read config file '{}': {}", file_path, e))?;
173 +             .map_err(|e| format!("Failed to read config file '{file_path}': {e}"))?;
    |

warning: this method could have a `#[must_use]` attribute
   --> src\config\mod.rs:195:5
    |
195 |     pub fn get_config_value(key: &str, default: &str) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_config_value(key: &str, default: &str) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: use Option::map_or_else instead of an if let/else
   --> src\config\mod.rs:196:9
    |
196 | /         match Self::parse_env_file(".env.mainnet") {
197 | |             Ok(config_map) => config_map.get(key).cloned().unwrap_or_else(|| default.to_string()),
198 | |             Err(_) => default.to_string(),
199 | |         }
    | |_________^ help: try: `Self::parse_env_file(".env.mainnet").map_or_else(|_| default.to_string(), |config_map| config_map.get(key).cloned().unwrap_or_else(|| default.to_string()))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
    = note: `#[warn(clippy::option_if_let_else)]` implied by `#[warn(clippy::nursery)]`

warning: variables can be used directly in the `format!` string
   --> src\config\mod.rs:336:65
    |
336 |             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to read config file: {}", e)))?;
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
336 -             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to read config file: {}", e)))?;
336 +             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to read config file: {e}")))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\config\mod.rs:339:65
    |
339 |             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to parse config: {}", e)))?;
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
339 -             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to parse config: {}", e)))?;
339 +             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to parse config: {e}")))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\config\mod.rs:348:65
    |
348 |             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to serialize config: {}", e)))?;
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
348 -             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to serialize config: {}", e)))?;
348 +             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to serialize config: {e}")))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\config\mod.rs:351:65
    |
351 |             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to write config file: {}", e)))?;
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
351 -             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to write config file: {}", e)))?;
351 +             .map_err(|e| crate::types::SniperForgeError::Config(format!("Failed to write config file: {e}")))?;
    |

warning: this method could have a `#[must_use]` attribute
   --> src\config\mod.rs:388:5
    |
388 |     pub fn production_safe() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn production_safe() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: item in documentation is missing backticks
   --> src\config\mod.rs:429:9
    |
429 |     /// DevNet environment configuration
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
429 -     /// DevNet environment configuration
429 +     /// `DevNet` environment configuration
    |

warning: item in documentation is missing backticks
   --> src\config\mod.rs:431:9
    |
431 |     /// MainNet environment configuration  
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
431 -     /// MainNet environment configuration  
431 +     /// `MainNet` environment configuration  
    |

warning: more than 3 bools in a struct
   --> src\trading\arbitrage.rs:109:1
    |
109 | / pub struct PerformanceConfig {
110 | |     pub max_concurrent_discoveries: usize,
111 | |     pub cache_ttl_seconds: u64,
112 | |     pub parallel_api_calls: bool,
...   |
117 | |     pub ml_confidence_threshold: f64,
118 | | }
    | |_^
    |
    = help: consider using a state machine or refactoring bools into two-variant enums
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools
    = note: `#[warn(clippy::struct_excessive_bools)]` implied by `#[warn(clippy::pedantic)]`

warning: item in documentation is missing backticks
   --> src\trading\arbitrage.rs:165:31
    |
165 | /// Core arbitrage engine for SniperForge (Enhanced with working bot functionality)
    |                               ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
165 - /// Core arbitrage engine for SniperForge (Enhanced with working bot functionality)
165 + /// Core arbitrage engine for `SniperForge` (Enhanced with working bot functionality)
    |

warning: very complex type used. Consider factoring parts into `type` definitions
   --> src\trading\arbitrage.rs:184:21
    |
184 |     hourly_profits: Arc<RwLock<VecDeque<(DateTime<Utc>, f64)>>>,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity
    = note: `#[warn(clippy::type_complexity)]` implied by `#[warn(clippy::all)]`

warning: the function has a cognitive complexity of (32/30)
   --> src\trading\arbitrage.rs:190:18
    |
190 |     pub async fn new(
    |                  ^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity
    = note: `#[warn(clippy::cognitive_complexity)]` implied by `#[warn(clippy::nursery)]`

warning: variables can be used directly in the `format!` string
   --> src\trading\arbitrage.rs:212:26
    |
212 |             .map_err(|e| format!("Failed to get initial wallet balance: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
212 -             .map_err(|e| format!("Failed to get initial wallet balance: {}", e))?;
212 +             .map_err(|e| format!("Failed to get initial wallet balance: {e}"))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\arbitrage.rs:264:26
    |
264 |             .map_err(|e| format!("Failed to read wallet file: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
264 -             .map_err(|e| format!("Failed to read wallet file: {}", e))?;
264 +             .map_err(|e| format!("Failed to read wallet file: {e}"))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\arbitrage.rs:267:26
    |
267 |             .map_err(|e| format!("Failed to parse wallet JSON: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
267 -             .map_err(|e| format!("Failed to parse wallet JSON: {}", e))?;
267 +             .map_err(|e| format!("Failed to parse wallet JSON: {e}"))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\arbitrage.rs:270:26
    |
270 |             .map_err(|e| format!("Failed to create keypair: {}", e))
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
270 -             .map_err(|e| format!("Failed to create keypair: {}", e))
270 +             .map_err(|e| format!("Failed to create keypair: {e}"))
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\trading\arbitrage.rs:320:13
    |
307 |       pub async fn scan_for_opportunities(&self) -> Result<Vec<ArbitrageOpportunity>> {
    |  _____________________________________________________________________________________-
308 | |         debug!("Scanning for arbitrage opportunities...");
309 | |         
310 | |         let start_time = Instant::now();
...   |
320 | |         let pairs = self.active_pairs.read().await;
    | |             ^^^^^
...   |
339 | |         Ok(opportunities)
340 | |     }
    | |_____- temporary `pairs` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
    = note: `#[warn(clippy::significant_drop_tightening)]` implied by `#[warn(clippy::nursery)]`
help: merge the temporary construction with its single usage
    |
320 ~         
321 +         self.active_pairs.read().await.;
322 ~         
    |

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\trading\arbitrage.rs:360:33
    |
360 |         let profit_percentage = price_diff - pair.fee_rate * 2.0; // Account for fees
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `pair.fee_rate.mul_add(-2.0, price_diff)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops
    = note: `#[warn(clippy::suboptimal_flops)]` implied by `#[warn(clippy::nursery)]`

warning: the function has a cognitive complexity of (60/30)
   --> src\trading\arbitrage.rs:389:18
    |
389 |     pub async fn validate_execution(&self, opportunity: &ArbitrageOpportunity) -> Result<()> {
    |                  ^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: variables can be used directly in the `format!` string
   --> src\trading\arbitrage.rs:420:26
    |
420 |             .map_err(|e| format!("Failed to get wallet balance: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
420 -             .map_err(|e| format!("Failed to get wallet balance: {}", e))?;
420 +             .map_err(|e| format!("Failed to get wallet balance: {e}"))?;
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\arbitrage.rs:426:5
    |
426 |     pub fn get_wallet_pubkey(&self) -> Pubkey {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_wallet_pubkey(&self) -> Pubkey`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
   --> src\trading\arbitrage.rs:602:33
    |
600 |                       if config.max_concurrent_discoveries > 1 {
    |  ______________________________________________________________-
601 | |                         config.max_concurrent_discoveries -= 1;
602 | |                         let mut metrics = self.perf_metrics.write().await;
    | |                                 ^^^^^^^
603 | |                         metrics.adaptive_adjustments += 1;
604 | |                         info!("­ƒÄ» ML Auto-optimization: Reducing concurrency to {} (high latency: {}ms)", 
605 | |                               config.max_concurrent_discoveries, discovery_time_ms);
606 | |                     }
    | |_____________________- temporary `metrics` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
602 ~                         
603 +                         self.perf_metrics.write().await.;
604 ~                         
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\trading\arbitrage.rs:612:33
    |
610 |                       if config.max_concurrent_discoveries < 5 {
    |  ______________________________________________________________-
611 | |                         config.max_concurrent_discoveries += 1;
612 | |                         let mut metrics = self.perf_metrics.write().await;
    | |                                 ^^^^^^^
613 | |                         metrics.adaptive_adjustments += 1;
614 | |                         info!("­ƒÜÇ ML Auto-optimization: Increasing concurrency to {} (low latency: {}ms)", 
615 | |                               config.max_concurrent_discoveries, discovery_time_ms);
616 | |                     }
    | |_____________________- temporary `metrics` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
612 ~                         
613 +                         self.perf_metrics.write().await.;
614 ~                         
    |

warning: the function has a cognitive complexity of (99/30)
   --> src\trading\arbitrage.rs:629:18
    |
629 |     pub async fn display_ml_enhanced_dashboard(&self, is_real_trading: bool) {
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: temporary with significant `Drop` can be early dropped
   --> src\trading\arbitrage.rs:632:13
    |
629 |       pub async fn display_ml_enhanced_dashboard(&self, is_real_trading: bool) {
    |  ______________________________________________________________________________-
630 | |         let stats = self.enhanced_trading_stats.read().await;
631 | |         let metrics = self.perf_metrics.read().await;
632 | |         let api_status = self.api_status.read().await;
    | |             ^^^^^^^^^^
...   |
660 | |         info!("ÔòÜÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòØ");
661 | |     }
    | |_____- temporary `api_status` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
632 ~         
633 +         self.api_status.read().await.;
634 |         let current_balance = *self.current_balance.read().await;
...
655 |         info!("Ôòæ ­ƒîÉ API Status:                                           Ôòæ");
656 ~         
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\arbitrage.rs:682:26
    |
682 |             .map_err(|e| format!("Failed to get wallet balance: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
682 -             .map_err(|e| format!("Failed to get wallet balance: {}", e))?;
682 +             .map_err(|e| format!("Failed to get wallet balance: {e}"))?;
    |

warning: item in documentation is missing backticks
 --> src\trading\execution\mod.rs:3:71
  |
3 | //! Critical component for secure and reliable trade execution across DevNet and MainNet environments.
  |                                                                       ^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
3 - //! Critical component for secure and reliable trade execution across DevNet and MainNet environments.
3 + //! Critical component for secure and reliable trade execution across `DevNet` and MainNet environments.
  |

warning: item in documentation is missing backticks
 --> src\trading\execution\mod.rs:3:82
  |
3 | //! Critical component for secure and reliable trade execution across DevNet and MainNet environments.
  |                                                                                  ^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
3 - //! Critical component for secure and reliable trade execution across DevNet and MainNet environments.
3 + //! Critical component for secure and reliable trade execution across DevNet and `MainNet` environments.
  |

warning: item in documentation is missing backticks
  --> src\trading\execution\real_executor.rs:43:31
   |
43 |     /// Real trades on Solana DevNet - Safe for testing with real transactions
   |                               ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
43 -     /// Real trades on Solana DevNet - Safe for testing with real transactions
43 +     /// Real trades on Solana `DevNet` - Safe for testing with real transactions
   |

warning: item in documentation is missing backticks
  --> src\trading\execution\real_executor.rs:45:31
   |
45 |     /// Real trades on Solana MainNet - Production environment
   |                               ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
45 -     /// Real trades on Solana MainNet - Production environment
45 +     /// Real trades on Solana `MainNet` - Production environment
   |

warning: item in documentation is missing backticks
  --> src\trading\execution\real_executor.rs:47:9
   |
47 |     /// TestNet environment - Real transactions on test network
   |         ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
47 -     /// TestNet environment - Real transactions on test network
47 +     /// `TestNet` environment - Real transactions on test network
   |

warning: this match arm has an identical body to another arm
  --> src\trading\execution\real_executor.rs:57:13
   |
57 |             TradingMode::Simulation => RealTradingMode::DevNet, // Fallback to DevNet for safety
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: try changing either arm body
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
   = note: `#[warn(clippy::match_same_arms)]` implied by `#[warn(clippy::pedantic)]`
help: or try merging the arm patterns and removing the obsolete arm
   |
54 ~             TradingMode::MainNet => RealTradingMode::MainNet,
55 |             TradingMode::TestNet => RealTradingMode::TestNet,
56 ~             TradingMode::Simulation | TradingMode::DevNet => RealTradingMode::DevNet, // Fallback to DevNet for safety
   |

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:54:36
   |
54 |             TradingMode::DevNet => RealTradingMode::DevNet,
   |                                    ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:55:37
   |
55 |             TradingMode::MainNet => RealTradingMode::MainNet,
   |                                     ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:56:37
   |
56 |             TradingMode::TestNet => RealTradingMode::TestNet,
   |                                     ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:57:40
   |
57 |             TradingMode::Simulation => RealTradingMode::DevNet, // Fallback to DevNet for safety
   |                                        ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
  --> src\trading\execution\real_executor.rs:64:5
   |
64 |     pub fn is_production(&self) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_production(&self) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\trading\execution\real_executor.rs:64:5
   |
64 | /     pub fn is_production(&self) -> bool {
65 | |         matches!(self, RealTradingMode::MainNet)
66 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
64 |     pub const fn is_production(&self) -> bool {
   |         +++++

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:65:24
   |
65 |         matches!(self, RealTradingMode::MainNet)
   |                        ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
  --> src\trading\execution\real_executor.rs:69:5
   |
69 |     pub fn is_safe_testing(&self) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_safe_testing(&self) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\trading\execution\real_executor.rs:69:5
   |
69 | /     pub fn is_safe_testing(&self) -> bool {
70 | |         matches!(self, RealTradingMode::DevNet | RealTradingMode::TestNet)
71 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
69 |     pub const fn is_safe_testing(&self) -> bool {
   |         +++++

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:70:24
   |
70 |         matches!(self, RealTradingMode::DevNet | RealTradingMode::TestNet)
   |                        ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:70:50
   |
70 |         matches!(self, RealTradingMode::DevNet | RealTradingMode::TestNet)
   |                                                  ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
  --> src\trading\execution\real_executor.rs:74:5
   |
74 |     pub fn network_name(&self) -> &'static str {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn network_name(&self) -> &'static str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\trading\execution\real_executor.rs:74:5
   |
74 | /     pub fn network_name(&self) -> &'static str {
75 | |         match self {
76 | |             RealTradingMode::DevNet => "devnet",
77 | |             RealTradingMode::MainNet => "mainnet-beta",
...  |
80 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
74 |     pub const fn network_name(&self) -> &'static str {
   |         +++++

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:76:13
   |
76 |             RealTradingMode::DevNet => "devnet",
   |             ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:77:13
   |
77 |             RealTradingMode::MainNet => "mainnet-beta",
   |             ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\trading\execution\real_executor.rs:78:13
   |
78 |             RealTradingMode::TestNet => "testnet",
   |             ^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:110:5
    |
110 | /     pub fn new(
111 | |         input_mint: String,
112 | |         output_mint: String,
113 | |         amount: f64,
114 | |         wallet_name: String,
115 | |         trading_mode: RealTradingMode,
116 | |     ) -> Self {
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
    |
110 |     #[must_use] pub fn new(
    |     +++++++++++

warning: this could be a `const fn`
   --> src\trading\execution\real_executor.rs:110:5
    |
110 | /     pub fn new(
111 | |         input_mint: String,
112 | |         output_mint: String,
113 | |         amount: f64,
...   |
129 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
110 |     pub const fn new(
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:132:5
    |
132 |     pub fn with_slippage_bps(mut self, slippage_bps: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_slippage_bps(mut self, slippage_bps: u16) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\real_executor.rs:132:5
    |
132 | /     pub fn with_slippage_bps(mut self, slippage_bps: u16) -> Self {
133 | |         self.slippage_bps = slippage_bps;
134 | |         self
135 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
132 |     pub const fn with_slippage_bps(mut self, slippage_bps: u16) -> Self {
    |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\trading\execution\real_executor.rs:132:5
    |
132 | /     pub fn with_slippage_bps(mut self, slippage_bps: u16) -> Self {
133 | |         self.slippage_bps = slippage_bps;
134 | |         self
135 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use
    = note: `#[warn(clippy::return_self_not_must_use)]` implied by `#[warn(clippy::pedantic)]`

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:138:5
    |
138 |     pub fn with_max_price_impact(mut self, max_price_impact: f64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_max_price_impact(mut self, max_price_impact: f64) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\real_executor.rs:138:5
    |
138 | /     pub fn with_max_price_impact(mut self, max_price_impact: f64) -> Self {
139 | |         self.max_price_impact = max_price_impact;
140 | |         self
141 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
138 |     pub const fn with_max_price_impact(mut self, max_price_impact: f64) -> Self {
    |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\trading\execution\real_executor.rs:138:5
    |
138 | /     pub fn with_max_price_impact(mut self, max_price_impact: f64) -> Self {
139 | |         self.max_price_impact = max_price_impact;
140 | |         self
141 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:144:5
    |
144 |     pub fn with_priority_fee(mut self, priority_fee: u64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_priority_fee(mut self, priority_fee: u64) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\real_executor.rs:144:5
    |
144 | /     pub fn with_priority_fee(mut self, priority_fee: u64) -> Self {
145 | |         self.priority_fee = Some(priority_fee);
146 | |         self
147 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
144 |     pub const fn with_priority_fee(mut self, priority_fee: u64) -> Self {
    |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\trading\execution\real_executor.rs:144:5
    |
144 | /     pub fn with_priority_fee(mut self, priority_fee: u64) -> Self {
145 | |         self.priority_fee = Some(priority_fee);
146 | |         self
147 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:150:5
    |
150 |     pub fn with_min_output_amount(mut self, min_output_amount: f64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_min_output_amount(mut self, min_output_amount: f64) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\real_executor.rs:150:5
    |
150 | /     pub fn with_min_output_amount(mut self, min_output_amount: f64) -> Self {
151 | |         self.min_output_amount = Some(min_output_amount);
152 | |         self
153 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
150 |     pub const fn with_min_output_amount(mut self, min_output_amount: f64) -> Self {
    |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\trading\execution\real_executor.rs:150:5
    |
150 | /     pub fn with_min_output_amount(mut self, min_output_amount: f64) -> Self {
151 | |         self.min_output_amount = Some(min_output_amount);
152 | |         self
153 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:210:5
    |
210 |     pub fn is_profitable(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_profitable(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:215:5
    |
215 |     pub fn calculate_pnl(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn calculate_pnl(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:224:5
    |
224 |     pub fn profit_percentage(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn profit_percentage(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:233:5
    |
233 |     pub fn efficiency_score(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn efficiency_score(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\real_executor.rs:274:49
    |
274 |             .map_err(|e| PlatformError::Trading(format!("System time error: {}", e)))?
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
274 -             .map_err(|e| PlatformError::Trading(format!("System time error: {}", e)))?
274 +             .map_err(|e| PlatformError::Trading(format!("System time error: {e}")))?
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\real_executor.rs:298:49
    |
298 |             .map_err(|e| PlatformError::Trading(format!("Time calculation error: {}", e)))?
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
298 -             .map_err(|e| PlatformError::Trading(format!("Time calculation error: {}", e)))?
298 +             .map_err(|e| PlatformError::Trading(format!("Time calculation error: {e}")))?
    |

warning: function call inside of `unwrap_or`
   --> src\trading\execution\real_executor.rs:324:61
    |
324 |                 trade_result.transaction_signature.as_ref().unwrap_or(&"unknown".to_string())[..16].to_string(),
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unwrap_or_else(|| &"unknown".to_string())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call
    = note: `#[warn(clippy::or_fun_call)]` implied by `#[warn(clippy::nursery)]`

warning: function call inside of `unwrap_or`
   --> src\trading\execution\real_executor.rs:330:53
    |
330 |                 trade_result.error_message.as_ref().unwrap_or(&"Unknown error".to_string())
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unwrap_or_else(|| &"Unknown error".to_string())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\real_executor.rs:353:47
    |
353 |               return Err(PlatformError::Trading(format!(
    |  _______________________________________________^
354 | |                 "Insufficient balance: {} SOL < {} SOL required",
355 | |                 simulated_balance, required_balance
356 | |             )));
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args

warning: unused `self` argument
   --> src\trading\execution\real_executor.rs:375:30
    |
375 |     fn validate_quote_safety(&self, _quote: &JupiterQuoteResponse, request: &RealTradeRequest) -> Result<(), PlatformError> {
    |                              ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self
    = note: `#[warn(clippy::unused_self)]` implied by `#[warn(clippy::pedantic)]`

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\real_executor.rs:465:51
    |
465 |                 return Err(PlatformError::Trading(format!("Base executor unhealthy: {}", reason)));
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
465 -                 return Err(PlatformError::Trading(format!("Base executor unhealthy: {}", reason)));
465 +                 return Err(PlatformError::Trading(format!("Base executor unhealthy: {reason}")));
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:476:5
    |
476 |     pub fn get_trading_mode(&self) -> &RealTradingMode {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_trading_mode(&self) -> &RealTradingMode`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\real_executor.rs:476:5
    |
476 | /     pub fn get_trading_mode(&self) -> &RealTradingMode {
477 | |         &self.trading_mode
478 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
476 |     pub const fn get_trading_mode(&self) -> &RealTradingMode {
    |         +++++

warning: matching over `()` is more explicit
   --> src\trading\execution\real_executor.rs:483:16
    |
483 |             Ok(_) => true,
    |                ^ help: use `()` instead of `_`: `()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ignored_unit_patterns
    = note: `#[warn(clippy::ignored_unit_patterns)]` implied by `#[warn(clippy::pedantic)]`

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\real_executor.rs:499:67
    |
499 |                 issues.extend(base_issues.into_iter().map(|issue| format!("Base executor: {}", issue)));
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
499 -                 issues.extend(base_issues.into_iter().map(|issue| format!("Base executor: {}", issue)));
499 +                 issues.extend(base_issues.into_iter().map(|issue| format!("Base executor: {issue}")));
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\real_executor.rs:502:29
    |
502 |                 issues.push(format!("Base executor unhealthy: {}", reason));
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
502 -                 issues.push(format!("Base executor unhealthy: {}", reason));
502 +                 issues.push(format!("Base executor unhealthy: {reason}"));
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:554:5
    |
554 |     pub fn average_trade_size(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn average_trade_size(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\trading\execution\real_executor.rs:556:37
    |
556 |             self.total_volume_usd / self.total_trades as f64
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
556 -             self.total_volume_usd / self.total_trades as f64
556 +             self.total_volume_usd / f64::from(self.total_trades)
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:563:5
    |
563 |     pub fn average_fee_per_trade(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn average_fee_per_trade(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\trading\execution\real_executor.rs:565:36
    |
565 |             self.total_fees_paid / self.total_trades as f64
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
565 -             self.total_fees_paid / self.total_trades as f64
565 +             self.total_fees_paid / f64::from(self.total_trades)
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:572:5
    |
572 |     pub fn is_recent(&self, max_age_seconds: u64) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_recent(&self, max_age_seconds: u64) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:586:5
    |
586 |     pub fn get_base_executor(&self) -> &TradeExecutor {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_base_executor(&self) -> &TradeExecutor`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\real_executor.rs:586:5
    |
586 | /     pub fn get_base_executor(&self) -> &TradeExecutor {
587 | |         &self.base_executor
588 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
586 |     pub const fn get_base_executor(&self) -> &TradeExecutor {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\real_executor.rs:609:5
    |
609 |     pub fn allows_real_asset_movement(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn allows_real_asset_movement(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\real_executor.rs:609:5
    |
609 | /     pub fn allows_real_asset_movement(&self) -> bool {
610 | |         match self.trading_mode {
611 | |             RealTradingMode::MainNet => true,
612 | |             RealTradingMode::DevNet => true,  // DevNet uses real SOL for testing
...   |
615 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
609 |     pub const fn allows_real_asset_movement(&self) -> bool {
    |         +++++

warning: this match arm has an identical body to another arm
   --> src\trading\execution\real_executor.rs:612:13
    |
612 |             RealTradingMode::DevNet => true,  // DevNet uses real SOL for testing
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
611 -             RealTradingMode::MainNet => true,
612 -             RealTradingMode::DevNet => true,  // DevNet uses real SOL for testing
611 +             RealTradingMode::DevNet | RealTradingMode::MainNet => true,  // DevNet uses real SOL for testing
    |

warning: this match arm has an identical body to another arm
   --> src\trading\execution\real_executor.rs:613:13
    |
613 |             RealTradingMode::TestNet => true, // TestNet uses test SOL
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
611 ~             RealTradingMode::DevNet => true,  // DevNet uses real SOL for testing
612 ~             RealTradingMode::TestNet | RealTradingMode::MainNet => true, // TestNet uses test SOL
    |

warning: this match arm has an identical body to another arm
   --> src\trading\execution\real_executor.rs:612:13
    |
612 |             RealTradingMode::DevNet => true,  // DevNet uses real SOL for testing
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
612 ~             RealTradingMode::DevNet | RealTradingMode::TestNet => true,  // DevNet uses real SOL for testing
613 ~             // TestNet uses test SOL
    |

warning: this method could have a `#[must_use]` attribute
  --> src\trading\execution\engine.rs:76:5
   |
76 |     pub fn production() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn production() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\trading\execution\engine.rs:76:5
   |
76 | /     pub fn production() -> Self {
77 | |         Self {
78 | |             max_slippage_bps: 100,        // 1% max slippage (strict)
79 | |             max_price_age_ms: 1000,       // 1 second max (strict)
...  |
86 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
76 |     pub const fn production() -> Self {
   |         +++++

warning: this method could have a `#[must_use]` attribute
  --> src\trading\execution\engine.rs:89:5
   |
89 |     pub fn development() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn development() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\trading\execution\engine.rs:89:5
   |
89 | /     pub fn development() -> Self {
90 | |         Self {
91 | |             max_slippage_bps: 500,        // 5% max slippage (relaxed)
92 | |             max_price_age_ms: 5000,       // 5 seconds max (relaxed)
...  |
99 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
89 |     pub const fn development() -> Self {
   |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\engine.rs:143:5
    |
143 | /     pub fn new(
144 | |         input_mint: String,
145 | |         output_mint: String,
146 | |         amount: u64,
147 | |         wallet_name: String,
148 | |         trading_mode: TradingMode,
149 | |     ) -> Self {
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
    |
143 |     #[must_use] pub fn new(
    |     +++++++++++

warning: the function has a cognitive complexity of (60/30)
   --> src\trading\execution\engine.rs:282:18
    |
282 |     pub async fn new(config: Config, trading_mode: TradingMode) -> Result<Self, PlatformError> {
    |                  ^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
   --> src\trading\execution\engine.rs:312:15
    |
312 |               real_config.max_slippage_bps as f64 / 100.0);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
312 -               real_config.max_slippage_bps as f64 / 100.0);
312 +               f64::from(real_config.max_slippage_bps) / 100.0);
    |

warning: the function has a cognitive complexity of (39/30)
   --> src\trading\execution\engine.rs:325:18
    |
325 |     pub async fn execute_real_swap(&self, request: RealSwapRequest) -> Result<RealSwapResult, PlatformError> {
    |                  ^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\engine.rs:328:49
    |
328 |             .map_err(|e| PlatformError::Trading(format!("System time error: {}", e)))?
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
328 -             .map_err(|e| PlatformError::Trading(format!("System time error: {}", e)))?
328 +             .map_err(|e| PlatformError::Trading(format!("System time error: {e}")))?
    |

warning: this match arm has an identical body to another arm
   --> src\trading\execution\engine.rs:374:17
    |
374 |                 TradingMode::Simulation => crate::trading::execution::real_executor::RealTradingMode::DevNet,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
371 ~                 TradingMode::MainNet => crate::trading::execution::real_executor::RealTradingMode::MainNet,
372 |                 TradingMode::TestNet => crate::trading::execution::real_executor::RealTradingMode::TestNet,
373 ~                 TradingMode::Simulation | TradingMode::DevNet => crate::trading::execution::real_executor::RealTradingMode::DevNet,
    |

warning: the function has a cognitive complexity of (34/30)
   --> src\trading\execution\engine.rs:410:18
    |
410 |     pub async fn validate_quote(&self, request: &RealSwapRequest) -> Result<QuoteValidation, PlatformError> {
    |                  ^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\engine.rs:428:36
    |
428 |               validation_errors.push(format!("Price impact too high: {:.2}% > {:.2}%", 
    |  ____________________________________^
429 | |                                           price_impact_pct, max_price_impact));
    | |_____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\engine.rs:513:53
    |
513 |                 Ok(ComponentHealthStatus::Unhealthy(format!("Real trading disabled: {}", reason)))
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
513 -                 Ok(ComponentHealthStatus::Unhealthy(format!("Real trading disabled: {}", reason)))
513 +                 Ok(ComponentHealthStatus::Unhealthy(format!("Real trading disabled: {reason}")))
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\engine.rs:519:5
    |
519 |     pub fn get_config(&self) -> &RealTradingConfig {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_config(&self) -> &RealTradingConfig`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\engine.rs:519:5
    |
519 | /     pub fn get_config(&self) -> &RealTradingConfig {
520 | |         &self.config
521 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
519 |     pub const fn get_config(&self) -> &RealTradingConfig {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\engine.rs:524:5
    |
524 |     pub fn get_trading_mode(&self) -> &TradingMode {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_trading_mode(&self) -> &TradingMode`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\engine.rs:524:5
    |
524 | /     pub fn get_trading_mode(&self) -> &TradingMode {
525 | |         &self.trading_mode
526 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
524 |     pub const fn get_trading_mode(&self) -> &TradingMode {
    |         +++++

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> src\trading\execution\engine.rs:530:9
    |
530 | /         match self.get_health_status().await {
531 | |             Ok(ComponentHealthStatus::Healthy) => true,
532 | |             _ => {
533 | |                 warn!("ÔÜá´©Å Real Trading Engine not ready - health check failed");
...   |
536 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
    = note: `#[warn(clippy::single_match_else)]` implied by `#[warn(clippy::pedantic)]`
help: try
    |
530 ~         if let Ok(ComponentHealthStatus::Healthy) = self.get_health_status().await { true } else {
531 ~             warn!("ÔÜá´©Å Real Trading Engine not ready - health check failed");
532 +             false
533 +         }
    |

warning: this method could have a `#[must_use]` attribute
  --> src\trading\execution\jupiter_real.rs:71:5
   |
71 |     pub fn new(config: Option<JupiterRealConfig>) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: Option<JupiterRealConfig>) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: variables can be used directly in the `format!` string
  --> src\trading\execution\jupiter_real.rs:95:25
   |
95 |         let cache_key = format!("{}_{}__{}", input_mint, output_mint, amount);
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
95 -         let cache_key = format!("{}_{}__{}", input_mint, output_mint, amount);
95 +         let cache_key = format!("{input_mint}_{output_mint}__{amount}");
   |

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\jupiter_real.rs:105:9
    |
105 |         info!("­ƒÜÇ Obteniendo quote REAL de Jupiter: {} -> {}", input_mint, output_mint);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
105 -         info!("­ƒÜÇ Obteniendo quote REAL de Jupiter: {} -> {}", input_mint, output_mint);
105 +         info!("­ƒÜÇ Obteniendo quote REAL de Jupiter: {input_mint} -> {output_mint}");
    |

warning: unnecessary structure name repetition
   --> src\trading\execution\jupiter_real.rs:149:31
    |
149 |         let mut temp_client = JupiterRealClient::new(Some(self.config.clone()));
    |                               ^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\jupiter_real.rs:162:9
    |
162 |         info!("­ƒÄ» SWAP EJECUTADO: ID={}, Output={}", transaction_id, actual_output);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
162 -         info!("­ƒÄ» SWAP EJECUTADO: ID={}, Output={}", transaction_id, actual_output);
162 +         info!("­ƒÄ» SWAP EJECUTADO: ID={transaction_id}, Output={actual_output}");
    |

warning: unused `self` argument
   --> src\trading\execution\jupiter_real.rs:177:9
    |
177 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this argument is passed by value, but not consumed in the function body
   --> src\trading\execution\jupiter_real.rs:178:15
    |
178 |         data: Value,
    |               ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
    = note: `#[warn(clippy::needless_pass_by_value)]` implied by `#[warn(clippy::pedantic)]`
help: consider taking a reference instead
    |
178 |         data: &Value,
    |               +

warning: this method could have a `#[must_use]` attribute
  --> src\trading\execution\mod.rs:87:5
   |
87 | /     pub fn new(
88 | |         wallet_name: String,
89 | |         input_mint: Pubkey,
90 | |         output_mint: Pubkey,
91 | |         amount_in: u64,
92 | |         trading_mode: TradingMode,
93 | |     ) -> Self {
   | |_____________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
   |
87 |     #[must_use] pub fn new(
   |     +++++++++++

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:87:5
    |
87  | /     pub fn new(
88  | |         wallet_name: String,
89  | |         input_mint: Pubkey,
90  | |         output_mint: Pubkey,
...   |
105 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
87  |     pub const fn new(
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:108:5
    |
108 |     pub fn with_slippage(mut self, slippage_bps: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_slippage(mut self, slippage_bps: u16) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:108:5
    |
108 | /     pub fn with_slippage(mut self, slippage_bps: u16) -> Self {
109 | |         self.slippage_bps = Some(slippage_bps);
110 | |         self
111 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
108 |     pub const fn with_slippage(mut self, slippage_bps: u16) -> Self {
    |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\trading\execution\mod.rs:108:5
    |
108 | /     pub fn with_slippage(mut self, slippage_bps: u16) -> Self {
109 | |         self.slippage_bps = Some(slippage_bps);
110 | |         self
111 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:114:5
    |
114 |     pub fn with_max_price_impact(mut self, max_price_impact: f64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_max_price_impact(mut self, max_price_impact: f64) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:114:5
    |
114 | /     pub fn with_max_price_impact(mut self, max_price_impact: f64) -> Self {
115 | |         self.max_price_impact = Some(max_price_impact);
116 | |         self
117 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
114 |     pub const fn with_max_price_impact(mut self, max_price_impact: f64) -> Self {
    |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\trading\execution\mod.rs:114:5
    |
114 | /     pub fn with_max_price_impact(mut self, max_price_impact: f64) -> Self {
115 | |         self.max_price_impact = Some(max_price_impact);
116 | |         self
117 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:120:5
    |
120 |     pub fn with_priority_fee(mut self, priority_fee: u64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_priority_fee(mut self, priority_fee: u64) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:120:5
    |
120 | /     pub fn with_priority_fee(mut self, priority_fee: u64) -> Self {
121 | |         self.priority_fee = Some(priority_fee);
122 | |         self
123 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
120 |     pub const fn with_priority_fee(mut self, priority_fee: u64) -> Self {
    |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\trading\execution\mod.rs:120:5
    |
120 | /     pub fn with_priority_fee(mut self, priority_fee: u64) -> Self {
121 | |         self.priority_fee = Some(priority_fee);
122 | |         self
123 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:126:5
    |
126 |     pub fn with_timeout(mut self, timeout_seconds: u64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_timeout(mut self, timeout_seconds: u64) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:126:5
    |
126 | /     pub fn with_timeout(mut self, timeout_seconds: u64) -> Self {
127 | |         self.timeout_seconds = Some(timeout_seconds);
128 | |         self
129 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
126 |     pub const fn with_timeout(mut self, timeout_seconds: u64) -> Self {
    |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\trading\execution\mod.rs:126:5
    |
126 | /     pub fn with_timeout(mut self, timeout_seconds: u64) -> Self {
127 | |         self.timeout_seconds = Some(timeout_seconds);
128 | |         self
129 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:152:5
    |
152 |     pub fn is_profitable(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_profitable(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:152:5
    |
152 | /     pub fn is_profitable(&self) -> bool {
153 | |         self.success && self.output_amount > self.input_amount
154 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
152 |     pub const fn is_profitable(&self) -> bool {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:157:5
    |
157 |     pub fn calculate_pnl(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn calculate_pnl(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:166:5
    |
166 |     pub fn efficiency_score(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn efficiency_score(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: the function has a cognitive complexity of (39/30)
   --> src\trading\execution\mod.rs:223:18
    |
223 |     pub async fn execute_trade(&self, request: TradeRequest) -> Result<TradeResult, PlatformError> {
    |                  ^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\mod.rs:252:37
    |
252 |                 error_message: Some(format!("Validation failed: {}", e)),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
252 -                 error_message: Some(format!("Validation failed: {}", e)),
252 +                 error_message: Some(format!("Validation failed: {e}")),
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\mod.rs:278:41
    |
278 |                     error_message: Some(format!("Quote failed: {}", e)),
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
278 -                     error_message: Some(format!("Quote failed: {}", e)),
278 +                     error_message: Some(format!("Quote failed: {e}")),
    |

warning: the function has a cognitive complexity of (59/30)
   --> src\trading\execution\mod.rs:359:14
    |
359 |     async fn validate_trade_request(
    |              ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: item in documentation is missing backticks
   --> src\trading\execution\mod.rs:438:17
    |
438 |     /// Execute DevNet trade (simulation mode)
    |                 ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
438 -     /// Execute DevNet trade (simulation mode)
438 +     /// Execute `DevNet` trade (simulation mode)
    |

warning: item in documentation is missing backticks
   --> src\trading\execution\mod.rs:457:17
    |
457 |     /// Execute MainNet real trade
    |                 ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
457 -     /// Execute MainNet real trade
457 +     /// Execute `MainNet` real trade
    |

warning: item in documentation is missing backticks
   --> src\trading\execution\mod.rs:479:17
    |
479 |     /// Execute TestNet trade (real transactions on test network)
    |                 ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
479 -     /// Execute TestNet trade (real transactions on test network)
479 +     /// Execute `TestNet` trade (real transactions on test network)
    |

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> src\trading\execution\mod.rs:519:30
    |
519 |           let _wallet_pubkey = match self.wallet_manager.get_wallet_pubkey(wallet_name).await {
    |  ______________________________^
520 | |             Some(pubkey) => {
521 | |                 info!("Ô£à Wallet '{}' found with pubkey: {}", wallet_name, pubkey);
522 | |                 pubkey
...   |
528 | |         };
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
    |
519 ~         let _wallet_pubkey = if let Some(pubkey) = self.wallet_manager.get_wallet_pubkey(wallet_name).await {
520 ~             info!("Ô£à Wallet '{}' found with pubkey: {}", wallet_name, pubkey);
521 +             pubkey
522 +         } else {
523 ~             error!("ÔØî Wallet '{}' not found in wallet manager", wallet_name);
524 +             return Err(PlatformError::WalletNotFound(wallet_name.to_string()));
525 ~         };
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:550:5
    |
550 |     pub fn get_trading_mode(&self) -> &TradingMode {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_trading_mode(&self) -> &TradingMode`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:550:5
    |
550 | /     pub fn get_trading_mode(&self) -> &TradingMode {
551 | |         &self.trading_mode
552 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
550 |     pub const fn get_trading_mode(&self) -> &TradingMode {
    |         +++++

warning: variables can be used directly in the `format!` string
   --> src\trading\execution\mod.rs:578:25
    |
578 |             issues.push(format!("Wallet manager: {}", e));
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
578 -             issues.push(format!("Wallet manager: {}", e));
578 +             issues.push(format!("Wallet manager: {e}"));
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:601:5
    |
601 |     pub fn get_config(&self) -> &Config {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_config(&self) -> &Config`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:601:5
    |
601 | /     pub fn get_config(&self) -> &Config {
602 | |         &self.config
603 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
601 |     pub const fn get_config(&self) -> &Config {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:606:5
    |
606 |     pub fn get_jupiter_client(&self) -> &JupiterClient {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_jupiter_client(&self) -> &JupiterClient`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:606:5
    |
606 | /     pub fn get_jupiter_client(&self) -> &JupiterClient {
607 | |         &self.jupiter_client
608 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
606 |     pub const fn get_jupiter_client(&self) -> &JupiterClient {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\execution\mod.rs:611:5
    |
611 |     pub fn get_wallet_manager(&self) -> &WalletManager {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_wallet_manager(&self) -> &WalletManager`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\execution\mod.rs:611:5
    |
611 | /     pub fn get_wallet_manager(&self) -> &WalletManager {
612 | |         &self.wallet_manager
613 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
611 |     pub const fn get_wallet_manager(&self) -> &WalletManager {
    |         +++++

warning: match expression looks like `matches!` macro
   --> src\trading\execution\mod.rs:618:9
    |
618 | /         match self.health_check().await {
619 | |             Ok(ComponentHealthStatus::Healthy) => true,
620 | |             _ => false,
621 | |         }
    | |_________^ help: try: `matches!(self.health_check().await, Ok(ComponentHealthStatus::Healthy))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
    = note: `#[warn(clippy::match_like_matches_macro)]` implied by `#[warn(clippy::all)]`

warning: clamp-like pattern without using clamp function
   --> src\trading\execution\mod.rs:657:9
    |
657 |         score.max(0.0).min(1.0)
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `score.clamp(0.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp
    = note: `#[warn(clippy::manual_clamp)]` implied by `#[warn(clippy::all)]`

warning: this method could have a `#[must_use]` attribute
  --> src\trading\risk.rs:20:5
   |
20 |     pub fn new(config: &SimpleConfig) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: &SimpleConfig) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: field assignment outside of initializer for an instance created with Default::default()
  --> src\trading\risk.rs:33:9
   |
33 |         assessment.is_acceptable = true; // Inicializar como aceptable, cambiar si hay problemas
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: consider initializing the variable with `trading::risk::RiskAssessment { is_acceptable: true, ..Default::default() }` and removing relevant reassignments
  --> src\trading\risk.rs:32:9
   |
32 |         let mut assessment = RiskAssessment::default();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#field_reassign_with_default
   = note: `#[warn(clippy::field_reassign_with_default)]` implied by `#[warn(clippy::all)]`

warning: unused `self` argument
  --> src\trading\risk.rs:95:26
   |
95 |     fn estimate_slippage(&self, opportunity: &ArbitrageOpportunity) -> f64 {
   |                          ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: you are deriving `PartialEq` and can implement `Eq`
   --> src\trading\risk.rs:136:24
    |
136 | #[derive(Debug, Clone, PartialEq)]
    |                        ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq
    = note: `#[warn(clippy::derive_partial_eq_without_eq)]` implied by `#[warn(clippy::nursery)]`

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:152:13
    |
152 |             RiskFactor::InsufficientProfit => write!(f, "Insufficient Profit"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:153:13
    |
153 |             RiskFactor::LowConfidence => write!(f, "Low Confidence Score"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:154:13
    |
154 |             RiskFactor::ExcessivePositionSize => write!(f, "Excessive Position Size"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:155:13
    |
155 |             RiskFactor::LongExecutionTime => write!(f, "Long Execution Time"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:156:13
    |
156 |             RiskFactor::HighGasCost => write!(f, "High Gas Cost"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:157:13
    |
157 |             RiskFactor::HighSlippage => write!(f, "High Slippage Risk"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:158:13
    |
158 |             RiskFactor::MarketVolatility => write!(f, "Market Volatility"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:159:13
    |
159 |             RiskFactor::LiquidityRisk => write!(f, "Liquidity Risk"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\trading\risk.rs:160:13
    |
160 |             RiskFactor::TechnicalIssue => write!(f, "Technical Issue"),
    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
  --> src\trading\portfolio.rs:24:5
   |
24 |     pub fn new(config: SimpleConfig) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: SimpleConfig) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
  --> src\trading\portfolio.rs:35:17
   |
34 |       pub async fn update_position(&self, token: &Token, amount: f64, price: f64) -> Result<()> {
   |  _______________________________________________________________________________________________-
35 | |         let mut positions = self.positions.write().await;
   | |                 ^^^^^^^^^
36 | |         let position = positions.entry(token.symbol.clone())
37 | |             .or_insert_with(|| Position::new(token.clone()));
...  |
43 | |         Ok(())
44 | |     }
   | |_____- temporary `positions` is currently being dropped at the end of its contained scope
   |
   = note: this might lead to unnecessary resource contention
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
   |
35 ~         
36 +         let position = self.positions.write().await.or_insert_with(|| Position::new(token.clone()));
37 ~         
   |

warning: temporary with significant `Drop` can be early dropped
  --> src\trading\portfolio.rs:59:13
   |
58 |       pub async fn calculate_total_value(&self, current_prices: &HashMap<String, f64>) -> f64 {
   |  _____________________________________________________________________________________________-
59 | |         let positions = self.positions.read().await;
   | |             ^^^^^^^^^
60 | |         let mut total_value = 0.0;
...  |
68 | |         total_value
69 | |     }
   | |_____- temporary `positions` is currently being dropped at the end of its contained scope
   |
   = note: this might lead to unnecessary resource contention
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
   |
59 ~         
60 +         self.positions.read().await.;
61 |         let mut total_value = 0.0;
62 |         
63 ~         
   |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\portfolio.rs:171:5
    |
171 |     pub fn new(token: Token) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(token: Token) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\trading\portfolio.rs:186:30
    |
186 |             let total_cost = self.amount * self.average_price + amount_change * price;
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `self.amount.mul_add(self.average_price, amount_change * price)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: this method could have a `#[must_use]` attribute
   --> src\trading\portfolio.rs:208:5
    |
208 |     pub fn get_total_pnl(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_total_pnl(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\portfolio.rs:212:5
    |
212 |     pub fn get_market_value(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_market_value(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\portfolio.rs:230:5
    |
230 |     pub fn get_win_rate(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_win_rate(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\portfolio.rs:238:5
    |
238 |     pub fn get_net_pnl(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_net_pnl(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\portfolio.rs:242:5
    |
242 |     pub fn get_average_profit(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_average_profit(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\portfolio.rs:250:5
    |
250 |     pub fn get_average_loss(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_average_loss(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\portfolio.rs:258:5
    |
258 |     pub fn get_profit_factor(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_profit_factor(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: item in documentation is missing backticks
 --> src\trading\triangular.rs:1:49
  |
1 | //! Triangular Arbitrage Engine - Migrado desde arbitrage_phase45_clean.rs
  |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
1 - //! Triangular Arbitrage Engine - Migrado desde arbitrage_phase45_clean.rs
1 + //! Triangular Arbitrage Engine - Migrado desde `arbitrage_phase45_clean.rs`
  |

warning: first doc comment paragraph is too long
 --> src\trading\triangular.rs:1:1
  |
1 | / //! Triangular Arbitrage Engine - Migrado desde arbitrage_phase45_clean.rs
2 | | //! Implementa detecci├│n y ejecuci├│n de oportunidades de arbitraje triangular
3 | | //! con protecci├│n anti-circular avanzada y c├ílculos de profit reales
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph

warning: this method could have a `#[must_use]` attribute
   --> src\trading\triangular.rs:130:5
    |
130 |     pub fn new(custom_config: Option<TriangularArbitrageConfig>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(custom_config: Option<TriangularArbitrageConfig>) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: the function has a cognitive complexity of (44/30)
   --> src\trading\triangular.rs:178:18
    |
178 |     pub async fn find_triangular_opportunities(&mut self) -> Result<Vec<TriangularOpportunity>> {
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src\trading\triangular.rs:224:5
    |
224 | /     fn generate_triangular_paths(&self, start_token: &str) -> Result<Vec<Vec<String>>> {
225 | |         let mut valid_paths = Vec::new();
226 | |         
227 | |         if let Some(first_hops) = self.token_graph.get(start_token) {
...   |
258 | |         Ok(valid_paths)
259 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
    = note: `#[warn(clippy::unnecessary_wraps)]` implied by `#[warn(clippy::pedantic)]`
help: remove `Result` from the return type...
    |
224 -     fn generate_triangular_paths(&self, start_token: &str) -> Result<Vec<Vec<String>>> {
224 +     fn generate_triangular_paths(&self, start_token: &str) -> std::vec::Vec<std::vec::Vec<std::string::String>> {
    |
help: ...and then change returning expressions
    |
258 -         Ok(valid_paths)
258 +         valid_paths
    |

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
   --> src\trading\triangular.rs:313:66
    |
313 |             total_amount = total_amount * exchange_rate * (1.0 - swap_fee_bps as f64 / 10000.0);
    |                                                                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
313 -             total_amount = total_amount * exchange_rate * (1.0 - swap_fee_bps as f64 / 10000.0);
313 +             total_amount = total_amount * exchange_rate * (1.0 - f64::from(swap_fee_bps) / 10000.0);
    |

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
   --> src\trading\triangular.rs:334:27
    |
334 |         let risk_score = (total_cost_bps as f64 / 1000.0).min(1.0) + 
    |                           ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
334 -         let risk_score = (total_cost_bps as f64 / 1000.0).min(1.0) + 
334 +         let risk_score = (f64::from(total_cost_bps) / 1000.0).min(1.0) + 
    |

warning: casts from `u16` to `u64` can be expressed infallibly using `From`
   --> src\trading\triangular.rs:347:37
    |
347 |             estimated_duration_ms: (total_cost_bps as u64 * 1000) + 5000, // Base 5s + complejidad
    |                                     ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
    |
347 -             estimated_duration_ms: (total_cost_bps as u64 * 1000) + 5000, // Base 5s + complejidad
347 +             estimated_duration_ms: (u64::from(total_cost_bps) * 1000) + 5000, // Base 5s + complejidad
    |

warning: the function has a cognitive complexity of (40/30)
   --> src\trading\triangular.rs:403:14
    |
403 |     async fn estimate_remaining_prices(&mut self) -> Result<()> {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: usage of `contains_key` followed by `insert` on a `HashMap`
   --> src\trading\triangular.rs:443:13
    |
443 | /             if !self.price_cache.contains_key(&(from.to_string(), to.to_string())) {
444 | |                 self.price_cache.insert((from.to_string(), to.to_string()), rate);
445 | |                 debug!("­ƒôè Estimado {}/{}: {:.6}", from, to, rate);
446 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_entry
    = note: `#[warn(clippy::map_entry)]` implied by `#[warn(clippy::all)]`
help: try
    |
443 ~             if let std::collections::hash_map::Entry::Vacant(e) = self.price_cache.entry((from.to_string(), to.to_string())) {
444 +                 e.insert(rate);
445 ~                 debug!("­ƒôè Estimado {}/{}: {:.6}", from, to, rate);
446 +             }
    |

warning: the function has a cognitive complexity of (34/30)
   --> src\trading\triangular.rs:453:14
    |
453 |     async fn get_jupiter_quote(&self, 
    |              ^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: variables can be used directly in the `format!` string
   --> src\trading\triangular.rs:458:19
    |
458 |           let url = format!(
    |  ___________________^
459 | |             "https://quote-api.jup.ag/v6/quote?inputMint={}&outputMint={}&amount={}",
460 | |             input_mint, output_mint, amount
461 | |         );
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args

warning: unused `self` argument
   --> src\trading\triangular.rs:498:35
    |
498 |     fn estimate_best_dex_for_pair(&self, from: &str, to: &str) -> (String, u16) {
    |                                   ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this match arm has an identical body to another arm
   --> src\trading\triangular.rs:501:13
    |
501 |             ("SOL", "RAY") | ("RAY", "SOL") => ("Raydium".to_string(), 25),   // 0.25%
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
501 ~             ("SOL", "RAY") | ("RAY", "SOL") | ("USDC", "RAY") | ("RAY", "USDC") => ("Raydium".to_string(), 25),   // 0.25%
502 ~             // 0.25%
    |

warning: this match arm has an identical body to another arm
   --> src\trading\triangular.rs:503:13
    |
503 |             ("SOL", "JUP") | ("JUP", "SOL") => ("Jupiter".to_string(), 25),   // 0.25%
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
500 ~             // 0.25%
501 |             ("SOL", "RAY") | ("RAY", "SOL") => ("Raydium".to_string(), 25),   // 0.25%
502 |             ("USDC", "RAY") | ("RAY", "USDC") => ("Raydium".to_string(), 25), // 0.25%
503 ~             ("SOL", "JUP") | ("JUP", "SOL") | ("SOL", "USDC") | ("USDC", "SOL") => ("Jupiter".to_string(), 25),   // 0.25%
    |

warning: this match arm has an identical body to another arm
   --> src\trading\triangular.rs:504:13
    |
504 |             ("USDC", "JUP") | ("JUP", "USDC") => ("Jupiter".to_string(), 25), // 0.25%
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
500 ~             // 0.25%
501 |             ("SOL", "RAY") | ("RAY", "SOL") => ("Raydium".to_string(), 25),   // 0.25%
502 |             ("USDC", "RAY") | ("RAY", "USDC") => ("Raydium".to_string(), 25), // 0.25%
503 |             ("SOL", "JUP") | ("JUP", "SOL") => ("Jupiter".to_string(), 25),   // 0.25%
504 ~             ("USDC", "JUP") | ("JUP", "USDC") | ("SOL", "USDC") | ("USDC", "SOL") => ("Jupiter".to_string(), 25), // 0.25%
    |

warning: this match arm has an identical body to another arm
   --> src\trading\triangular.rs:503:13
    |
503 |             ("SOL", "JUP") | ("JUP", "SOL") => ("Jupiter".to_string(), 25),   // 0.25%
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
503 ~             ("SOL", "JUP") | ("JUP", "SOL") | ("USDC", "JUP") | ("JUP", "USDC") => ("Jupiter".to_string(), 25),   // 0.25%
504 ~             // 0.25%
    |

warning: this match arm has an identical body to another arm
   --> src\trading\triangular.rs:505:13
    |
505 |             ("SOL", "BONK") | ("BONK", "SOL") => ("Raydium".to_string(), 30), // 0.30% (menos l├¡quido)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
505 ~             ("SOL", "BONK") | ("BONK", "SOL") | ("USDC", "BONK") | ("BONK", "USDC") => ("Raydium".to_string(), 30), // 0.30% (menos l├¡quido)
506 ~             // 0.30%
    |

warning: unused `self` argument
   --> src\trading\triangular.rs:512:32
    |
512 |     fn estimate_pair_liquidity(&self, from: &str, to: &str) -> f64 {
    |                                ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: item in documentation is missing backticks
   --> src\trading\triangular.rs:525:22
    |
525 |     /// Integrar con RealPriceFeeds para obtener precios reales
    |                      ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
525 -     /// Integrar con RealPriceFeeds para obtener precios reales
525 +     /// Integrar con `RealPriceFeeds` para obtener precios reales
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\triangular.rs:549:5
    |
549 |     pub fn get_statistics(&self) -> TriangularStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_statistics(&self) -> TriangularStats`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you should consider adding a `Default` implementation for `CircularTradeDetector`
   --> src\trading\triangular.rs:562:5
    |
562 | /     pub fn new() -> Self {
563 | |         Self {
564 | |             recent_paths: HashSet::new(),
565 | |             token_sequence_tracker: HashMap::new(),
...   |
568 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
    = note: `#[warn(clippy::new_without_default)]` implied by `#[warn(clippy::all)]`
help: try adding this
    |
560 + impl Default for CircularTradeDetector {
561 +     fn default() -> Self {
562 +         Self::new()
563 +     }
564 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\triangular.rs:562:5
    |
562 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: variables can be used directly in the `format!` string
   --> src\trading\triangular.rs:576:43
    |
576 |             self.suspicious_patterns.push(format!("REPETITION: {}", path_signature));
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
576 -             self.suspicious_patterns.push(format!("REPETITION: {}", path_signature));
576 +             self.suspicious_patterns.push(format!("REPETITION: {path_signature}"));
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\triangular.rs:584:47
    |
584 |                 self.suspicious_patterns.push(format!("EXCESSIVE_REPEAT: {}", token));
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
584 -                 self.suspicious_patterns.push(format!("EXCESSIVE_REPEAT: {}", token));
584 +                 self.suspicious_patterns.push(format!("EXCESSIVE_REPEAT: {token}"));
    |

warning: unused `self` argument
   --> src\trading\triangular.rs:603:32
    |
603 |     fn generate_path_signature(&self, path: &[String]) -> String {
    |                                ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this method could have a `#[must_use]` attribute
   --> src\trading\triangular.rs:608:5
    |
608 |     pub fn get_suspicious_patterns(&self) -> &Vec<String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_suspicious_patterns(&self) -> &Vec<String>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\triangular.rs:608:5
    |
608 | /     pub fn get_suspicious_patterns(&self) -> &Vec<String> {
609 | |         &self.suspicious_patterns
610 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
608 |     pub const fn get_suspicious_patterns(&self) -> &Vec<String> {
    |         +++++

warning: item in documentation is missing backticks
 --> src\trading\flash_loan.rs:1:39
  |
1 | //! Flash Loan Engine - Migrado desde arbitrage_phase45_clean.rs
  |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
1 - //! Flash Loan Engine - Migrado desde arbitrage_phase45_clean.rs
1 + //! Flash Loan Engine - Migrado desde `arbitrage_phase45_clean.rs`
  |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\flash_loan.rs:116:5
    |
116 |     pub fn new(config: Option<EnterpriseFlashLoanConfig>, settings: SimpleConfig) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: Option<EnterpriseFlashLoanConfig>, settings: SimpleConfig) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: redundant clone
   --> src\trading\flash_loan.rs:181:63
    |
181 |                 self.opportunity_history.push_back(opportunity.clone());
    |                                                               ^^^^^^^^ help: remove this
    |
note: this value is dropped without further use
   --> src\trading\flash_loan.rs:181:52
    |
181 |                 self.opportunity_history.push_back(opportunity.clone());
    |                                                    ^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone
    = note: `#[warn(clippy::redundant_clone)]` implied by `#[warn(clippy::nursery)]`

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
   --> src\trading\flash_loan.rs:151:49
    |
151 |             let flash_loan_fee = loan_amount * (self.config.fee_tier_bps as f64 / 10000.0);
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
151 -             let flash_loan_fee = loan_amount * (self.config.fee_tier_bps as f64 / 10000.0);
151 +             let flash_loan_fee = loan_amount * (f64::from(self.config.fee_tier_bps) / 10000.0);
    |

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
   --> src\trading\flash_loan.rs:204:52
    |
204 |                     opportunity.loan_amount_sol * (self.config.fee_tier_bps as f64 / 10000.0);
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
204 -                     opportunity.loan_amount_sol * (self.config.fee_tier_bps as f64 / 10000.0);
204 +                     opportunity.loan_amount_sol * (f64::from(self.config.fee_tier_bps) / 10000.0);
    |

warning: unused `self` argument
   --> src\trading\flash_loan.rs:231:41
    |
231 |     fn assess_current_market_conditions(&self) -> f64 {
    |                                         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\trading\flash_loan.rs:258:26
    |
258 |         let percentage = min_pct + (market_liquidity * (max_pct - min_pct));
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `market_liquidity.mul_add(max_pct - min_pct, min_pct)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: unused `self` argument
   --> src\trading\flash_loan.rs:263:37
    |
263 |     fn get_current_market_liquidity(&self) -> f64 {
    |                                     ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\trading\flash_loan.rs:281:34
    |
281 |     fn get_current_market_spread(&self) -> f64 {
    |                                  ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
   --> src\trading\flash_loan.rs:291:48
    |
291 |         (net_profit / loan_amount) * 10000.0 > self.config.min_profit_threshold_bps as f64
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
291 -         (net_profit / loan_amount) * 10000.0 > self.config.min_profit_threshold_bps as f64
291 +         (net_profit / loan_amount) * 10000.0 > f64::from(self.config.min_profit_threshold_bps)
    |

warning: calling `to_string` on `&&str`
   --> src\trading\flash_loan.rs:300:51
    |
300 |             if self.available_providers.contains(&provider.to_string()) {
    |                                                   ^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*provider).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string
    = note: `#[warn(clippy::inefficient_to_string)]` implied by `#[warn(clippy::pedantic)]`

warning: calling `to_string` on `&&str`
   --> src\trading\flash_loan.rs:301:24
    |
301 |                 return provider.to_string();
    |                        ^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*provider).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: function call inside of `unwrap_or`
   --> src\trading\flash_loan.rs:307:14
    |
307 |             .unwrap_or(&"Solend".to_string())
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unwrap_or_else(|| &"Solend".to_string())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call

warning: unused `self` argument
   --> src\trading\flash_loan.rs:312:34
    |
312 |     fn calculate_real_risk_score(&self, _estimated_profit: &f64, profit_percentage: f64) -> f64 {
    |                                  ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this argument (8 byte) is passed by reference, but would be more efficient if passed by value (limit: 64 byte)
   --> src\trading\flash_loan.rs:312:60
    |
312 |     fn calculate_real_risk_score(&self, _estimated_profit: &f64, profit_percentage: f64) -> f64 {
    |                                                            ^^^^ help: consider passing by value instead: `f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref
    = note: `#[warn(clippy::trivially_copy_pass_by_ref)]` implied by `#[warn(clippy::pedantic)]`

warning: clamp-like pattern without using clamp function
   --> src\trading\flash_loan.rs:325:9
    |
325 |         risk.max(0.05).min(0.8) // Entre 5% y 80% riesgo
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `risk.clamp(0.05, 0.8)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: unused `self` argument
   --> src\trading\flash_loan.rs:329:40
    |
329 |     fn calculate_real_confidence_score(&self, profit_percentage: f64, execution_path: &[String]) -> f64 {
    |                                        ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: clamp-like pattern without using clamp function
   --> src\trading\flash_loan.rs:345:9
    |
345 |         confidence.max(0.3).min(1.0) // Entre 30% y 100%
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `confidence.clamp(0.3, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: this method could have a `#[must_use]` attribute
   --> src\trading\flash_loan.rs:362:5
    |
362 |     pub fn get_statistics(&self) -> &FlashLoanStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_statistics(&self) -> &FlashLoanStats`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\flash_loan.rs:362:5
    |
362 | /     pub fn get_statistics(&self) -> &FlashLoanStats {
363 | |         &self.stats
364 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
362 |     pub const fn get_statistics(&self) -> &FlashLoanStats {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\flash_loan.rs:367:5
    |
367 |     pub fn get_available_providers(&self) -> &Vec<String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_available_providers(&self) -> &Vec<String>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\flash_loan.rs:367:5
    |
367 | /     pub fn get_available_providers(&self) -> &Vec<String> {
368 | |         &self.available_providers
369 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
367 |     pub const fn get_available_providers(&self) -> &Vec<String> {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\flash_loan.rs:372:5
    |
372 |     pub fn is_enabled(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_enabled(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\flash_loan.rs:372:5
    |
372 | /     pub fn is_enabled(&self) -> bool {
373 | |         self.config.enabled
374 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
372 |     pub const fn is_enabled(&self) -> bool {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\flash_loan.rs:377:5
    |
377 |     pub fn get_config(&self) -> &EnterpriseFlashLoanConfig {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_config(&self) -> &EnterpriseFlashLoanConfig`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\flash_loan.rs:377:5
    |
377 | /     pub fn get_config(&self) -> &EnterpriseFlashLoanConfig {
378 | |         &self.config
379 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
377 |     pub const fn get_config(&self) -> &EnterpriseFlashLoanConfig {
    |         +++++

warning: item in documentation is missing backticks
 --> src\trading\cross_chain.rs:1:50
  |
1 | //! Cross-Chain Arbitrage Engine - Migrado desde arbitrage_phase45_clean.rs  
  |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
1 - //! Cross-Chain Arbitrage Engine - Migrado desde arbitrage_phase45_clean.rs  
1 + //! Cross-Chain Arbitrage Engine - Migrado desde `arbitrage_phase45_clean.rs`  
  |

warning: doc comment uses two spaces for a hard line break
 --> src\trading\cross_chain.rs:1:76
  |
1 | //! Cross-Chain Arbitrage Engine - Migrado desde arbitrage_phase45_clean.rs  
  |                                                                            ^^
  |
  = help: replace this double space with a backslash: `\`
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_comment_double_space_linebreaks
  = note: `#[warn(clippy::doc_comment_double_space_linebreaks)]` implied by `#[warn(clippy::pedantic)]`

warning: first doc comment paragraph is too long
 --> src\trading\cross_chain.rs:1:1
  |
1 | / //! Cross-Chain Arbitrage Engine - Migrado desde arbitrage_phase45_clean.rs  
2 | | //! Implementa detecci├│n y ejecuci├│n de arbitraje entre m├║ltiples blockchains
3 | | //! con soporte para bridges, gesti├│n de riesgo cross-chain y analytics
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph

warning: item in documentation is missing backticks
   --> src\trading\cross_chain.rs:155:58
    |
155 |     /// Sistema multi-proveedor de precios (reemplazo de CoinGecko)
    |                                                          ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
155 -     /// Sistema multi-proveedor de precios (reemplazo de CoinGecko)
155 +     /// Sistema multi-proveedor de precios (reemplazo de `CoinGecko`)
    |

warning: you should consider adding a `Default` implementation for `CrossChainPriceMonitor`
   --> src\trading\cross_chain.rs:163:5
    |
163 | /     pub fn new() -> Self {
164 | |         Self {
165 | |             chain_prices: HashMap::new(),
166 | |             last_update: HashMap::new(),
...   |
179 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
161 + impl Default for CrossChainPriceMonitor {
162 +     fn default() -> Self {
163 +         Self::new()
164 +     }
165 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:163:5
    |
163 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: the function has a cognitive complexity of (44/30)
   --> src\trading\cross_chain.rs:182:18
    |
182 |     pub async fn update_chain_prices(&mut self, chain: &str) -> Result<()> {
    |                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: redundant closure
   --> src\trading\cross_chain.rs:193:66
    |
193 |             let token_refs: Vec<&str> = native_tokens.iter().map(|s| s.as_str()).collect();
    |                                                                  ^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::String::as_str`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls
    = note: `#[warn(clippy::redundant_closure_for_method_calls)]` implied by `#[warn(clippy::pedantic)]`

warning: item in documentation is missing backticks
   --> src\trading\cross_chain.rs:232:66
    |
232 |     /// Obtener precio real de token desde APIs optimizadas (SIN CoinGecko)
    |                                                                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
232 -     /// Obtener precio real de token desde APIs optimizadas (SIN CoinGecko)
232 +     /// Obtener precio real de token desde APIs optimizadas (SIN `CoinGecko`)
    |

warning: item in documentation is missing backticks
   --> src\trading\cross_chain.rs:267:41
    |
267 |     /// M├®todo eliminado - ya no usamos CoinGecko para evitar rate limiting
    |                                         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
267 -     /// M├®todo eliminado - ya no usamos CoinGecko para evitar rate limiting
267 +     /// M├®todo eliminado - ya no usamos `CoinGecko` para evitar rate limiting
    |

warning: item in documentation is missing backticks
   --> src\trading\cross_chain.rs:268:25
    |
268 |     /// Reemplazado por MultiPriceFeeds system
    |                         ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
268 -     /// Reemplazado por MultiPriceFeeds system
268 +     /// Reemplazado por `MultiPriceFeeds` system
    |

warning: item in documentation is missing backticks
   --> src\trading\cross_chain.rs:269:41
    |
269 |     /// M├®todo eliminado - ya no usamos CoinGecko batch para evitar rate limiting
    |                                         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
269 -     /// M├®todo eliminado - ya no usamos CoinGecko batch para evitar rate limiting
269 +     /// M├®todo eliminado - ya no usamos `CoinGecko` batch para evitar rate limiting
    |

warning: item in documentation is missing backticks
   --> src\trading\cross_chain.rs:270:25
    |
270 |     /// Reemplazado por MultiPriceFeeds system
    |                         ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
270 -     /// Reemplazado por MultiPriceFeeds system
270 +     /// Reemplazado por `MultiPriceFeeds` system
    |

warning: item in documentation is missing backticks
   --> src\trading\cross_chain.rs:271:44
    |
271 |     /// M├®todo eliminado - reemplazado por MultiPriceFeeds system para evitar rate limiting
    |                                            ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
271 -     /// M├®todo eliminado - reemplazado por MultiPriceFeeds system para evitar rate limiting
271 +     /// M├®todo eliminado - reemplazado por `MultiPriceFeeds` system para evitar rate limiting
    |

warning: unused `self` argument
   --> src\trading\cross_chain.rs:274:26
    |
274 |     fn get_token_address(&self, token: &str, chain: &str) -> Result<String> {
    |                          ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:287:13
    |
287 |             ("ETH", "Ethereum") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
287 ~             ("ETH", "Ethereum") | ("ETH", "Arbitrum") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
288 |             ("USDC", "Ethereum") => Ok("0xA0b86a33E6441E0e5C9e65E7d4f5c7b22F17e62f".to_string()),
...
300 |             // === ARBITRUM BLOCKCHAIN ===
301 ~             // ETH nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:287:13
    |
287 |             ("ETH", "Ethereum") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
287 ~             ("ETH", "Ethereum") | ("ETH", "Optimism") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
288 |             ("USDC", "Ethereum") => Ok("0xA0b86a33E6441E0e5C9e65E7d4f5c7b22F17e62f".to_string()),
...
307 |             // === OPTIMISM BLOCKCHAIN ===
308 ~             // ETH nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:301:13
    |
301 |             ("ETH", "Arbitrum") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
301 ~             ("ETH", "Arbitrum") | ("ETH", "Optimism") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
302 |             ("USDC", "Arbitrum") => Ok("0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8".to_string()),
...
307 |             // === OPTIMISM BLOCKCHAIN ===
308 ~             // ETH nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:287:13
    |
287 |             ("ETH", "Ethereum") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
287 ~             ("ETH", "Ethereum") | ("ETH", "Base") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
288 |             ("USDC", "Ethereum") => Ok("0xA0b86a33E6441E0e5C9e65E7d4f5c7b22F17e62f".to_string()),
...
314 |             // === BASE BLOCKCHAIN ===
315 ~             // ETH nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:301:13
    |
301 |             ("ETH", "Arbitrum") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
301 ~             ("ETH", "Arbitrum") | ("ETH", "Base") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
302 |             ("USDC", "Arbitrum") => Ok("0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8".to_string()),
...
314 |             // === BASE BLOCKCHAIN ===
315 ~             // ETH nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:308:13
    |
308 |             ("ETH", "Optimism") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
308 ~             ("ETH", "Optimism") | ("ETH", "Base") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
309 |             ("USDC", "Optimism") => Ok("0x7F5c764cBc14f9669B88837ca1490cCa17c31607".to_string()),
...
314 |             // === BASE BLOCKCHAIN ===
315 ~             // ETH nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:287:13
    |
287 |             ("ETH", "Ethereum") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
287 ~             ("ETH", "Ethereum") | ("AVAX", "Avalanche") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
288 |             ("USDC", "Ethereum") => Ok("0xA0b86a33E6441E0e5C9e65E7d4f5c7b22F17e62f".to_string()),
...
319 |             // === AVALANCHE BLOCKCHAIN ===
320 ~             // AVAX nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:301:13
    |
301 |             ("ETH", "Arbitrum") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
301 ~             ("ETH", "Arbitrum") | ("AVAX", "Avalanche") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
302 |             ("USDC", "Arbitrum") => Ok("0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8".to_string()),
...
319 |             // === AVALANCHE BLOCKCHAIN ===
320 ~             // AVAX nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:308:13
    |
308 |             ("ETH", "Optimism") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
308 ~             ("ETH", "Optimism") | ("AVAX", "Avalanche") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
309 |             ("USDC", "Optimism") => Ok("0x7F5c764cBc14f9669B88837ca1490cCa17c31607".to_string()),
...
319 |             // === AVALANCHE BLOCKCHAIN ===
320 ~             // AVAX nativo
    |

warning: this match arm has an identical body to another arm
   --> src\trading\cross_chain.rs:315:13
    |
315 |             ("ETH", "Base") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
315 ~             ("ETH", "Base") | ("AVAX", "Avalanche") => Ok("0x0000000000000000000000000000000000000000".to_string()), // ETH nativo
316 |             ("USDC", "Base") => Ok("0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913".to_string()),
...
319 |             // === AVALANCHE BLOCKCHAIN ===
320 ~             // AVAX nativo
    |

warning: unused `self` argument
   --> src\trading\cross_chain.rs:331:36
    |
331 |     fn get_native_tokens_for_chain(&self, chain: &str) -> Vec<String> {
    |                                    ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:351:5
    |
351 |     pub fn get_price_difference(&self, token: &str, source_chain: &str, target_chain: &str) -> Option<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_price_difference(&self, token: &str, source_chain: &str, target_chain: &str) -> Option<f64>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:360:5
    |
360 |     pub fn get_chain_price(&self, token: &str, chain: &str) -> Option<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_chain_price(&self, token: &str, chain: &str) -> Option<f64>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:365:5
    |
365 |     pub fn get_supported_tokens(&self) -> &Vec<String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_supported_tokens(&self) -> &Vec<String>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\cross_chain.rs:365:5
    |
365 | /     pub fn get_supported_tokens(&self) -> &Vec<String> {
366 | |         &self.supported_tokens
367 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
365 |     pub const fn get_supported_tokens(&self) -> &Vec<String> {
    |         +++++

warning: item in documentation is missing backticks
   --> src\trading\cross_chain.rs:369:30
    |
369 |     /// Nuevo m├®todo que usa MultiPriceFeeds para mayor confiabilidad
    |                              ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
369 -     /// Nuevo m├®todo que usa MultiPriceFeeds para mayor confiabilidad
369 +     /// Nuevo m├®todo que usa `MultiPriceFeeds` para mayor confiabilidad
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\cross_chain.rs:372:25
    |
372 |         let cache_key = format!("{}_{}", token, chain);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
372 -         let cache_key = format!("{}_{}", token, chain);
372 +         let cache_key = format!("{token}_{chain}");
    |

warning: manual implementation of `Instant::elapsed`
   --> src\trading\cross_chain.rs:376:16
    |
376 |             if (Instant::now() - *timestamp).as_secs() < 5 {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(*timestamp).elapsed()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_instant_elapsed
    = note: `#[warn(clippy::manual_instant_elapsed)]` implied by `#[warn(clippy::pedantic)]`

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:412:5
    |
412 |     pub fn get_cache_stats(&self) -> (usize, usize) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_cache_stats(&self) -> (usize, usize)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:441:5
    |
441 |     pub fn new(config: Option<EnterpriseCrossChainConfig>, settings: SimpleConfig) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: Option<EnterpriseCrossChainConfig>, settings: SimpleConfig) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: the function has a cognitive complexity of (40/30)
   --> src\trading\cross_chain.rs:455:18
    |
455 |     pub async fn scan_cross_chain_opportunities(&mut self) -> Result<Vec<CrossChainOpportunity>> {
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
   --> src\trading\cross_chain.rs:501:69
    |
501 |             (opp.net_profit_usd / opp.trade_amount_usd) * 10000.0 > self.config.min_cross_chain_profit_bps as f64 &&
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
501 -             (opp.net_profit_usd / opp.trade_amount_usd) * 10000.0 > self.config.min_cross_chain_profit_bps as f64 &&
501 +             (opp.net_profit_usd / opp.trade_amount_usd) * 10000.0 > f64::from(self.config.min_cross_chain_profit_bps) &&
    |

warning: casts from `u16` to `f64` can be expressed infallibly using `From`
   --> src\trading\cross_chain.rs:503:59
    |
503 |             opp.bridge_fee_usd <= opp.trade_amount_usd * (self.config.bridge_fee_tolerance_bps as f64 / 10000.0)
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
503 -             opp.bridge_fee_usd <= opp.trade_amount_usd * (self.config.bridge_fee_tolerance_bps as f64 / 10000.0)
503 +             opp.bridge_fee_usd <= opp.trade_amount_usd * (f64::from(self.config.bridge_fee_tolerance_bps) / 10000.0)
    |

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src\trading\cross_chain.rs:549:78
    |
549 | ...                   confidence_score: self.calculate_real_confidence(&source_chain, &target_chain, &token, price_diff_pct),
    |                                                                        ^^^^^^^^^^^^^ help: change this to: `source_chain`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow
    = note: `#[warn(clippy::needless_borrow)]` implied by `#[warn(clippy::all)]`

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src\trading\cross_chain.rs:549:93
    |
549 | ...                   confidence_score: self.calculate_real_confidence(&source_chain, &target_chain, &token, price_diff_pct),
    |                                                                                       ^^^^^^^^^^^^^ help: change this to: `target_chain`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src\trading\cross_chain.rs:549:108
    |
549 | ...                   confidence_score: self.calculate_real_confidence(&source_chain, &target_chain, &token, price_diff_pct),
    |                                                                                                      ^^^^^^ help: change this to: `token`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: unused `self` argument
   --> src\trading\cross_chain.rs:613:48
    |
613 |     fn get_current_market_liquidity_percentage(&self) -> f64 {
    |                                                ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: calling `to_string` on `&&str`
   --> src\trading\cross_chain.rs:627:55
    |
627 |             if self.config.bridge_providers.contains(&provider.to_string()) {
    |                                                       ^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*provider).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: calling `to_string` on `&&str`
   --> src\trading\cross_chain.rs:628:24
    |
628 |                 return provider.to_string();
    |                        ^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*provider).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: function call inside of `unwrap_or`
   --> src\trading\cross_chain.rs:634:14
    |
634 |             .unwrap_or(&"Wormhole".to_string())
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unwrap_or_else(|| &"Wormhole".to_string())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call

warning: unused `self` argument
   --> src\trading\cross_chain.rs:639:29
    |
639 |     fn estimate_bridge_time(&self, source_chain: &str, target_chain: &str) -> u64 {
    |                             ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\trading\cross_chain.rs:686:9
    |
686 |         base_risk + (market_volatility * 0.1) // M├íximo 10% adicional por volatilidad
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `market_volatility.mul_add(0.1, base_risk)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: unused `self` argument
   --> src\trading\cross_chain.rs:696:34
    |
696 |     fn calculate_real_confidence(&self, source_chain: &str, target_chain: &str, token: &str, price_diff_percent: f64) -> f64 {
    |                                  ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\trading\cross_chain.rs:727:34
    |
727 |     fn estimate_liquidity_factor(&self, source_chain: &str, target_chain: &str) -> f64 {
    |                                  ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\trading\cross_chain.rs:742:33
    |
742 |     fn estimate_slippage_impact(&self, amount_usd: f64, token: &str) -> f64 {
    |                                 ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:773:5
    |
773 |     pub fn get_statistics(&self) -> &CrossChainStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_statistics(&self) -> &CrossChainStats`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\cross_chain.rs:773:5
    |
773 | /     pub fn get_statistics(&self) -> &CrossChainStats {
774 | |         &self.stats
775 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
773 |     pub const fn get_statistics(&self) -> &CrossChainStats {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:778:5
    |
778 |     pub fn is_enabled(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_enabled(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\cross_chain.rs:778:5
    |
778 | /     pub fn is_enabled(&self) -> bool {
779 | |         self.config.enabled
780 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
778 |     pub const fn is_enabled(&self) -> bool {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\cross_chain.rs:783:5
    |
783 |     pub fn get_config(&self) -> &EnterpriseCrossChainConfig {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_config(&self) -> &EnterpriseCrossChainConfig`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\cross_chain.rs:783:5
    |
783 | /     pub fn get_config(&self) -> &EnterpriseCrossChainConfig {
784 | |         &self.config
785 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
783 |     pub const fn get_config(&self) -> &EnterpriseCrossChainConfig {
    |         +++++

warning: more than 3 bools in a struct
  --> src\trading\enhanced_system.rs:13:1
   |
13 | / pub struct EnhancedTradingConfig {
14 | |     /// Si el sistema est├í habilitado
15 | |     pub enabled: bool,
16 | |     /// Intervalo de escaneo en segundos
...  |
35 | |     pub verbose_logging: bool,
36 | | }
   | |_^
   |
   = help: consider using a state machine or refactoring bools into two-variant enums
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools

warning: variables can be used directly in the `format!` string
   --> src\trading\enhanced_system.rs:182:42
    |
182 |             self.record_analysis_result(&format!("Opportunity_{}", i), "SOL-USDC", validation_result).await;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
182 -             self.record_analysis_result(&format!("Opportunity_{}", i), "SOL-USDC", validation_result).await;
182 +             self.record_analysis_result(&format!("Opportunity_{i}"), "SOL-USDC", validation_result).await;
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\enhanced_system.rs:259:5
    |
259 |     pub fn get_performance_metrics(&self) -> &TradingPerformanceMetrics {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_performance_metrics(&self) -> &TradingPerformanceMetrics`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\enhanced_system.rs:259:5
    |
259 | /     pub fn get_performance_metrics(&self) -> &TradingPerformanceMetrics {
260 | |         &self.performance_metrics
261 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
259 |     pub const fn get_performance_metrics(&self) -> &TradingPerformanceMetrics {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\enhanced_system.rs:264:5
    |
264 |     pub fn get_system_status(&self) -> &TradingSystemStatus {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_system_status(&self) -> &TradingSystemStatus`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\enhanced_system.rs:264:5
    |
264 | /     pub fn get_system_status(&self) -> &TradingSystemStatus {
265 | |         &self.system_status
266 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
264 |     pub const fn get_system_status(&self) -> &TradingSystemStatus {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\enhanced_system.rs:269:5
    |
269 |     pub fn get_config(&self) -> &EnhancedTradingConfig {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_config(&self) -> &EnhancedTradingConfig`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\enhanced_system.rs:269:5
    |
269 | /     pub fn get_config(&self) -> &EnhancedTradingConfig {
270 | |         &self.config
271 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
269 |     pub const fn get_config(&self) -> &EnhancedTradingConfig {
    |         +++++

warning: you should consider adding a `Default` implementation for `HftEngine`
  --> src\trading\hft_engine.rs:63:5
   |
63 | /     pub fn new() -> Self {
64 | |         Self {
65 | |             order_queue: Arc::new(SegQueue::new()),
66 | |             orders_processed: AtomicU64::new(0),
...  |
72 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
   |
61 + impl Default for HftEngine {
62 +     fn default() -> Self {
63 +         Self::new()
64 +     }
65 + }
   |

warning: this method could have a `#[must_use]` attribute
  --> src\trading\hft_engine.rs:63:5
   |
63 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
   --> src\trading\hft_engine.rs:202:17
    |
201 |       async fn warm_memory_pool(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  ______________________________________________________________________________________________-
202 | |         let mut pool = self.memory_pool.write();
    | |                 ^^^^
...   |
219 | |         Ok(())
220 | |     }
    | |_____- temporary `pool` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
202 ~         
203 +             self.memory_pool.write().push_back(order);
204 |         
...
216 |             });
217 ~             
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\trading\hft_engine.rs:238:17
    |
237 |       async fn return_to_memory_pool(&self, order: Box<HftOrder>) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  _________________________________________________________________________________________________________________________-
238 | |         let mut pool = self.memory_pool.write();
    | |                 ^^^^
239 | |         
240 | |         if pool.len() < 10000 {
...   |
245 | |         Ok(())
246 | |     }
    | |_____- temporary `pool` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
    |
241 ~             pool.push_back(order);
242 +             drop(pool);
    |

warning: you should consider adding a `Default` implementation for `HftPerformanceMonitor`
   --> src\trading\hft_engine.rs:281:5
    |
281 | /     pub fn new() -> Self {
282 | |         let now = std::time::SystemTime::now()
283 | |             .duration_since(std::time::UNIX_EPOCH)
284 | |             .unwrap()
...   |
294 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
280 + impl Default for HftPerformanceMonitor {
281 +     fn default() -> Self {
282 +         Self::new()
283 +     }
284 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\hft_engine.rs:281:5
    |
281 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\hft_engine.rs:370:5
    |
370 |     pub fn min_latency_ms(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn min_latency_ms(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\hft_engine.rs:374:5
    |
374 |     pub fn max_latency_ms(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn max_latency_ms(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\hft_engine.rs:378:5
    |
378 |     pub fn avg_latency_ms(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn avg_latency_ms(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:131:5
    |
131 |     pub fn get_optimized_routes(&self, market_condition: &str) -> Vec<OptimizedRoute> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_optimized_routes(&self, market_condition: &str) -> Vec<OptimizedRoute>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: use Option::map_or_else instead of an if let/else
   --> src\trading\route_optimizer.rs:134:9
    |
134 | /         if let Some(market_config) = condition {
135 | |             let mut selected_routes = Vec::new();
136 | |             
137 | |             for route_type in &market_config.recommended_routes {
...   |
172 | |             self.routes.solana_arbitrage_routes.high_liquidity_routes.clone()
173 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
134 ~         condition.map_or_else(|| self.routes.solana_arbitrage_routes.high_liquidity_routes.clone(), |market_config| {
135 +             let mut selected_routes = Vec::new();
136 +             
137 +             for route_type in &market_config.recommended_routes {
138 +                 match route_type.as_str() {
139 +                     "high_liquidity_routes" => {
140 +                         selected_routes.extend(self.routes.solana_arbitrage_routes.high_liquidity_routes.clone());
141 +                     },
142 +                     "stablecoin_routes" => {
143 +                         selected_routes.extend(self.routes.solana_arbitrage_routes.stablecoin_routes.clone());
144 +                     },
145 +                     "jupiter_focused" => {
146 +                         if let Some(jupiter_routes) = self.routes.solana_arbitrage_routes.dex_specific_routes.get("jupiter_focused") {
147 +                             selected_routes.extend(jupiter_routes.clone());
148 +                         }
149 +                     },
150 +                     "raydium_focused" => {
151 +                         if let Some(raydium_routes) = self.routes.solana_arbitrage_routes.dex_specific_routes.get("raydium_focused") {
152 +                             selected_routes.extend(raydium_routes.clone());
153 +                         }
154 +                     },
155 +                     "orca_focused" => {
156 +                         if let Some(orca_routes) = self.routes.solana_arbitrage_routes.dex_specific_routes.get("orca_focused") {
157 +                             selected_routes.extend(orca_routes.clone());
158 +                         }
159 +                     },
160 +                     _ => {}
161 +                 }
162 +             }
163 +             
164 +             // Apply market condition multipliers
165 +             for route in &mut selected_routes {
166 +                 route.avg_profit_bps = ((route.avg_profit_bps as f64) * market_config.profit_multiplier) as u32;
167 +             }
168 +             
169 +             selected_routes
170 +         })
    |

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\trading\route_optimizer.rs:166:41
    |
166 |                 route.avg_profit_bps = ((route.avg_profit_bps as f64) * market_config.profit_multiplier) as u32;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
166 -                 route.avg_profit_bps = ((route.avg_profit_bps as f64) * market_config.profit_multiplier) as u32;
166 +                 route.avg_profit_bps = (f64::from(route.avg_profit_bps) * market_config.profit_multiplier) as u32;
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:177:5
    |
177 |     pub fn get_sentiment_optimized_routes(&self, market_sentiment: f64) -> Vec<OptimizedRoute> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_sentiment_optimized_routes(&self, market_sentiment: f64) -> Vec<OptimizedRoute>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:192:5
    |
192 |     pub fn get_flash_loan_opportunities(&self, min_profit: f64) -> Vec<FlashLoanRoute> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_flash_loan_opportunities(&self, min_profit: f64) -> Vec<FlashLoanRoute>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:201:5
    |
201 |     pub fn get_cross_chain_opportunities(&self, min_volume: u64) -> Vec<CrossChainRoute> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_cross_chain_opportunities(&self, min_volume: u64) -> Vec<CrossChainRoute>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:210:5
    |
210 |     pub fn get_fastest_routes(&self, max_execution_time_ms: u32) -> Vec<OptimizedRoute> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_fastest_routes(&self, max_execution_time_ms: u32) -> Vec<OptimizedRoute>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you seem to want to iterate on a map's values
   --> src\trading\route_optimizer.rs:215:32
    |
215 |         for (_, dex_routes) in &self.routes.solana_arbitrage_routes.dex_specific_routes {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map
    = note: `#[warn(clippy::for_kv_map)]` implied by `#[warn(clippy::all)]`
help: use the corresponding method
    |
215 -         for (_, dex_routes) in &self.routes.solana_arbitrage_routes.dex_specific_routes {
215 +         for dex_routes in self.routes.solana_arbitrage_routes.dex_specific_routes.values() {
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:225:5
    |
225 |     pub fn get_most_profitable_routes(&self, min_profit_bps: u32) -> Vec<OptimizedRoute> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_most_profitable_routes(&self, min_profit_bps: u32) -> Vec<OptimizedRoute>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you seem to want to iterate on a map's values
   --> src\trading\route_optimizer.rs:230:32
    |
230 |         for (_, dex_routes) in &self.routes.solana_arbitrage_routes.dex_specific_routes {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map
help: use the corresponding method
    |
230 -         for (_, dex_routes) in &self.routes.solana_arbitrage_routes.dex_specific_routes {
230 +         for dex_routes in self.routes.solana_arbitrage_routes.dex_specific_routes.values() {
    |

warning: variables can be used directly in the `format!` string
   --> src\trading\route_optimizer.rs:246:13
    |
246 |             println!("Ô£à Route {} updated with profit: ${:.2}", route_signature, actual_profit);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
246 -             println!("Ô£à Route {} updated with profit: ${:.2}", route_signature, actual_profit);
246 +             println!("Ô£à Route {route_signature} updated with profit: ${actual_profit:.2}");
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:251:5
    |
251 |     pub fn recommend_route(&self, available_capital: f64, risk_tolerance: f64, market_sentiment: f64) -> Option<OptimizedRoute> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn recommend_route(&self, available_capital: f64, risk_tolerance: f64, market_sentiment: f64) -> Option<OptimizedRoute>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: avoid using `collect()` when not needed
   --> src\trading\route_optimizer.rs:261:14
    |
261 |             .collect();
    |              ^^^^^^^
...
264 |         suitable_routes.into_iter()
    |         --------------------------- the iterator could be used here instead
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect
    = note: `#[warn(clippy::needless_collect)]` implied by `#[warn(clippy::nursery)]`
help: use the original Iterator instead of collecting it and then producing a new one
    |
255 ~         
256 |
257 |         // Return best route based on risk-adjusted return
258 ~         routes.into_iter()
259 +             .filter(|route| {
260 +                 let capital_ok = route.min_volume_required as f64 <= available_capital;
261 +                 let risk_ok = route.success_rate >= (1.0 - risk_tolerance);
262 +                 capital_ok && risk_ok
263 +             })
    |

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\trading\route_optimizer.rs:266:31
    |
266 |                 let a_score = (a.avg_profit_bps as f64) * a.success_rate;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
266 -                 let a_score = (a.avg_profit_bps as f64) * a.success_rate;
266 +                 let a_score = f64::from(a.avg_profit_bps) * a.success_rate;
    |

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\trading\route_optimizer.rs:267:31
    |
267 |                 let b_score = (b.avg_profit_bps as f64) * b.success_rate;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
267 -                 let b_score = (b.avg_profit_bps as f64) * b.success_rate;
267 +                 let b_score = f64::from(b.avg_profit_bps) * b.success_rate;
    |

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:298:5
    |
298 |     pub fn get_optimization_settings(&self) -> &OptimizationSettings {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_optimization_settings(&self) -> &OptimizationSettings`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\route_optimizer.rs:298:5
    |
298 | /     pub fn get_optimization_settings(&self) -> &OptimizationSettings {
299 | |         &self.routes.optimization_settings
300 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
298 |     pub const fn get_optimization_settings(&self) -> &OptimizationSettings {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\trading\route_optimizer.rs:303:5
    |
303 |     pub fn get_risk_parameters(&self) -> &RiskParameters {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_risk_parameters(&self) -> &RiskParameters`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\trading\route_optimizer.rs:303:5
    |
303 | /     pub fn get_risk_parameters(&self) -> &RiskParameters {
304 | |         &self.routes.risk_parameters
305 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
303 |     pub const fn get_risk_parameters(&self) -> &RiskParameters {
    |         +++++

warning: item in documentation is missing backticks
  --> src\apis\dexscreener.rs:16:5
   |
16 | /// DexScreener API client for market data
   |     ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
16 - /// DexScreener API client for market data
16 + /// `DexScreener` API client for market data
   |

warning: item in documentation is missing backticks
  --> src\apis\dexscreener.rs:26:22
   |
26 |     /// Create a new DexScreener client
   |                      ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
26 -     /// Create a new DexScreener client
26 +     /// Create a new `DexScreener` client
   |

warning: this method could have a `#[must_use]` attribute
  --> src\apis\dexscreener.rs:27:5
   |
27 |     pub fn new(config: &SimpleConfig) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: &SimpleConfig) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: variables can be used directly in the `format!` string
  --> src\apis\dexscreener.rs:66:26
   |
66 |             .map_err(|e| format!("Request failed: {}", e))?;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
66 -             .map_err(|e| format!("Request failed: {}", e))?;
66 +             .map_err(|e| format!("Request failed: {e}"))?;
   |

warning: variables can be used directly in the `format!` string
  --> src\apis\dexscreener.rs:75:26
   |
75 |             .map_err(|e| format!("Failed to parse response: {}", e))?;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
75 -             .map_err(|e| format!("Failed to parse response: {}", e))?;
75 +             .map_err(|e| format!("Failed to parse response: {e}"))?;
   |

warning: variables can be used directly in the `format!` string
   --> src\apis\dexscreener.rs:101:25
    |
101 |         let cache_key = format!("trending_{}", chain);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
101 -         let cache_key = format!("trending_{}", chain);
101 +         let cache_key = format!("trending_{chain}");
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\dexscreener.rs:120:26
    |
120 |             .map_err(|e| format!("Request failed: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
120 -             .map_err(|e| format!("Request failed: {}", e))?;
120 +             .map_err(|e| format!("Request failed: {e}"))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\dexscreener.rs:129:26
    |
129 |             .map_err(|e| format!("Failed to parse response: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
129 -             .map_err(|e| format!("Failed to parse response: {}", e))?;
129 +             .map_err(|e| format!("Failed to parse response: {e}"))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\dexscreener.rs:171:26
    |
171 |             .map_err(|e| format!("Request failed: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
171 -             .map_err(|e| format!("Request failed: {}", e))?;
171 +             .map_err(|e| format!("Request failed: {e}"))?;
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\dexscreener.rs:180:26
    |
180 |             .map_err(|e| format!("Failed to parse response: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
180 -             .map_err(|e| format!("Failed to parse response: {}", e))?;
180 +             .map_err(|e| format!("Failed to parse response: {e}"))?;
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\apis\dexscreener.rs:218:13
    |
217 |       async fn check_cache_with_ttl(&self, category: &str, key: &str, ttl: Duration) -> Option<String> {
    |  ______________________________________________________________________________________________________-
218 | |         let cache = self.cache.read().await;
    | |             ^^^^^
219 | |         let cache_key = format!("{}:{}", category, key);
...   |
228 | |         None
229 | |     }
    | |_____- temporary `cache` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
218 ~         
219 +         self.cache.read().await.;
220 |         let cache_key = format!("{}:{}", category, key);
221 |         
222 ~         
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\dexscreener.rs:219:25
    |
219 |         let cache_key = format!("{}:{}", category, key);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
219 -         let cache_key = format!("{}:{}", category, key);
219 +         let cache_key = format!("{category}:{key}");
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\apis\dexscreener.rs:233:17
    |
232 |       async fn update_cache(&self, category: &str, key: &str, data: &str) {
    |  _________________________________________________________________________-
233 | |         let mut cache = self.cache.write().await;
    | |                 ^^^^^
234 | |         let cache_key = format!("{}:{}", category, key);
...   |
246 | |         debug!("Cached data for: {}", cache_key);
247 | |     }
    | |_____- temporary `cache` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
    |
243 ~             cache.cleanup();
244 +             drop(cache);
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\dexscreener.rs:234:25
    |
234 |         let cache_key = format!("{}:{}", category, key);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
234 -         let cache_key = format!("{}:{}", category, key);
234 +         let cache_key = format!("{category}:{key}");
    |

warning: unchecked subtraction of a 'Duration' from an 'Instant'
   --> src\apis\dexscreener.rs:273:22
    |
273 |         let cutoff = Instant::now() - Duration::from_secs(3600); // 1 hour
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Instant::now().checked_sub(Duration::from_secs(3600)).unwrap()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction
    = note: `#[warn(clippy::unchecked_duration_subtraction)]` implied by `#[warn(clippy::pedantic)]`

warning: item in documentation is missing backticks
   --> src\apis\dexscreener.rs:295:28
    |
295 | /// Token information from DexScreener
    |                            ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
295 - /// Token information from DexScreener
295 + /// Token information from `DexScreener`
    |

warning: this `impl` can be derived
   --> src\apis\dexscreener.rs:376:1
    |
376 | / impl Default for TokenBasic {
377 | |     fn default() -> Self {
378 | |         Self {
379 | |             address: String::new(),
...   |
384 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls
    = note: `#[warn(clippy::derivable_impls)]` implied by `#[warn(clippy::all)]`
help: replace the manual implementation with a derive attribute
    |
370 + #[derive(Default)]
371 ~ pub struct TokenBasic {
    |

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\config.rs:31:5
   |
31 |     pub fn devnet() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn devnet() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\config.rs:45:5
   |
45 |     pub fn mainnet() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn mainnet() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\config.rs:59:5
   |
59 |     pub fn with_api_key(mut self, api_key: String) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_api_key(mut self, api_key: String) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src\apis\jupiter\config.rs:59:5
   |
59 | /     pub fn with_api_key(mut self, api_key: String) -> Self {
60 | |         self.api_key = Some(api_key);
61 | |         self
62 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\config.rs:65:5
   |
65 |     pub fn with_rpc_endpoint(mut self, endpoint: String) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_rpc_endpoint(mut self, endpoint: String) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src\apis\jupiter\config.rs:65:5
   |
65 | /     pub fn with_rpc_endpoint(mut self, endpoint: String) -> Self {
66 | |         self.rpc_endpoint = endpoint;
67 | |         self
68 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\config.rs:71:5
   |
71 |     pub fn with_rate_limit(mut self, rps: u32) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_rate_limit(mut self, rps: u32) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\apis\jupiter\config.rs:71:5
   |
71 | /     pub fn with_rate_limit(mut self, rps: u32) -> Self {
72 | |         self.rate_limit_rps = rps;
73 | |         self
74 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
71 |     pub const fn with_rate_limit(mut self, rps: u32) -> Self {
   |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src\apis\jupiter\config.rs:71:5
   |
71 | /     pub fn with_rate_limit(mut self, rps: u32) -> Self {
72 | |         self.rate_limit_rps = rps;
73 | |         self
74 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\config.rs:77:5
   |
77 |     pub fn set_enabled(mut self, enabled: bool) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn set_enabled(mut self, enabled: bool) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\apis\jupiter\config.rs:77:5
   |
77 | /     pub fn set_enabled(mut self, enabled: bool) -> Self {
78 | |         self.enabled = enabled;
79 | |         self
80 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
77 |     pub const fn set_enabled(mut self, enabled: bool) -> Self {
   |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src\apis\jupiter\config.rs:77:5
   |
77 | /     pub fn set_enabled(mut self, enabled: bool) -> Self {
78 | |         self.enabled = enabled;
79 | |         self
80 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\types.rs:38:5
   |
38 |     pub fn price_as_f64(&self) -> f64 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn price_as_f64(&self) -> f64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\types.rs:71:5
   |
71 |     pub fn new(input_mint: String, output_mint: String, amount: u64) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(input_mint: String, output_mint: String, amount: u64) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\types.rs:86:5
   |
86 |     pub fn with_slippage_bps(mut self, slippage_bps: u16) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_slippage_bps(mut self, slippage_bps: u16) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\apis\jupiter\types.rs:86:5
   |
86 | /     pub fn with_slippage_bps(mut self, slippage_bps: u16) -> Self {
87 | |         self.slippage_bps = Some(slippage_bps);
88 | |         self
89 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
86 |     pub const fn with_slippage_bps(mut self, slippage_bps: u16) -> Self {
   |         +++++

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src\apis\jupiter\types.rs:86:5
   |
86 | /     pub fn with_slippage_bps(mut self, slippage_bps: u16) -> Self {
87 | |         self.slippage_bps = Some(slippage_bps);
88 | |         self
89 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
  --> src\apis\jupiter\types.rs:92:5
   |
92 |     pub fn exclude_dexes(mut self, dexes: Vec<String>) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn exclude_dexes(mut self, dexes: Vec<String>) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src\apis\jupiter\types.rs:92:5
   |
92 | /     pub fn exclude_dexes(mut self, dexes: Vec<String>) -> Self {
93 | |         self.exclude_dexes = Some(dexes);
94 | |         self
95 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: item in documentation is missing backticks
   --> src\apis\jupiter\types.rs:167:12
    |
167 | /// Legacy JupiterQuote for backward compatibility with existing triangular.rs
    |            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
167 - /// Legacy JupiterQuote for backward compatibility with existing triangular.rs
167 + /// Legacy `JupiterQuote` for backward compatibility with existing triangular.rs
    |

warning: the function has a cognitive complexity of (33/30)
  --> src\apis\jupiter\client.rs:64:18
   |
64 |     pub async fn get_quote(&self, request: QuoteRequest) -> Result<JupiterQuoteResponse> {
   |                  ^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
  --> src\apis\jupiter\client.rs:85:60
   |
85 |                         sleep(Duration::from_millis(1000 * attempt as u64)).await;
   |                                                            ^^^^^^^^^^^^^^
   |
   = help: an `as` cast can become silently lossy if the types change in the future
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
   |
85 -                         sleep(Duration::from_millis(1000 * attempt as u64)).await;
85 +                         sleep(Duration::from_millis(1000 * u64::from(attempt))).await;
   |

warning: the function has a cognitive complexity of (33/30)
  --> src\apis\jupiter\client.rs:98:18
   |
98 |     pub async fn get_prices(&self, token_addresses: Vec<String>) -> Result<JupiterPriceResponse> {
   |                  ^^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
   --> src\apis\jupiter\client.rs:120:60
    |
120 |                         sleep(Duration::from_millis(1000 * attempt as u64)).await;
    |                                                            ^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
    |
120 -                         sleep(Duration::from_millis(1000 * attempt as u64)).await;
120 +                         sleep(Duration::from_millis(1000 * u64::from(attempt))).await;
    |

warning: unused `self` argument
   --> src\apis\jupiter\client.rs:206:33
    |
206 |     fn build_quote_query_params(&self, request: &QuoteRequest) -> Result<Vec<(String, String)>> {
    |                                 ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src\apis\jupiter\client.rs:206:5
    |
206 | /     fn build_quote_query_params(&self, request: &QuoteRequest) -> Result<Vec<(String, String)>> {
207 | |         let mut params = vec![
208 | |             ("inputMint".to_string(), request.input_mint.clone()),
209 | |             ("outputMint".to_string(), request.output_mint.clone()),
...   |
229 | |         Ok(params)
230 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
206 -     fn build_quote_query_params(&self, request: &QuoteRequest) -> Result<Vec<(String, String)>> {
206 +     fn build_quote_query_params(&self, request: &QuoteRequest) -> std::vec::Vec<(std::string::String, std::string::String)> {
    |
help: ...and then change returning expressions
    |
229 -         Ok(params)
229 +         params
    |

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
   --> src\apis\jupiter\client.rs:243:63
    |
243 |             let sleep_duration = Duration::from_millis(1000 / self.config.rate_limit_rps as u64);
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
    |
243 -             let sleep_duration = Duration::from_millis(1000 / self.config.rate_limit_rps as u64);
243 +             let sleep_duration = Duration::from_millis(1000 / u64::from(self.config.rate_limit_rps));
    |

warning: this method could have a `#[must_use]` attribute
  --> src\apis\price_feeds.rs:24:5
   |
24 |     pub fn new(config: &SimpleConfig) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: &SimpleConfig) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: variables can be used directly in the `format!` string
  --> src\apis\price_feeds.rs:47:21
   |
47 |                 Err(format!("DexScreener connectivity failed: {}", e))
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
47 -                 Err(format!("DexScreener connectivity failed: {}", e))
47 +                 Err(format!("DexScreener connectivity failed: {e}"))
   |

warning: temporary with significant `Drop` can be early dropped
  --> src\apis\price_feeds.rs:56:17
   |
53 |       pub async fn update_prices(&self) -> Result<()> {
   |  _____________________________________________________-
54 | |         debug!("Updating prices from all sources...");
55 | |         
56 | |         let mut market_data = self.market_data.write().await;
   | |                 ^^^^^^^^^^^
...  |
78 | |         Ok(())
79 | |     }
   | |_____- temporary `market_data` is currently being dropped at the end of its contained scope
   |
   = note: this might lead to unnecessary resource contention
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
   |
71 ~         market_data.set_liquidity("USDC".to_string(), 10_000_000.0);
72 ~         drop(market_data); // Mock liquidity
   |

warning: variables can be used directly in the `format!` string
   --> src\apis\price_feeds.rs:101:28
    |
101 |             .ok_or_else(|| format!("Price not available for token: {}", symbol))
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
101 -             .ok_or_else(|| format!("Price not available for token: {}", symbol))
101 +             .ok_or_else(|| format!("Price not available for token: {symbol}"))
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\price_feeds.rs:109:28
    |
109 |             .ok_or_else(|| format!("Volume not available for token: {}", symbol))
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
109 -             .ok_or_else(|| format!("Volume not available for token: {}", symbol))
109 +             .ok_or_else(|| format!("Volume not available for token: {symbol}"))
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\price_feeds.rs:117:28
    |
117 |             .ok_or_else(|| format!("Liquidity not available for token: {}", symbol))
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
117 -             .ok_or_else(|| format!("Liquidity not available for token: {}", symbol))
117 +             .ok_or_else(|| format!("Liquidity not available for token: {symbol}"))
    |

warning: this method could have a `#[must_use]` attribute
  --> src\apis\real_price_feeds.rs:56:5
   |
56 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unchecked subtraction of a 'Duration' from an 'Instant'
  --> src\apis\real_price_feeds.rs:72:57
   |
72 |             last_coingecko_request: Arc::new(Mutex::new(std::time::Instant::now() - Duration::from_secs(60))),
   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::time::Instant::now().checked_sub(Duration::from_secs(60)).unwrap()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction

warning: the function has a cognitive complexity of (37/30)
   --> src\apis\real_price_feeds.rs:110:14
    |
110 |     async fn check_token_arbitrage(&self, symbol: &str, mint: &str) -> Result<Vec<RealArbitrageOpportunity>> {
    |              ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: the function has a cognitive complexity of (76/30)
   --> src\apis\real_price_feeds.rs:162:14
    |
162 |     async fn get_multi_dex_prices(&self, mint: &str) -> Result<Vec<DEXPrice>> {
    |              ^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: item in documentation is missing backticks
   --> src\apis\real_price_feeds.rs:255:28
    |
255 |     /// Obtener precios de DexScreener (implementaci├│n simplificada)
    |                            ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
255 -     /// Obtener precios de DexScreener (implementaci├│n simplificada)
255 +     /// Obtener precios de `DexScreener` (implementaci├│n simplificada)
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\real_price_feeds.rs:257:19
    |
257 |         let url = format!("https://api.dexscreener.com/latest/dex/tokens/{}", mint);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
257 -         let url = format!("https://api.dexscreener.com/latest/dex/tokens/{}", mint);
257 +         let url = format!("https://api.dexscreener.com/latest/dex/tokens/{mint}");
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\real_price_feeds.rs:273:35
    |
273 |                         dex_name: format!("DexScreener_{}", dex_id),
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
273 -                         dex_name: format!("DexScreener_{}", dex_id),
273 +                         dex_name: format!("DexScreener_{dex_id}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\real_price_feeds.rs:298:19
    |
298 |         let url = format!("https://api.coinbase.com/v2/exchange-rates?currency={}", symbol);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
298 -         let url = format!("https://api.coinbase.com/v2/exchange-rates?currency={}", symbol);
298 +         let url = format!("https://api.coinbase.com/v2/exchange-rates?currency={symbol}");
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\real_price_feeds.rs:321:19
    |
321 |         let url = format!("https://price.jup.ag/v4/price?ids={}", mint);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
321 -         let url = format!("https://price.jup.ag/v4/price?ids={}", mint);
321 +         let url = format!("https://price.jup.ag/v4/price?ids={mint}");
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\real_price_feeds.rs:363:21
    |
363 |             source: format!("Fallback ({})", symbol),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
363 -             source: format!("Fallback ({})", symbol),
363 +             source: format!("Fallback ({symbol})"),
    |

warning: item in documentation is missing backticks
 --> src\apis\multi_price_feeds.rs:1:64
  |
1 | //! Sistema Multi-Proveedor de Precios - Alternativa robusta a CoinGecko
  |                                                                ^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
1 - //! Sistema Multi-Proveedor de Precios - Alternativa robusta a CoinGecko
1 + //! Sistema Multi-Proveedor de Precios - Alternativa robusta a `CoinGecko`
  |

warning: unchecked subtraction of a 'Duration' from an 'Instant'
   --> src\apis\multi_price_feeds.rs:104:19
    |
104 |         let now = Instant::now() - Duration::from_secs(60);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Instant::now().checked_sub(Duration::from_secs(60)).unwrap()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction

warning: the function has a cognitive complexity of (63/30)
   --> src\apis\multi_price_feeds.rs:121:18
    |
121 |     pub async fn get_token_price(&self, token_symbol: &str) -> Result<f64> {
    |                  ^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: calling `to_string` on `&&str`
   --> src\apis\multi_price_feeds.rs:205:35
    |
205 |                     prices.insert(token.to_string(), price);
    |                                   ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*token).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: enclosing `Ok` and `?` operator are unneeded
   --> src\apis\multi_price_feeds.rs:262:20
    |
262 |             return Ok(self.simulate_helius_price(token_symbol)?);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark
    = note: `#[warn(clippy::needless_question_mark)]` implied by `#[warn(clippy::all)]`
help: remove the enclosing `Ok` and `?` operator
    |
262 -             return Ok(self.simulate_helius_price(token_symbol)?);
262 +             return self.simulate_helius_price(token_symbol);
    |

warning: the function has a cognitive complexity of (37/30)
   --> src\apis\multi_price_feeds.rs:268:14
    |
268 |     async fn fetch_price_from_jupiter(&self, token_symbol: &str) -> Result<f64> {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: variables can be used directly in the `format!` string
   --> src\apis\multi_price_feeds.rs:287:37
    |
287 |                   let quote_request = format!(
    |  _____________________________________^
288 | |                     "https://quote-api.jup.ag/v6/quote?inputMint={}&outputMint={}&amount={}",
289 | |                     input_mint, output_mint, amount
290 | |                 );
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args

warning: item in documentation is missing backticks
   --> src\apis\multi_price_feeds.rs:372:30
    |
372 |     /// Obtener precio desde DexScreener (backup universal)
    |                              ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
372 -     /// Obtener precio desde DexScreener (backup universal)
372 +     /// Obtener precio desde `DexScreener` (backup universal)
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\multi_price_feeds.rs:381:19
    |
381 |         let url = format!("https://api.dexscreener.com/latest/dex/tokens/{}", token_mint);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
381 -         let url = format!("https://api.dexscreener.com/latest/dex/tokens/{}", token_mint);
381 +         let url = format!("https://api.dexscreener.com/latest/dex/tokens/{token_mint}");
    |

warning: variables can be used directly in the `format!` string
   --> src\apis\multi_price_feeds.rs:421:19
    |
421 |         let url = format!("https://hermes.pyth.network/api/latest_price_feeds?ids[]={}", price_feed_id);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
421 -         let url = format!("https://hermes.pyth.network/api/latest_price_feeds?ids[]={}", price_feed_id);
421 +         let url = format!("https://hermes.pyth.network/api/latest_price_feeds?ids[]={price_feed_id}");
    |

warning: the function has a cognitive complexity of (69/30)
   --> src\apis\multi_price_feeds.rs:446:14
    |
446 |     async fn fetch_multiple_from_helius(&self, tokens: &[&str]) -> Result<HashMap<String, f64>> {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: calling `to_string` on `&&str`
   --> src\apis\multi_price_feeds.rs:460:35
    |
460 |                     prices.insert(token.to_string(), price);
    |                                   ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*token).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: calling `to_string` on `&&str`
   --> src\apis\multi_price_feeds.rs:472:35
    |
472 |                     prices.insert(token.to_string(), price);
    |                                   ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*token).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: calling `to_string` on `&&str`
   --> src\apis\multi_price_feeds.rs:481:43
    |
481 | ...                   prices.insert(token.to_string(), price);
    |                                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*token).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: calling `to_string` on `&&str`
   --> src\apis\multi_price_feeds.rs:488:51
    |
488 | ...                   prices.insert(token.to_string(), price);
    |                                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*token).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: calling `to_string` on `&&str`
   --> src\apis\multi_price_feeds.rs:494:55
    |
494 | ...                   prices.insert(token.to_string(), price);
    |                                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*token).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: unused `self` argument
   --> src\apis\multi_price_feeds.rs:529:23
    |
529 |     fn get_token_mint(&self, token_symbol: &str) -> Result<String> {
    |                       ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this match arm has an identical body to another arm
   --> src\apis\multi_price_feeds.rs:543:13
    |
543 |             "ETH" => "7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs",  // Wrapped Ethereum (Portal)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
543 ~             "ETH" | "WETH" => "7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs",  // Wrapped Ethereum (Portal)
544 ~             // Alias for ETH
    |

warning: this method could have a `#[must_use]` attribute
   --> src\apis\multi_price_feeds.rs:573:5
    |
573 |     pub fn get_fallback_price(&self, token: &str) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_fallback_price(&self, token: &str) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\apis\multi_price_feeds.rs:578:5
    |
578 |     pub fn get_trading_config(&self) -> &crate::config::api_credentials::TradingConfigData {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_trading_config(&self) -> &crate::config::api_credentials::TradingConfigData`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\apis\multi_price_feeds.rs:578:5
    |
578 | /     pub fn get_trading_config(&self) -> &crate::config::api_credentials::TradingConfigData {
579 | |         &self.api_credentials.trading_config
580 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
578 |     pub const fn get_trading_config(&self) -> &crate::config::api_credentials::TradingConfigData {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\apis\multi_price_feeds.rs:583:5
    |
583 |     pub fn get_api_credentials(&self) -> &ApiCredentials {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_api_credentials(&self) -> &ApiCredentials`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\apis\multi_price_feeds.rs:583:5
    |
583 | /     pub fn get_api_credentials(&self) -> &ApiCredentials {
584 | |         &self.api_credentials
585 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
583 |     pub const fn get_api_credentials(&self) -> &ApiCredentials {
    |         +++++

warning: this method could have a `#[must_use]` attribute
  --> src\apis\stablecoin_monitor.rs:39:5
   |
39 |     pub fn new(depeg_threshold: f64) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(depeg_threshold: f64) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src\apis\stablecoin_monitor.rs:48:5
   |
48 |     pub fn with_api_key(mut self, api_key: String) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_api_key(mut self, api_key: String) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src\apis\stablecoin_monitor.rs:48:5
   |
48 | /     pub fn with_api_key(mut self, api_key: String) -> Self {
49 | |         self.api_key = Some(api_key);
50 | |         self
51 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: item in documentation is missing backticks
  --> src\apis\stablecoin_monitor.rs:53:46
   |
53 |     /// Get real-time stablecoin prices from CoinGecko
   |                                              ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
53 -     /// Get real-time stablecoin prices from CoinGecko
53 +     /// Get real-time stablecoin prices from `CoinGecko`
   |

warning: variables can be used directly in the `format!` string
  --> src\apis\stablecoin_monitor.rs:69:21
   |
69 |                     eprintln!("ÔÜá´©Å Failed to fetch {} price: {}", symbol, e);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
69 -                     eprintln!("ÔÜá´©Å Failed to fetch {} price: {}", symbol, e);
69 +                     eprintln!("ÔÜá´©Å Failed to fetch {symbol} price: {e}");
   |

warning: item in documentation is missing backticks
  --> src\apis\stablecoin_monitor.rs:87:31
   |
87 |     /// Fetch real price from CoinGecko API
   |                               ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
87 -     /// Fetch real price from CoinGecko API
87 +     /// Fetch real price from `CoinGecko` API
   |

warning: variables can be used directly in the `format!` string
  --> src\apis\stablecoin_monitor.rs:90:19
   |
90 |           let url = format!(
   |  ___________________^
91 | |             "https://api.coingecko.com/api/v3/simple/price?ids={}&vs_currencies=usd&include_market_cap=true&include_24hr_vol=true",
92 | |             coin_id
93 | |         );
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args

warning: this method could have a `#[must_use]` attribute
   --> src\apis\stablecoin_monitor.rs:117:5
    |
117 |     pub fn get_real_price(&self, symbol: &str) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_real_price(&self, symbol: &str) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: called `map(<f>).unwrap_or(<a>)` on an `Option` value
   --> src\apis\stablecoin_monitor.rs:118:9
    |
118 | /         self.prices
119 | |             .get(symbol)
120 | |             .map(|p| p.current_price)
121 | |             .unwrap_or(1.0)
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or
    = note: `#[warn(clippy::map_unwrap_or)]` implied by `#[warn(clippy::pedantic)]`
help: use `map_or(<a>, <f>)` instead
    |
120 -             .map(|p| p.current_price)
120 +             .map_or(1.0, |p| p.current_price)
    |

warning: this method could have a `#[must_use]` attribute
   --> src\apis\stablecoin_monitor.rs:125:5
    |
125 |     pub fn scan_depeg_opportunities(&self) -> Vec<DepegEvent> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn scan_depeg_opportunities(&self) -> Vec<DepegEvent>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unused `self` argument
   --> src\apis\stablecoin_monitor.rs:150:36
    |
150 |     fn calculate_depeg_opportunity(&self, price_info: &StablecoinPrice) -> f64 {
    |                                    ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this method could have a `#[must_use]` attribute
   --> src\apis\stablecoin_monitor.rs:161:5
    |
161 |     pub fn get_all_prices(&self) -> HashMap<String, f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_all_prices(&self) -> HashMap<String, f64>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\apis\stablecoin_monitor.rs:169:5
    |
169 |     pub fn has_depegged_stablecoins(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn has_depegged_stablecoins(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\apis\stablecoin_monitor.rs:174:5
    |
174 |     pub fn get_stablecoin_info(&self, symbol: &str) -> Option<&StablecoinPrice> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_stablecoin_info(&self, symbol: &str) -> Option<&StablecoinPrice>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: `format!` in `println!` args
   --> src\apis\stablecoin_monitor.rs:193:13
    |
193 | /             println!("Ôòæ {} Ôöé ${:.4} Ôöé {:+.3}% Ôöé {} Ôòæ",
194 | |                 format!("{:<4}", symbol),
195 | |                 price_info.current_price,
196 | |                 price_info.deviation_from_peg,
197 | |                 status_emoji
198 | |             );
    | |_____________^
    |
    = help: combine the `format!(..)` arguments with the outer `println!(..)` call
    = help: or consider changing `format!` to `format_args!`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args
    = note: `#[warn(clippy::format_in_format_args)]` implied by `#[warn(clippy::all)]`

warning: this method could have a `#[must_use]` attribute
  --> src\apis\rate_limiter.rs:19:5
   |
19 |     pub fn new(max_requests_per_second: u32, cooldown_duration: Duration) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(max_requests_per_second: u32, cooldown_duration: Duration) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
  --> src\apis\rate_limiter.rs:36:21
   |
35 | /         {
36 | |             let mut last_reset = self.last_reset.lock().await;
   | |                     ^^^^^^^^^^
37 | |             if now.duration_since(*last_reset) >= self.window_duration {
...  |
49 | |         }
   | |_________- temporary `last_reset` is currently being dropped at the end of its contained scope
   |
   = note: this might lead to unnecessary resource contention
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
   |
46 ~                 *last_reset = now;
47 +                 drop(last_reset);
   |

warning: this method could have a `#[must_use]` attribute
  --> src\apis\rate_limiter.rs:65:5
   |
65 |     pub fn try_acquire(&self) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn try_acquire(&self) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\apis\rate_limiter.rs:109:5
    |
109 |     pub fn utilization(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn utilization(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\apis\rate_limiter.rs:118:5
    |
118 |     pub fn is_near_capacity(&self, threshold: f64) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_near_capacity(&self, threshold: f64) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\apis\rate_limiter.rs:136:5
    |
136 | /     pub fn new(
137 | |         initial_requests_per_second: u32,
138 | |         cooldown_duration: Duration,
139 | |         max_response_time: Duration,
140 | |     ) -> Self {
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
    |
136 |     #[must_use] pub fn new(
    |     +++++++++++

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\apis\rate_limiter.rs:183:29
    |
183 |             let decrease = (current_rate as f64 * self.adjustment_factor) as u32;
    |                             ^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
183 -             let decrease = (current_rate as f64 * self.adjustment_factor) as u32;
183 +             let decrease = (f64::from(current_rate) * self.adjustment_factor) as u32;
    |

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\apis\rate_limiter.rs:187:29
    |
187 |             let increase = (current_rate as f64 * self.adjustment_factor) as u32;
    |                             ^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
187 -             let increase = (current_rate as f64 * self.adjustment_factor) as u32;
187 +             let increase = (f64::from(current_rate) * self.adjustment_factor) as u32;
    |

warning: unnecessary boolean `not` operation
   --> src\apis\rate_limiter.rs:203:33
    |
203 |           let avg_response_time = if !self.response_times.is_empty() {
    |  _________________________________^
204 | |             Some(self.response_times.iter().sum::<Duration>() / self.response_times.len() as u32)
205 | |         } else {
206 | |             None
207 | |         };
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
    |
203 ~         let avg_response_time = if self.response_times.is_empty() {
204 +             None
205 +         } else {
206 +             Some(self.response_times.iter().sum::<Duration>() / self.response_times.len() as u32)
207 ~         };
    |

warning: item in documentation is missing backticks
 --> src\security\mod.rs:3:82
  |
3 | //! This module provides a comprehensive enterprise-grade security framework for SniperForge,
  |                                                                                  ^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
3 - //! This module provides a comprehensive enterprise-grade security framework for SniperForge,
3 + //! This module provides a comprehensive enterprise-grade security framework for `SniperForge`,
  |

warning: item in documentation is missing backticks
  --> src\security\secrets.rs:80:25
   |
80 |     /// Type of secret (api_key, private_key, password, etc.)
   |                         ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
80 -     /// Type of secret (api_key, private_key, password, etc.)
80 +     /// Type of secret (`api_key`, private_key, password, etc.)
   |

warning: item in documentation is missing backticks
  --> src\security\secrets.rs:80:34
   |
80 |     /// Type of secret (api_key, private_key, password, etc.)
   |                                  ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
80 -     /// Type of secret (api_key, private_key, password, etc.)
80 +     /// Type of secret (api_key, `private_key`, password, etc.)
   |

warning: casting `u64` to `i64` may wrap around the value
   --> src\security\secrets.rs:168:55
    |
168 |             Some(Utc::now() + chrono::Duration::hours(self.config.rotation_interval_hours as i64))
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap
    = note: `#[warn(clippy::cast_possible_wrap)]` implied by `#[warn(clippy::pedantic)]`

warning: the borrowed expression implements the required traits
   --> src\security\secrets.rs:176:53
    |
176 |             nonce: general_purpose::STANDARD.encode(&nonce),
    |                                                     ^^^^^^ help: change this to: `nonce`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args
    = note: `#[warn(clippy::needless_borrows_for_generic_args)]` implied by `#[warn(clippy::all)]`

warning: casting `u64` to `i64` may wrap around the value
   --> src\security\secrets.rs:192:64
    |
192 |             expires_at: Utc::now() + chrono::Duration::seconds(self.config.cache_ttl as i64),
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: variables can be used directly in the `format!` string
   --> src\security\secrets.rs:196:9
    |
196 |         log::info!("Secret '{}' stored successfully with type '{}'", name, secret_type);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
196 -         log::info!("Secret '{}' stored successfully with type '{}'", name, secret_type);
196 +         log::info!("Secret '{name}' stored successfully with type '{secret_type}'");
    |

warning: casting `u64` to `i64` may wrap around the value
   --> src\security\secrets.rs:220:68
    |
220 |                 expires_at: Utc::now() + chrono::Duration::seconds(self.config.cache_ttl as i64),
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: variables can be used directly in the `format!` string
   --> src\security\secrets.rs:256:13
    |
256 |             log::info!("Secret '{}' rotated successfully", name);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
256 -             log::info!("Secret '{}' rotated successfully", name);
256 +             log::info!("Secret '{name}' rotated successfully");
    |

warning: unnecessary `Debug` formatting in `info!` args
   --> src\security\secrets.rs:296:52
    |
296 |         log::info!("Secrets backup created: {:?}", backup_path);
    |                                                    ^^^^^^^^^^^
    |
    = help: use `Display` formatting and change this to `backup_path.display()`
    = note: switching to `Display` formatting will change how the value is shown; escaped characters will no longer be escaped and surrounding quotes will be removed
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_debug_formatting

warning: variables can be used directly in the `format!` string
   --> src\security\secrets.rs:296:9
    |
296 |         log::info!("Secrets backup created: {:?}", backup_path);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
296 -         log::info!("Secrets backup created: {:?}", backup_path);
296 +         log::info!("Secrets backup created: {backup_path:?}");
    |

warning: unnecessary `Debug` formatting in `info!` args
   --> src\security\secrets.rs:383:54
    |
383 |         log::info!("Created new secrets file: {:?}", self.secrets_path);
    |                                                      ^^^^^^^^^^^^^^^^^
    |
    = help: use `Display` formatting and change this to `self.secrets_path.display()`
    = note: switching to `Display` formatting will change how the value is shown; escaped characters will no longer be escaped and surrounding quotes will be removed
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_debug_formatting

warning: variables can be used directly in the `format!` string
   --> src\security\secrets.rs:403:14
    |
403 |             &format!("API key for {}", service),
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
403 -             &format!("API key for {}", service),
403 +             &format!("API key for {service}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\secrets.rs:425:14
    |
425 |             &format!("RPC URL for {} network", network),
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
425 -             &format!("RPC URL for {} network", network),
425 +             &format!("RPC URL for {network} network"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\secrets.rs:432:26
    |
432 |         self.get_secret(&format!("{}_api_key", service)).await
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
432 -         self.get_secret(&format!("{}_api_key", service)).await
432 +         self.get_secret(&format!("{service}_api_key")).await
    |

warning: variables can be used directly in the `format!` string
   --> src\security\secrets.rs:437:26
    |
437 |         self.get_secret(&format!("{}_private_key", name)).await
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
437 -         self.get_secret(&format!("{}_private_key", name)).await
437 +         self.get_secret(&format!("{name}_private_key")).await
    |

warning: variables can be used directly in the `format!` string
   --> src\security\secrets.rs:442:26
    |
442 |         self.get_secret(&format!("{}_rpc_url", network)).await
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
442 -         self.get_secret(&format!("{}_rpc_url", network)).await
442 +         self.get_secret(&format!("{network}_rpc_url")).await
    |

warning: item in documentation is missing backticks
   --> src\security\keystore.rs:156:32
    |
156 |     /// Type of event (unlock, key_access, key_created, etc.)
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
156 -     /// Type of event (unlock, key_access, key_created, etc.)
156 +     /// Type of event (unlock, `key_access`, key_created, etc.)
    |

warning: item in documentation is missing backticks
   --> src\security\keystore.rs:156:44
    |
156 |     /// Type of event (unlock, key_access, key_created, etc.)
    |                                            ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
156 -     /// Type of event (unlock, key_access, key_created, etc.)
156 +     /// Type of event (unlock, key_access, `key_created`, etc.)
    |

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:206:62
    |
206 |                 self.log_audit_event("unlock_failed", None, &format!("Failed unlock attempt: {}", e)).await?;
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
206 -                 self.log_audit_event("unlock_failed", None, &format!("Failed unlock attempt: {}", e)).await?;
206 +                 self.log_audit_event("unlock_failed", None, &format!("Failed unlock attempt: {e}")).await?;
    |

warning: casting `u64` to `i64` may wrap around the value
   --> src\security\keystore.rs:254:64
    |
254 |             expires_at: Utc::now() + chrono::Duration::seconds(self.config.key_cache_ttl as i64),
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:261:9
    |
261 |         log::info!("Private key '{}' stored securely", key_id);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
261 -         log::info!("Private key '{}' stored securely", key_id);
261 +         log::info!("Private key '{key_id}' stored securely");
    |

warning: casting `u64` to `i64` may wrap around the value
   --> src\security\keystore.rs:292:68
    |
292 |                 expires_at: Utc::now() + chrono::Duration::seconds(self.config.key_cache_ttl as i64),
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:330:26
    |
330 |             description: format!("Generated Ed25519 keypair for {}", network),
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
330 -             description: format!("Generated Ed25519 keypair for {}", network),
330 +             description: format!("Generated Ed25519 keypair for {network}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:342:9
    |
342 |         log::info!("Generated new Solana keypair: {}", key_id);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
342 -         log::info!("Generated new Solana keypair: {}", key_id);
342 +         log::info!("Generated new Solana keypair: {key_id}");
    |

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:368:26
    |
368 |             description: format!("{}-word BIP39 mnemonic seed phrase", word_count),
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
368 -             description: format!("{}-word BIP39 mnemonic seed phrase", word_count),
368 +             description: format!("{word_count}-word BIP39 mnemonic seed phrase"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:380:9
    |
380 |         log::info!("Generated new {}-word mnemonic: {}", word_count, key_id);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
380 -         log::info!("Generated new {}-word mnemonic: {}", word_count, key_id);
380 +         log::info!("Generated new {word_count}-word mnemonic: {key_id}");
    |

warning: the borrowed expression implements the required traits
   --> src\security\keystore.rs:409:23
    |
409 |         hasher.update(&seed);
    |                       ^^^^^ help: change this to: `seed`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:418:26
    |
418 |             description: format!("Derived from mnemonic at path {}", derivation_path),
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
418 -             description: format!("Derived from mnemonic at path {}", derivation_path),
418 +             description: format!("Derived from mnemonic at path {derivation_path}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:430:9
    |
430 | /         log::info!("Derived key '{}' from mnemonic '{}' at path '{}'", 
431 | |                   derived_key_id, mnemonic_key_id, derivation_path);
    | |___________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args

warning: unnecessary `Debug` formatting in `format!` args
   --> src\security\keystore.rs:444:87
    |
444 |         self.log_audit_event("backup_created", None, &format!("Backup created: {:?}", backup_path)).await?;
    |                                                                                       ^^^^^^^^^^^
    |
    = help: use `Display` formatting and change this to `backup_path.display()`
    = note: switching to `Display` formatting will change how the value is shown; escaped characters will no longer be escaped and surrounding quotes will be removed
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_debug_formatting

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:444:55
    |
444 |         self.log_audit_event("backup_created", None, &format!("Backup created: {:?}", backup_path)).await?;
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
444 -         self.log_audit_event("backup_created", None, &format!("Backup created: {:?}", backup_path)).await?;
444 +         self.log_audit_event("backup_created", None, &format!("Backup created: {backup_path:?}")).await?;
    |

warning: unnecessary `Debug` formatting in `info!` args
   --> src\security\keystore.rs:445:53
    |
445 |         log::info!("Keystore backup created: {:?}", backup_path);
    |                                                     ^^^^^^^^^^^
    |
    = help: use `Display` formatting and change this to `backup_path.display()`
    = note: switching to `Display` formatting will change how the value is shown; escaped characters will no longer be escaped and surrounding quotes will be removed
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_debug_formatting

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:445:9
    |
445 |         log::info!("Keystore backup created: {:?}", backup_path);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
445 -         log::info!("Keystore backup created: {:?}", backup_path);
445 +         log::info!("Keystore backup created: {backup_path:?}");
    |

warning: unused `self` argument
   --> src\security\keystore.rs:488:27
    |
488 |     fn serialize_key_data(&self, key_data: &PrivateKeyData) -> Result<Vec<u8>> {
    |                           ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src\security\keystore.rs:488:5
    |
488 | /     fn serialize_key_data(&self, key_data: &PrivateKeyData) -> Result<Vec<u8>> {
489 | |         match key_data {
490 | |             PrivateKeyData::Ed25519(bytes) => Ok(bytes.to_vec()),
491 | |             PrivateKeyData::Secp256k1(bytes) => Ok(bytes.to_vec()),
...   |
495 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
488 -     fn serialize_key_data(&self, key_data: &PrivateKeyData) -> Result<Vec<u8>> {
488 +     fn serialize_key_data(&self, key_data: &PrivateKeyData) -> std::vec::Vec<u8> {
    |
help: ...and then change returning expressions
    |
490 ~             PrivateKeyData::Ed25519(bytes) => bytes.to_vec(),
491 ~             PrivateKeyData::Secp256k1(bytes) => bytes.to_vec(),
492 ~             PrivateKeyData::Mnemonic(phrase) => phrase.as_bytes().to_vec(),
493 ~             PrivateKeyData::Raw(bytes) => bytes.clone(),
    |

warning: this match arm has an identical body to another arm
   --> src\security\keystore.rs:491:13
    |
491 |             PrivateKeyData::Secp256k1(bytes) => Ok(bytes.to_vec()),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
490 -             PrivateKeyData::Ed25519(bytes) => Ok(bytes.to_vec()),
491 -             PrivateKeyData::Secp256k1(bytes) => Ok(bytes.to_vec()),
490 +             PrivateKeyData::Secp256k1(bytes) | PrivateKeyData::Ed25519(bytes) => Ok(bytes.to_vec()),
    |

warning: unused `self` argument
   --> src\security\keystore.rs:497:29
    |
497 |     fn deserialize_key_data(&self, data: &[u8], key_type: &str) -> Result<PrivateKeyData> {
    |                             ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: the borrowed expression implements the required traits
   --> src\security\keystore.rs:543:53
    |
543 |             nonce: general_purpose::STANDARD.encode(&nonce),
    |                                                     ^^^^^^ help: change this to: `nonce`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args

warning: the borrowed expression implements the required traits
   --> src\security\keystore.rs:601:52
    |
601 |             salt: general_purpose::STANDARD.encode(&salt_bytes),
    |                                                    ^^^^^^^^^^^ help: change this to: `salt_bytes`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args

warning: redundant closure
   --> src\security\keystore.rs:618:32
    |
618 |             key_id: key_id.map(|s| s.to_string()),
    |                                ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::ToString::to_string`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: variables can be used directly in the `format!` string
   --> src\security\keystore.rs:623:9
    |
623 |         log::info!("Keystore audit: {} - {}", event_type, details);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
623 -         log::info!("Keystore audit: {} - {}", event_type, details);
623 +         log::info!("Keystore audit: {event_type} - {details}");
    |

warning: casts from `u32` to `i64` can be expressed infallibly using `From`
   --> src\security\keystore.rs:642:77
    |
642 |                 let lockout_until = last_failed + chrono::Duration::minutes(self.config.lockout_duration_minutes as i64);
    |                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i64::from` instead
    |
642 -                 let lockout_until = last_failed + chrono::Duration::minutes(self.config.lockout_duration_minutes as i64);
642 +                 let lockout_until = last_failed + chrono::Duration::minutes(i64::from(self.config.lockout_duration_minutes));
    |

warning: this could be a `const fn`
   --> src\security\validation.rs:111:5
    |
111 | /     fn new(max_per_minute: u32) -> Self {
112 | |         Self {
113 | |             requests: Vec::new(),
114 | |             max_per_minute,
115 | |         }
116 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
111 |     const fn new(max_per_minute: u32) -> Self {
    |     +++++

warning: variables can be used directly in the `format!` string
   --> src\security\validation.rs:304:38
    |
304 | ...                   message: format!("Price {} is unrealistically high", parsed_price),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
304 -                             message: format!("Price {} is unrealistically high", parsed_price),
304 +                             message: format!("Price {parsed_price} is unrealistically high"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\validation.rs:382:30
    |
382 |                     message: format!("Potential SQL injection pattern detected: {}", pattern),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
382 -                     message: format!("Potential SQL injection pattern detected: {}", pattern),
382 +                     message: format!("Potential SQL injection pattern detected: {pattern}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\validation.rs:404:30
    |
404 |                     message: format!("Potential JavaScript injection pattern detected: {}", pattern),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
404 -                     message: format!("Potential JavaScript injection pattern detected: {}", pattern),
404 +                     message: format!("Potential JavaScript injection pattern detected: {pattern}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\validation.rs:435:31
    |
435 |                 rule_applied: format!("api_response_{}", api_name),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
435 -                 rule_applied: format!("api_response_{}", api_name),
435 +                 rule_applied: format!("api_response_{api_name}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\validation.rs:557:46
    |
557 | ...                   message: format!("Host {} is not in allowed list", host),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
557 -                                     message: format!("Host {} is not in allowed list", host),
557 +                                     message: format!("Host {host} is not in allowed list"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\validation.rs:582:34
    |
582 |                         message: format!("Failed to parse URL: {}", e),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
582 -                         message: format!("Failed to parse URL: {}", e),
582 +                         message: format!("Failed to parse URL: {e}"),
    |

warning: unused `self` argument
   --> src\security\validation.rs:606:33
    |
606 |     fn validate_price_by_source(&self, price: f64, source: &str, errors: &mut Vec<ValidationError>) {
    |                                 ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: boolean expression will never evaluate to 'true'
   --> src\security\validation.rs:643:20
    |
643 |                 if price > 10_000.0 && price < 0.000_001 {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: since `10_000.0` > `0.000_001`, the expression evaluates to false for any value of `price`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impossible_comparisons
    = note: `#[warn(clippy::impossible_comparisons)]` implied by `#[warn(clippy::all)]`

warning: unused `self` argument
   --> src\security\validation.rs:657:9
    |
657 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this method could have a `#[must_use]` attribute
   --> src\security\validation.rs:725:5
    |
725 |     pub fn get_validation_stats(&self) -> ValidationStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_validation_stats(&self) -> ValidationStats`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: more than 3 bools in a struct
  --> src\security\auth.rs:66:1
   |
66 | / pub struct PasswordPolicy {
67 | |     /// Minimum password length
68 | |     pub min_length: usize,
69 | |     /// Require uppercase letters
...  |
78 | |     pub password_history_count: usize,
79 | | }
   | |_^
   |
   = help: consider using a state machine or refactoring bools into two-variant enums
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools

warning: you are deriving `PartialEq` and can implement `Eq`
   --> src\security\auth.rs:141:48
    |
141 | #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
    |                                                ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq

warning: this `impl` can be derived
   --> src\security\auth.rs:162:1
    |
162 | / impl Default for MfaSettings {
163 | |     fn default() -> Self {
164 | |         Self {
165 | |             enabled: false,
...   |
171 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls
help: replace the manual implementation with a derive attribute
    |
151 + #[derive(Default)]
152 ~ pub struct MfaSettings {
    |

warning: use of `or_insert_with` to construct default value
   --> src\security\auth.rs:272:66
    |
272 |         let ip_attempts = self.ip_attempts.entry(ip.to_string()).or_insert_with(Vec::new);
    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default
    = note: `#[warn(clippy::unwrap_or_default)]` implied by `#[warn(clippy::all)]`

warning: use of `or_insert_with` to construct default value
   --> src\security\auth.rs:280:84
    |
280 |         let username_attempts = self.username_attempts.entry(username.to_string()).or_insert_with(Vec::new);
    |                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default

warning: variables can be used directly in the `format!` string
   --> src\security\auth.rs:372:13
    |
372 |             log::info!("User registered: {} ({})", username, user_id);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
372 -             log::info!("User registered: {} ({})", username, user_id);
372 +             log::info!("User registered: {username} ({user_id})");
    |

warning: this could be rewritten as `let...else`
   --> src\security\auth.rs:403:9
    |
403 | /         let user = match self.users.values().find(|u| u.username == username).cloned() {
404 | |             Some(user) => user,
405 | |             None => {
406 | |                 return Ok(AuthResult {
...   |
416 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
    = note: `#[warn(clippy::manual_let_else)]` implied by `#[warn(clippy::pedantic)]`
help: consider writing
    |
403 ~         let Some(user) = self.users.values().find(|u| u.username == username).cloned() else {
404 +                 return Ok(AuthResult {
405 +                     success: false,
406 +                     user: None,
407 +                     access_token: None,
408 +                     refresh_token: None,
409 +                     session: None,
410 +                     error: Some("Invalid username or password".to_string()),
411 +                     mfa_required: false,
412 +                 });
413 +             };
    |

warning: variables can be used directly in the `format!` string
   --> src\security\auth.rs:440:41
    |
440 | ...                   error: Some(format!("Account is locked until {}", locked_until)),
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
440 -                             error: Some(format!("Account is locked until {}", locked_until)),
440 +                             error: Some(format!("Account is locked until {locked_until}")),
    |

warning: use Option::map_or_else instead of an if let/else
   --> src\security\auth.rs:558:9
    |
558 | /         if let Some(user) = self.users.get(user_id) {
559 | |             Ok(user.permissions.contains(permission))
560 | |         } else {
561 | |             Err(anyhow::anyhow!("User not found"))
562 | |         }
    | |_________^ help: try: `self.users.get(user_id).map_or_else(|| Err(anyhow::anyhow!("User not found")), |user| Ok(user.permissions.contains(permission)))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: use Option::map_or_else instead of an if let/else
   --> src\security\auth.rs:567:9
    |
567 | /         if let Some(user) = self.users.get(user_id) {
568 | |             Ok(user.roles.contains(role))
569 | |         } else {
570 | |             Err(anyhow::anyhow!("User not found"))
571 | |         }
    | |_________^ help: try: `self.users.get(user_id).map_or_else(|| Err(anyhow::anyhow!("User not found")), |user| Ok(user.roles.contains(role)))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: variables can be used directly in the `format!` string
   --> src\security\auth.rs:578:17
    |
578 |                 log::info!("User logged out: session {}", session_id);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
578 -                 log::info!("User logged out: session {}", session_id);
578 +                 log::info!("User logged out: session {session_id}");
    |

warning: variables can be used directly in the `format!` string
   --> src\security\auth.rs:624:13
    |
624 |             log::info!("Password changed for user: {}", user_id);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
624 -             log::info!("Password changed for user: {}", user_id);
624 +             log::info!("Password changed for user: {user_id}");
    |

warning: variables can be used directly in the `format!` string
   --> src\security\auth.rs:640:13
    |
640 |             log::info!("Cleaned up {} expired sessions", removed_count);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
640 -             log::info!("Cleaned up {} expired sessions", removed_count);
640 +             log::info!("Cleaned up {removed_count} expired sessions");
    |

warning: unused `self` argument
   --> src\security\auth.rs:648:26
    |
648 |     fn validate_username(&self, username: &str) -> Result<()> {
    |                          ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\security\auth.rs:660:23
    |
660 |     fn validate_email(&self, email: &str) -> Result<()> {
    |                       ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: redundant closure
   --> src\security\auth.rs:675:76
    |
675 |         if self.password_policy.require_uppercase && !password.chars().any(|c| c.is_uppercase()) {
    |                                                                            ^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::is_uppercase`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: redundant closure
   --> src\security\auth.rs:679:76
    |
679 |         if self.password_policy.require_lowercase && !password.chars().any(|c| c.is_lowercase()) {
    |                                                                            ^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::is_lowercase`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: redundant closure
   --> src\security\auth.rs:683:74
    |
683 |         if self.password_policy.require_numbers && !password.chars().any(|c| c.is_numeric()) {
    |                                                                          ^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::is_numeric`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: unused `self` argument
   --> src\security\auth.rs:695:22
    |
695 |     fn hash_password(&self, password: &str) -> Result<String> {
    |                      ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\security\auth.rs:705:24
    |
705 |     fn verify_password(&self, password: &str, hash: &str) -> Result<bool> {
    |                        ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\security\auth.rs:713:34
    |
713 |     fn get_permissions_for_roles(&self, roles: &[String]) -> HashSet<String> {
    |                                  ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\security\auth.rs:788:31
    |
788 |     fn generate_refresh_token(&self, user_id: &str, session_id: &str) -> Result<String> {
    |                               ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src\security\auth.rs:788:5
    |
788 | /     fn generate_refresh_token(&self, user_id: &str, session_id: &str) -> Result<String> {
789 | |         let mut hasher = Sha256::new();
790 | |         hasher.update(user_id.as_bytes());
791 | |         hasher.update(session_id.as_bytes());
...   |
795 | |         Ok(format!("{:x}", hash))
796 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
788 -     fn generate_refresh_token(&self, user_id: &str, session_id: &str) -> Result<String> {
788 +     fn generate_refresh_token(&self, user_id: &str, session_id: &str) -> std::string::String {
    |
help: ...and then change returning expressions
    |
795 -         Ok(format!("{:x}", hash))
795 +         format!("{:x}", hash)
    |

warning: variables can be used directly in the `format!` string
   --> src\security\auth.rs:795:12
    |
795 |         Ok(format!("{:x}", hash))
    |            ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
795 -         Ok(format!("{:x}", hash))
795 +         Ok(format!("{hash:x}"))
    |

warning: the loop variable `i` is only used to index `sessions_with_time`
   --> src\security\auth.rs:851:22
    |
851 |             for i in 0..sessions_to_remove {
    |                      ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop
    = note: `#[warn(clippy::needless_range_loop)]` implied by `#[warn(clippy::all)]`
help: consider using an iterator
    |
851 -             for i in 0..sessions_to_remove {
851 +             for <item> in sessions_with_time.iter().take(sessions_to_remove) {
    |

warning: this `impl` can be derived
   --> src\security\encryption.rs:174:1
    |
174 | / impl Default for EncryptionMetrics {
175 | |     fn default() -> Self {
176 | |         Self {
177 | |             encrypt_operations: 0,
...   |
187 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls
help: replace the manual implementation with a derive attribute
    |
155 + #[derive(Default)]
156 ~ pub struct EncryptionMetrics {
    |

warning: this method could have a `#[must_use]` attribute
   --> src\security\encryption.rs:237:5
    |
237 |     pub fn new(data: Vec<u8>, data_type: &str) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(data: Vec<u8>, data_type: &str) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\security\encryption.rs:246:5
    |
246 |     pub fn data(&self) -> &[u8] {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn data(&self) -> &[u8]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\security\encryption.rs:251:5
    |
251 |     pub fn data_type(&self) -> &str {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn data_type(&self) -> &str`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\security\encryption.rs:256:5
    |
256 |     pub fn into_data(mut self) -> Vec<u8> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn into_data(mut self) -> Vec<u8>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: redundant closure
   --> src\security\encryption.rs:354:34
    |
354 |             context: context.map(|s| s.to_string()),
    |                                  ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::ToString::to_string`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: this method could have a `#[must_use]` attribute
   --> src\security\encryption.rs:478:5
    |
478 |     pub fn get_metrics(&self) -> &EncryptionMetrics {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_metrics(&self) -> &EncryptionMetrics`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\security\encryption.rs:478:5
    |
478 | /     pub fn get_metrics(&self) -> &EncryptionMetrics {
479 | |         &self.metrics
480 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
478 |     pub const fn get_metrics(&self) -> &EncryptionMetrics {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\security\encryption.rs:483:5
    |
483 |     pub fn get_memory_stats(&self) -> &MemoryStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_memory_stats(&self) -> &MemoryStats`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\security\encryption.rs:483:5
    |
483 | /     pub fn get_memory_stats(&self) -> &MemoryStats {
484 | |         &self.memory_protector.stats
485 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
483 |     pub const fn get_memory_stats(&self) -> &MemoryStats {
    |         +++++

warning: unused `self` argument
   --> src\security\encryption.rs:531:23
    |
531 |     fn calculate_hmac(&self, data: &[u8], key: &[u8]) -> Result<Vec<u8>> {
    |                       ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\security\encryption.rs:545:22
    |
545 |     fn compress_data(&self, data: &[u8]) -> Result<Vec<u8>> {
    |                      ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src\security\encryption.rs:545:5
    |
545 | /     fn compress_data(&self, data: &[u8]) -> Result<Vec<u8>> {
546 | |         // Simple compression using flate2 (would need to add dependency)
547 | |         // For now, just return the original data
548 | |         Ok(data.to_vec())
549 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
545 -     fn compress_data(&self, data: &[u8]) -> Result<Vec<u8>> {
545 +     fn compress_data(&self, data: &[u8]) -> std::vec::Vec<u8> {
    |
help: ...and then change returning expressions
    |
548 -         Ok(data.to_vec())
548 +         data.to_vec()
    |

warning: unused `self` argument
   --> src\security\encryption.rs:551:24
    |
551 |     fn decompress_data(&self, data: &[u8]) -> Result<Vec<u8>> {
    |                        ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src\security\encryption.rs:551:5
    |
551 | /     fn decompress_data(&self, data: &[u8]) -> Result<Vec<u8>> {
552 | |         // Simple decompression using flate2 (would need to add dependency)
553 | |         // For now, just return the original data
554 | |         Ok(data.to_vec())
555 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
551 -     fn decompress_data(&self, data: &[u8]) -> Result<Vec<u8>> {
551 +     fn decompress_data(&self, data: &[u8]) -> std::vec::Vec<u8> {
    |
help: ...and then change returning expressions
    |
554 -         Ok(data.to_vec())
554 +         data.to_vec()
    |

warning: this could be a `const fn`
   --> src\security\encryption.rs:557:5
    |
557 | /     fn update_encrypt_metrics(&mut self, bytes: usize, elapsed_us: u64) {
558 | |         self.metrics.encrypt_operations += 1;
559 | |         self.metrics.bytes_encrypted += bytes as u64;
...   |
564 | |             (self.metrics.avg_encrypt_time_us * (total_ops - 1) + elapsed_us) / total_ops;
565 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
557 |     const fn update_encrypt_metrics(&mut self, bytes: usize, elapsed_us: u64) {
    |     +++++

warning: this could be a `const fn`
   --> src\security\encryption.rs:567:5
    |
567 | /     fn update_decrypt_metrics(&mut self, bytes: usize, elapsed_us: u64) {
568 | |         self.metrics.decrypt_operations += 1;
569 | |         self.metrics.bytes_decrypted += bytes as u64;
...   |
574 | |             (self.metrics.avg_decrypt_time_us * (total_ops - 1) + elapsed_us) / total_ops;
575 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
567 |     const fn update_decrypt_metrics(&mut self, bytes: usize, elapsed_us: u64) {
    |     +++++

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src\security\encryption.rs:579:5
    |
579 | /     fn new(config: &EncryptionConfig) -> Result<Self> {
580 | |         let kdf_params = KdfParams {
581 | |             salt: general_purpose::STANDARD.encode(&SaltString::generate(&mut ArgonRng).as_str()),
582 | |             iterations: config.key_derivation_iterations,
...   |
591 | |         })
592 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
579 -     fn new(config: &EncryptionConfig) -> Result<Self> {
579 +     fn new(config: &EncryptionConfig) -> security::encryption::KeyManager {
    |
help: ...and then change returning expressions
    |
587 ~         Self {
588 +             master_keys: HashMap::new(),
589 +             dek_cache: HashMap::new(),
590 +             kdf_params,
591 +         }
    |

warning: the borrowed expression implements the required traits
   --> src\security\encryption.rs:581:52
    |
581 |             salt: general_purpose::STANDARD.encode(&SaltString::generate(&mut ArgonRng).as_str()),
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `SaltString::generate(&mut ArgonRng).as_str()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args

warning: this match arm has an identical body to another arm
   --> src\security\encryption.rs:601:17
    |
601 |                 EncryptionAlgorithm::ChaCha20Poly1305 | EncryptionAlgorithm::XChaCha20Poly1305 => 32,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
600 -                 EncryptionAlgorithm::Aes256Gcm => 32,
601 -                 EncryptionAlgorithm::ChaCha20Poly1305 | EncryptionAlgorithm::XChaCha20Poly1305 => 32,
600 +                 EncryptionAlgorithm::ChaCha20Poly1305 | EncryptionAlgorithm::XChaCha20Poly1305 | EncryptionAlgorithm::Aes256Gcm => 32,
    |

warning: the borrowed expression implements the required traits
   --> src\security\encryption.rs:648:23
    |
648 |         hasher.update(&Utc::now().timestamp().to_le_bytes());
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `Utc::now().timestamp().to_le_bytes()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args

warning: the borrowed expression implements the required traits
   --> src\security\encryption.rs:666:65
    |
666 |         self.kdf_params.salt = general_purpose::STANDARD.encode(&SaltString::generate(&mut ArgonRng).as_str());
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `SaltString::generate(&mut ArgonRng).as_str()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args

warning: this could be a `const fn`
   --> src\security\encryption.rs:683:5
    |
683 | /     fn new(enabled: bool) -> Self {
684 | |         Self {
685 | |             enabled,
686 | |             stats: MemoryStats {
...   |
692 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
683 |     const fn new(enabled: bool) -> Self {
    |     +++++

warning: item in documentation is missing backticks
 --> src\security\risk_manager.rs:1:41
  |
1 | //! Advanced Risk Management System for SniperForge
  |                                         ^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
1 - //! Advanced Risk Management System for SniperForge
1 + //! Advanced Risk Management System for `SniperForge`
  |

warning: `if _ { .. } else { .. }` is an expression
   --> src\security\risk_manager.rs:176:9
    |
176 | /         let mut total_risk_score: f64 = 0.0;
177 | |         
178 | |         // 1. Verificar circuit breaker
179 | |         if self.circuit_breaker_active {
...   |
229 | |         }
    | |_________^ help: it is more idiomatic to write: `let <mut> total_risk_score = if self.circuit_breaker_active { ..; 1.0 } else { ..; 0.0 };`
    |
    = note: you might not need `mut` at all
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
    = note: `#[warn(clippy::useless_let_if_seq)]` implied by `#[warn(clippy::nursery)]`

warning: variables can be used directly in the `format!` string
   --> src\security\risk_manager.rs:278:30
    |
278 |                 description: format!("Posici├│n {:.1}% cerca del l├¡mite", position_pct),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
278 -                 description: format!("Posici├│n {:.1}% cerca del l├¡mite", position_pct),
278 +                 description: format!("Posici├│n {position_pct:.1}% cerca del l├¡mite"),
    |

warning: unused `self` argument
   --> src\security\risk_manager.rs:406:34
    |
406 |     fn assess_ml_confidence_risk(&self, confidence: f64) -> RiskFactor {
    |                                  ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\security\risk_manager.rs:439:36
    |
439 |             let reduction_factor = 1.0 - (risk_score - self.config.max_risk_score * 0.8) * 2.0;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(risk_score - self.config.max_risk_score * 0.8).mul_add(-2.0, 1.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\security\risk_manager.rs:439:42
    |
439 |             let reduction_factor = 1.0 - (risk_score - self.config.max_risk_score * 0.8) * 2.0;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `self.config.max_risk_score.mul_add(-0.8, risk_score)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: this method could have a `#[must_use]` attribute
   --> src\security\risk_manager.rs:469:5
    |
469 |     pub fn get_risk_stats(&self) -> &RiskStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_risk_stats(&self) -> &RiskStats`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\security\risk_manager.rs:469:5
    |
469 | /     pub fn get_risk_stats(&self) -> &RiskStats {
470 | |         &self.stats
471 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
469 |     pub const fn get_risk_stats(&self) -> &RiskStats {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\security\risk_manager.rs:474:5
    |
474 |     pub fn is_circuit_breaker_active(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_circuit_breaker_active(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\security\risk_manager.rs:474:5
    |
474 | /     pub fn is_circuit_breaker_active(&self) -> bool {
475 | |         self.circuit_breaker_active
476 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
474 |     pub const fn is_circuit_breaker_active(&self) -> bool {
    |         +++++

warning: item in documentation is missing backticks
 --> src\security\wallet\mod.rs:3:78
  |
3 | //! This module provides enterprise-grade wallet management capabilities for SniperForge,
  |                                                                              ^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
3 - //! This module provides enterprise-grade wallet management capabilities for SniperForge,
3 + //! This module provides enterprise-grade wallet management capabilities for `SniperForge`,
  |

warning: temporary with significant `Drop` can be early dropped
   --> src\security\wallet\mod.rs:142:17
    |
138 |       pub async fn stop(&self) -> Result<()> {
    |  ____________________________________________-
139 | |         info!("­ƒøæ Stopping Enterprise Wallet Manager");
...   |
142 | |         let mut wallets = self.wallets.write().await;
    | |                 ^^^^^^^
...   |
148 | |         Ok(())
149 | |     }
    | |_____- temporary `wallets` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
142 ~         
143 +         self.wallets.write().await.;
144 ~         
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\security\wallet\mod.rs:167:17
    |
152 |       pub async fn add_wallet(&self, config: WalletConfig) -> Result<()> {
    |  ________________________________________________________________________-
153 | |         let keypair = self.load_keypair(&config).await?;
154 | |         let pubkey = keypair.pubkey();
...   |
167 | |         let mut wallets = self.wallets.write().await;
    | |                 ^^^^^^^
...   |
171 | |         Ok(())
172 | |     }
    | |_____- temporary `wallets` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
167 ~         
168 +         self.wallets.write().await.insert(config.name.clone(), wallet);
169 ~         
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\security\wallet\mod.rs:206:17
    |
194 |           if let Some(wallet) = wallets.get(wallet_name) {
    |  ________________________________________________________-
195 | |             // Check if wallet is locked
196 | |             if wallet.is_locked {
197 | |                 return Ok(false);
...   |
206 | |             let daily_volumes = self.daily_volumes.read().await;
    | |                 ^^^^^^^^^^^^^
...   |
218 | |             Ok(true)
219 | |         } else {
    | |_________- temporary `daily_volumes` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
206 ~             
207 +             let current_volume = self.daily_volumes.read().await.unwrap_or(&0.0);
208 ~             
    |

warning: used `cloned` where `copied` could be used instead
   --> src\security\wallet\mod.rs:258:69
    |
258 |                 let current_volume = daily_volumes.get(wallet_name).cloned().unwrap_or(0.0);
    |                                                                     ^^^^^^ help: try: `copied`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied
    = note: `#[warn(clippy::cloned_instead_of_copied)]` implied by `#[warn(clippy::pedantic)]`

warning: temporary with significant `Drop` can be early dropped
   --> src\security\wallet\mod.rs:304:17
    |
299 |       pub async fn emergency_stop(&self, reason: String) -> Result<()> {
    |  ______________________________________________________________________-
300 | |         error!("­ƒÜ¿ EMERGENCY STOP TRIGGERED: {}", reason);
301 | |
302 | |         *self.emergency_stop.write().await = true;
303 | |
304 | |         let mut wallets = self.wallets.write().await;
    | |                 ^^^^^^^
...   |
311 | |         Ok(())
312 | |     }
    | |_____- temporary `wallets` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
304 ~         
305 +         self.wallets.write().await.;
306 ~         
    |

warning: variables can be used directly in the `format!` string
   --> src\security\wallet\mod.rs:307:39
    |
307 |             wallet.lock_reason = Some(format!("Emergency stop: {}", reason));
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
307 -             wallet.lock_reason = Some(format!("Emergency stop: {}", reason));
307 +             wallet.lock_reason = Some(format!("Emergency stop: {reason}"));
    |

warning: use Option::map_or_else instead of an if let/else
   --> src\security\wallet\mod.rs:379:9
    |
379 | /         if let Some(wallet) = wallets.get(wallet_name) {
380 | |             Ok(wallet.pubkey.to_string())
381 | |         } else {
382 | |             Err(
...   |
386 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
379 ~         wallets.get(wallet_name).map_or_else(|| Err(
380 +                 PlatformError::WalletManagement(format!("Wallet '{}' not found", wallet_name))
381 +                     .into(),
382 +             ), |wallet| Ok(wallet.pubkey.to_string()))
    |

warning: variables can be used directly in the `format!` string
   --> src\security\wallet\mod.rs:383:49
    |
383 |                 PlatformError::WalletManagement(format!("Wallet '{}' not found", wallet_name))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
383 -                 PlatformError::WalletManagement(format!("Wallet '{}' not found", wallet_name))
383 +                 PlatformError::WalletManagement(format!("Wallet '{wallet_name}' not found"))
    |

warning: use Option::map_or_else instead of an if let/else
   --> src\security\wallet\mod.rs:392:9
    |
392 | /         if let Some(wallet) = wallets.get(wallet_name) {
393 | |             Ok(wallet.keypair.clone())
394 | |         } else {
395 | |             Err(
...   |
399 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
392 ~         wallets.get(wallet_name).map_or_else(|| Err(
393 +                 PlatformError::WalletManagement(format!("Wallet '{}' not found", wallet_name))
394 +                     .into(),
395 +             ), |wallet| Ok(wallet.keypair.clone()))
    |

warning: variables can be used directly in the `format!` string
   --> src\security\wallet\mod.rs:396:49
    |
396 |                 PlatformError::WalletManagement(format!("Wallet '{}' not found", wallet_name))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
396 -                 PlatformError::WalletManagement(format!("Wallet '{}' not found", wallet_name))
396 +                 PlatformError::WalletManagement(format!("Wallet '{wallet_name}' not found"))
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\security\wallet\mod.rs:410:13
    |
403 |       pub async fn get_main_wallet_address(&self) -> Result<String> {
    |  ___________________________________________________________________-
404 | |         // Try to get trading wallet first
405 | |         if let Ok(address) = self.get_wallet_address("trading").await {
406 | |             return Ok(address);
...   |
410 | |         let wallets = self.wallets.read().await;
    | |             ^^^^^^^
...   |
415 | |         Err(PlatformError::WalletManagement("No wallets available".to_string()).into())
416 | |     }
    | |_____- temporary `wallets` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
410 ~         
411 +         self.wallets.read().await.;
412 ~         
    |

warning: variables can be used directly in the `format!` string
   --> src\security\wallet\mod.rs:423:49
    |
423 |                 PlatformError::WalletManagement(format!("Invalid keypair data: {}", e))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
423 -                 PlatformError::WalletManagement(format!("Invalid keypair data: {}", e))
423 +                 PlatformError::WalletManagement(format!("Invalid keypair data: {e}"))
    |

warning: variables can be used directly in the `format!` string
   --> src\security\wallet\mod.rs:427:49
    |
427 |                 PlatformError::WalletManagement(format!("Failed to create keypair: {}", e)).into()
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
427 -                 PlatformError::WalletManagement(format!("Failed to create keypair: {}", e)).into()
427 +                 PlatformError::WalletManagement(format!("Failed to create keypair: {e}")).into()
    |

warning: variables can be used directly in the `format!` string
   --> src\security\wallet\mod.rs:432:49
    |
432 |                 PlatformError::WalletManagement(format!("Failed to read keypair file: {}", e))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
432 -                 PlatformError::WalletManagement(format!("Failed to read keypair file: {}", e))
432 +                 PlatformError::WalletManagement(format!("Failed to read keypair file: {e}"))
    |

warning: variables can be used directly in the `format!` string
   --> src\security\wallet\mod.rs:436:49
    |
436 |                 PlatformError::WalletManagement(format!("Failed to create keypair: {}", e)).into()
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
436 -                 PlatformError::WalletManagement(format!("Failed to create keypair: {}", e)).into()
436 +                 PlatformError::WalletManagement(format!("Failed to create keypair: {e}")).into()
    |

warning: the function has a cognitive complexity of (74/30)
   --> src\security\wallet\mod.rs:449:14
    |
449 |     async fn load_configured_wallets(&mut self) -> Result<()> {
    |              ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: matching over `()` is more explicit
   --> src\security\wallet\mod.rs:472:32
    |
472 | ...                   Ok(_) => {
    |                          ^ help: use `()` instead of `_`: `()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ignored_unit_patterns

warning: item in documentation is missing backticks
   --> src\security\wallet\mod.rs:513:16
    |
513 |     /// Create DevNet wallet with real keypair
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
513 -     /// Create DevNet wallet with real keypair
513 +     /// Create `DevNet` wallet with real keypair
    |

warning: the function has a cognitive complexity of (61/30)
   --> src\security\wallet\mod.rs:544:14
    |
544 |     async fn airdrop_devnet_sol(&self, wallet_name: &str, amount: f64) -> Result<()> {
    |              ^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: temporary with significant `Drop` can be early dropped
   --> src\security\wallet\mod.rs:551:13
    |
544 |       async fn airdrop_devnet_sol(&self, wallet_name: &str, amount: f64) -> Result<()> {
    |  ______________________________________________________________________________________-
545 | |         info!(
546 | |             "­ƒÆº Requesting {} SOL airdrop for wallet: {}",
547 | |             amount, wallet_name
...   |
551 | |         let wallets = self.wallets.read().await;
    | |             ^^^^^^^
...   |
602 | |         ))
603 | |     }
    | |_____- temporary `wallets` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
551 ~         
552 +         self.wallets.read().await.;
553 ~         
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\security\wallet\mod.rs:632:25
    |
629 |               loop {
    |  __________________-
630 | |                 interval.tick().await;
631 | |
632 | |                 let mut volumes = daily_volumes.write().await;
    | |                         ^^^^^^^
633 | |                 volumes.clear();
634 | |                 info!("­ƒöä Daily volume limits reset");
635 | |             }
    | |_____________- temporary `volumes` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
632 ~                 
633 +                 daily_volumes.write().await.clear();
634 ~                 
    |

warning: item in documentation is missing backticks
  --> src\security\mod.rs:54:65
   |
54 | /// This is the main entry point for all security operations in SniperForge.
   |                                                                 ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
54 - /// This is the main entry point for all security operations in SniperForge.
54 + /// This is the main entry point for all security operations in `SniperForge`.
   |

warning: this `impl` can be derived
   --> src\security\mod.rs:201:1
    |
201 | / impl Default for SecurityMetrics {
202 | |     fn default() -> Self {
203 | |         Self {
204 | |             total_events: 0,
...   |
215 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls
help: replace the manual implementation with a derive attribute
    |
180 + #[derive(Default)]
181 ~ pub struct SecurityMetrics {
    |

warning: variables can be used directly in the `format!` string
   --> src\security\mod.rs:309:14
    |
309 |             &format!("API key stored for service: {}", service),
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
309 -             &format!("API key stored for service: {}", service),
309 +             &format!("API key stored for service: {service}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\mod.rs:325:14
    |
325 |             &format!("API key accessed for service: {}", service),
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
325 -             &format!("API key accessed for service: {}", service),
325 +             &format!("API key accessed for service: {service}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\mod.rs:342:18
    |
342 |                 &format!("Invalid Solana address validation: {}", address),
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
342 -                 &format!("Invalid Solana address validation: {}", address),
342 +                 &format!("Invalid Solana address validation: {address}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\security\mod.rs:362:18
    |
362 |                 &format!("Invalid price data from {}: {}", source, price),
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
362 -                 &format!("Invalid price data from {}: {}", source, price),
362 +                 &format!("Invalid price data from {source}: {price}"),
    |

warning: this method could have a `#[must_use]` attribute
   --> src\security\mod.rs:377:5
    |
377 |     pub fn get_security_metrics(&self) -> SecurityMetrics {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_security_metrics(&self) -> SecurityMetrics`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\security\mod.rs:388:5
    |
388 |     pub fn get_audit_log(&self) -> &[SecurityAuditEntry] {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_audit_log(&self) -> &[SecurityAuditEntry]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: clamp-like pattern without using clamp function
   --> src\analytics\ml_pattern_recognition.rs:182:31
    |
182 |           let composite_score = (
    |  _______________________________^
183 | |             base_profit_score * self.profit_weight +
184 | |             execution_probability * self.timing_weight +
185 | |             (1.0 - risk_score) * self.volatility_weight +
186 | |             timing_score * self.liquidity_weight
187 | |         ).min(1.0).max(0.0);
    | |___________________________^
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp
help: replace with clamp
    |
182 ~         let composite_score = (base_profit_score * self.profit_weight +
183 +             execution_probability * self.timing_weight +
184 ~             (1.0 - risk_score) * self.volatility_weight + timing_score * self.liquidity_weight).clamp(0.0, 1.0);
    |

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ml_pattern_recognition.rs:182:31
    |
182 |           let composite_score = (
    |  _______________________________^
183 | |             base_profit_score * self.profit_weight +
184 | |             execution_probability * self.timing_weight +
185 | |             (1.0 - risk_score) * self.volatility_weight +
186 | |             timing_score * self.liquidity_weight
187 | |         ).min(1.0).max(0.0);
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops
help: consider using
    |
182 ~         let composite_score = timing_score.mul_add(self.liquidity_weight, base_profit_score * self.profit_weight +
183 ~             execution_probability * self.timing_weight + (1.0 - risk_score) * self.volatility_weight).min(1.0).max(0.0);
    |

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ml_pattern_recognition.rs:183:13
    |
183 | /             base_profit_score * self.profit_weight +
184 | |             execution_probability * self.timing_weight +
185 | |             (1.0 - risk_score) * self.volatility_weight +
    | |_______________________________________________________^ help: consider using: `(1.0 - risk_score).mul_add(self.volatility_weight, base_profit_score * self.profit_weight + execution_probability * self.timing_weight)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ml_pattern_recognition.rs:183:13
    |
183 | /             base_profit_score * self.profit_weight +
184 | |             execution_probability * self.timing_weight +
    | |______________________________________________________^ help: consider using: `base_profit_score.mul_add(self.profit_weight, execution_probability * self.timing_weight)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ml_pattern_recognition.rs:249:5
    |
249 |     pub fn get_current_accuracy(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_current_accuracy(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ml_pattern_recognition.rs:258:5
    |
258 | /     pub fn predict_adaptive_parameters(&self, 
259 | |                                      opportunity_score: &OpportunityScore,
260 | |                                      base_trade_size: f64) -> AdaptiveParameters {
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
    |
258 |     #[must_use] pub fn predict_adaptive_parameters(&self, 
    |     +++++++++++

warning: manual implementation of `midpoint` which can overflow
   --> src\analytics\ml_pattern_recognition.rs:284:32
    |
284 |         let confidence_level = (opportunity_score.composite_score + opportunity_score.execution_probability) / 2.0;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `f64::midpoint` instead: `f64::midpoint(opportunity_score.composite_score, opportunity_score.execution_probability)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_midpoint
    = note: `#[warn(clippy::manual_midpoint)]` implied by `#[warn(clippy::pedantic)]`

warning: the borrowed expression implements the required traits
   --> src\analytics\ml_pattern_recognition.rs:304:41
    |
304 |                 opp.token_pair.contains(&token_pair.split('-').next().unwrap_or("")) &&
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `token_pair.split('-').next().unwrap_or("")`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args

warning: clamp-like pattern without using clamp function
   --> src\analytics\ml_pattern_recognition.rs:317:9
    |
317 |         success_rate.max(0.1).min(0.95) // Clamp between 10% and 95%
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `success_rate.clamp(0.1, 0.95)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: unused `self` argument
   --> src\analytics\ml_pattern_recognition.rs:321:29
    |
321 |     fn calculate_risk_score(&self, volatility: f64, liquidity: f64) -> f64 {
    |                             ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: manual implementation of `midpoint` which can overflow
   --> src\analytics\ml_pattern_recognition.rs:331:9
    |
331 |         (volatility_risk + liquidity_risk) / 2.0
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `f64::midpoint` instead: `f64::midpoint(volatility_risk, liquidity_risk)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_midpoint

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ml_pattern_recognition.rs:378:34
    |
378 |             self.timing_weight = (self.timing_weight - self.learning_rate * 0.5).max(0.1);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `self.learning_rate.mul_add(-0.5, self.timing_weight)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: manual `!RangeInclusive::contains` implementation
   --> src\analytics\ml_pattern_recognition.rs:384:12
    |
384 |         if total_weight > 1.1 || total_weight < 0.9 {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!(0.9..=1.1).contains(&total_weight)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains
    = note: `#[warn(clippy::manual_range_contains)]` implied by `#[warn(clippy::all)]`

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ml_pattern_recognition.rs:394:5
    |
394 |     pub fn get_performance_stats(&self) -> HashMap<String, f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_performance_stats(&self) -> HashMap<String, f64>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: item in documentation is missing backticks
 --> src\analytics\ai_engine.rs:1:43
  |
1 | //! AI Engine Empresarial - Migrado desde arbitrage_phase45_clean.rs
  |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
1 - //! AI Engine Empresarial - Migrado desde arbitrage_phase45_clean.rs
1 + //! AI Engine Empresarial - Migrado desde `arbitrage_phase45_clean.rs`
  |

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:172:5
    |
172 |     pub fn new(analysis_window: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(analysis_window: usize) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: use of `or_insert_with` to construct default value
   --> src\analytics\ai_engine.rs:182:67
    |
182 |         let history = self.price_history.entry(token.to_string()).or_insert_with(VecDeque::new);
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:192:5
    |
192 |     pub fn predict_price(&self, token: &str, horizon_minutes: u32) -> Option<PricePrediction> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn predict_price(&self, token: &str, horizon_minutes: u32) -> Option<PricePrediction>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unused `self` argument
   --> src\analytics\ai_engine.rs:228:31
    |
228 |     fn simulate_ml_prediction(&self, history: &VecDeque<f64>, horizon_minutes: u32) -> (f64, f64, f64, f64) {
    |                               ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\analytics\ai_engine.rs:256:44
    |
256 |         let trend_factor = recent_trend * (horizon_minutes as f64 / 60.0); // Escalar por tiempo
    |                                            ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
256 -         let trend_factor = recent_trend * (horizon_minutes as f64 / 60.0); // Escalar por tiempo
256 +         let trend_factor = recent_trend * (f64::from(horizon_minutes) / 60.0); // Escalar por tiempo
    |

warning: manual implementation of `midpoint` which can overflow
   --> src\analytics\ai_engine.rs:266:26
    |
266 |         let confidence = (data_confidence + volatility_confidence) / 2.0 * 0.9; // Max 90%
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `f64::midpoint` instead: `f64::midpoint(data_confidence, volatility_confidence)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_midpoint

warning: clamp-like pattern without using clamp function
   --> src\analytics\ai_engine.rs:269:27
    |
269 |         let trend_score = recent_trend.max(-1.0).min(1.0);
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `recent_trend.clamp(-1.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:286:5
    |
286 |     pub fn new(search_depth: u32) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(search_depth: u32) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\analytics\ai_engine.rs:286:5
    |
286 | /     pub fn new(search_depth: u32) -> Self {
287 | |         Self {
288 | |             search_depth,
289 | |             optimization_history: VecDeque::new(),
290 | |         }
291 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
286 |     pub const fn new(search_depth: u32) -> Self {
    |         +++++

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:322:36
    |
322 |             expected_success_rate: 0.6 + (best_fitness * 0.3),   // 60-90% ├®xito
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `best_fitness.mul_add(0.3, 0.6)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:323:36
    |
323 |             expected_max_drawdown: 0.1 - (best_fitness * 0.05),  // 5-10% drawdown
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `best_fitness.mul_add(-0.05, 0.1)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: unused `self` argument
   --> src\analytics\ai_engine.rs:345:35
    |
345 |     fn generate_random_parameters(&self) -> HashMap<String, f64> {
    |                                   ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:348:59
    |
348 |         params.insert("min_profit_threshold".to_string(), 0.001 + rand::random::<f64>() * 0.009); // 0.1-1%
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `rand::random::<f64>().mul_add(0.009, 0.001)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:349:51
    |
349 |         params.insert("max_slippage".to_string(), 0.001 + rand::random::<f64>() * 0.019);         // 0.1-2%
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `rand::random::<f64>().mul_add(0.019, 0.001)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:350:60
    |
350 |         params.insert("trade_size_multiplier".to_string(), 0.1 + rand::random::<f64>() * 0.9);   // 0.1-1.0
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `rand::random::<f64>().mul_add(0.9, 0.1)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:351:53
    |
351 |         params.insert("risk_tolerance".to_string(), 0.1 + rand::random::<f64>() * 0.4);          // 0.1-0.5
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `rand::random::<f64>().mul_add(0.4, 0.1)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:352:53
    |
352 |         params.insert("exit_threshold".to_string(), 0.0005 + rand::random::<f64>() * 0.0045);    // 0.05-0.5%
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `rand::random::<f64>().mul_add(0.0045, 0.0005)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: unused `self` argument
   --> src\analytics\ai_engine.rs:358:25
    |
358 |     fn evaluate_fitness(&self, params: &HashMap<String, f64>) -> f64 {
    |                         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: clamp-like pattern without using clamp function
   --> src\analytics\ai_engine.rs:371:9
    |
371 |         (base_score + slippage_score + size_score + risk_score).max(0.0).min(1.0)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `(base_score + slippage_score + size_score + risk_score).clamp(0.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:388:5
    |
388 |     pub fn new(threshold: f64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(threshold: f64) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:402:22
    |
402 |             (price * (0.98 + rand::random::<f64>() * 0.04), price * 0.02)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `rand::random::<f64>().mul_add(0.04, 0.98)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:420:43
    |
420 |                     detection_confidence: 0.8 + rand::random::<f64>() * 0.2,
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `rand::random::<f64>().mul_add(0.2, 0.8)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:441:5
    |
441 |     pub fn get_recent_anomalies(&self, minutes: u32) -> Vec<&MarketAnomaly> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_recent_anomalies(&self, minutes: u32) -> Vec<&MarketAnomaly>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: casts from `u32` to `i64` can be expressed infallibly using `From`
   --> src\analytics\ai_engine.rs:442:61
    |
442 |         let cutoff = Utc::now() - chrono::Duration::minutes(minutes as i64);
    |                                                             ^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i64::from` instead
    |
442 -         let cutoff = Utc::now() - chrono::Duration::minutes(minutes as i64);
442 +         let cutoff = Utc::now() - chrono::Duration::minutes(i64::from(minutes));
    |

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:468:5
    |
468 |     pub fn new(config: Option<EnterpriseAIConfig>, settings: SimpleConfig) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: Option<EnterpriseAIConfig>, settings: SimpleConfig) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: manual implementation of `midpoint` which can overflow
   --> src\analytics\ai_engine.rs:508:17
    |
508 |                 (self.stats.average_prediction_time_ms + processing_time) / 2.0;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `f64::midpoint` instead: `f64::midpoint(self.stats.average_prediction_time_ms, processing_time)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_midpoint

warning: manual implementation of `midpoint` which can overflow
   --> src\analytics\ai_engine.rs:540:13
    |
540 |             (self.stats.average_optimization_time_seconds + total_time) / 2.0;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `f64::midpoint` instead: `f64::midpoint(self.stats.average_optimization_time_seconds, total_time)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_midpoint

warning: manual implementation of `midpoint` which can overflow
   --> src\analytics\ai_engine.rs:546:13
    |
546 |             (self.stats.average_fitness_improvement + improvement) / 2.0;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `f64::midpoint` instead: `f64::midpoint(self.stats.average_fitness_improvement, improvement)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_midpoint

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:594:26
    |
594 |                 "SOL" => 150.0 + (rand::random::<f64>() - 0.5) * 10.0,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(rand::random::<f64>() - 0.5).mul_add(10.0, 150.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:595:26
    |
595 |                 "ETH" => 2500.0 + (rand::random::<f64>() - 0.5) * 200.0,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(rand::random::<f64>() - 0.5).mul_add(200.0, 2500.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:596:26
    |
596 |                 "BTC" => 45000.0 + (rand::random::<f64>() - 0.5) * 2000.0,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(rand::random::<f64>() - 0.5).mul_add(2000.0, 45000.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\ai_engine.rs:597:22
    |
597 |                 _ => 1.0 + (rand::random::<f64>() - 0.5) * 0.1,
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(rand::random::<f64>() - 0.5).mul_add(0.1, 1.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:609:5
    |
609 |     pub fn get_statistics(&self) -> &AIEngineStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_statistics(&self) -> &AIEngineStats`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\analytics\ai_engine.rs:609:5
    |
609 | /     pub fn get_statistics(&self) -> &AIEngineStats {
610 | |         &self.stats
611 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
609 |     pub const fn get_statistics(&self) -> &AIEngineStats {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:614:5
    |
614 |     pub fn is_enabled(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_enabled(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\analytics\ai_engine.rs:614:5
    |
614 | /     pub fn is_enabled(&self) -> bool {
615 | |         self.config.enabled
616 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
614 |     pub const fn is_enabled(&self) -> bool {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\ai_engine.rs:619:5
    |
619 |     pub fn get_config(&self) -> &EnterpriseAIConfig {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_config(&self) -> &EnterpriseAIConfig`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\analytics\ai_engine.rs:619:5
    |
619 | /     pub fn get_config(&self) -> &EnterpriseAIConfig {
620 | |         &self.config
621 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
619 |     pub const fn get_config(&self) -> &EnterpriseAIConfig {
    |         +++++

warning: item in documentation is missing backticks
 --> src\analytics\performance_analytics.rs:1:46
  |
1 | //! Performance Analytics AI - Migrado desde arbitrage_phase45_clean.rs
  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
1 - //! Performance Analytics AI - Migrado desde arbitrage_phase45_clean.rs
1 + //! Performance Analytics AI - Migrado desde `arbitrage_phase45_clean.rs`
  |

warning: more than 3 bools in a struct
  --> src\analytics\performance_analytics.rs:15:1
   |
15 | / pub struct PerformanceAnalyticsConfig {
16 | |     /// Si analytics est├í habilitado
17 | |     pub enabled: bool,
18 | |     /// Ventana de an├ílisis en horas
...  |
33 | |     pub historical_analysis_depth_days: u32,
34 | | }
   | |_^
   |
   = help: consider using a state machine or refactoring bools into two-variant enums
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:218:5
    |
218 |     pub fn new(analysis_window_hours: u32) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(analysis_window_hours: u32) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: use of `or_insert_with` to construct default value
   --> src\analytics\performance_analytics.rs:227:75
    |
227 |         let history = self.metrics_history.entry(metric_name.to_string()).or_insert_with(VecDeque::new);
    |                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default

warning: casts from `u32` to `i64` can be expressed infallibly using `From`
   --> src\analytics\performance_analytics.rs:231:51
    |
231 |         let cutoff = Utc::now() - Duration::hours(self.analysis_window_hours as i64);
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i64::from` instead
    |
231 -         let cutoff = Utc::now() - Duration::hours(self.analysis_window_hours as i64);
231 +         let cutoff = Utc::now() - Duration::hours(i64::from(self.analysis_window_hours));
    |

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:242:5
    |
242 |     pub fn calculate_performance_metric(&self, metric_name: &str, current_value: f64) -> Option<PerformanceMetric> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn calculate_performance_metric(&self, metric_name: &str, current_value: f64) -> Option<PerformanceMetric>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unnecessary `!=` operation
   --> src\analytics\performance_analytics.rs:253:33
    |
253 |           let change_percentage = if historical_average != 0.0 {
    |  _________________________________^
254 | |             ((current_value - historical_average) / historical_average) * 100.0
255 | |         } else {
256 | |             0.0
257 | |         };
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
    |
253 ~         let change_percentage = if historical_average == 0.0 {
254 +             0.0
255 +         } else {
256 +             ((current_value - historical_average) / historical_average) * 100.0
257 ~         };
    |

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:302:5
    |
302 |     pub fn new(max_recommendations: u32) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(max_recommendations: u32) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\analytics\performance_analytics.rs:302:5
    |
302 | /     pub fn new(max_recommendations: u32) -> Self {
303 | |         Self {
304 | |             recommendation_history: VecDeque::new(),
305 | |             max_recommendations,
306 | |         }
307 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
302 |     pub const fn new(max_recommendations: u32) -> Self {
    |         +++++

warning: unused `self` argument
   --> src\analytics\performance_analytics.rs:357:52
    |
357 |     fn create_financial_improvement_recommendation(&self, metric: &PerformanceMetric) -> PerformanceRecommendation {
    |                                                    ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\analytics\performance_analytics.rs:379:55
    |
379 |     fn create_performance_optimization_recommendation(&self, metric: &PerformanceMetric) -> PerformanceRecommendation {
    |                                                       ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\analytics\performance_analytics.rs:401:53
    |
401 |     fn create_technical_optimization_recommendation(&self, metric: &PerformanceMetric) -> PerformanceRecommendation {
    |                                                     ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\analytics\performance_analytics.rs:423:50
    |
423 |     fn create_system_optimization_recommendation(&self, metric: &PerformanceMetric) -> PerformanceRecommendation {
    |                                                  ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:468:5
    |
468 |     pub fn new(config: Option<PerformanceAnalyticsConfig>, settings: SimpleConfig) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: Option<PerformanceAnalyticsConfig>, settings: SimpleConfig) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: casts from `i32` to `f64` can be expressed infallibly using `From`
   --> src\analytics\performance_analytics.rs:517:65
    |
517 |         let overall_score = if metric_count > 0 { total_score / metric_count as f64 } else { 50.0 };
    |                                                                 ^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
517 -         let overall_score = if metric_count > 0 { total_score / metric_count as f64 } else { 50.0 };
517 +         let overall_score = if metric_count > 0 { total_score / f64::from(metric_count) } else { 50.0 };
    |

warning: manual implementation of `midpoint` which can overflow
   --> src\analytics\performance_analytics.rs:564:13
    |
564 |             (self.stats.average_analysis_time_seconds + analysis_time) / 2.0;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `f64::midpoint` instead: `f64::midpoint(self.stats.average_analysis_time_seconds, analysis_time)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_midpoint

warning: use Option::map_or instead of an if let/else
   --> src\analytics\performance_analytics.rs:583:9
    |
583 | /         match self.last_report_time {
584 | |             None => true, // Primer reporte
585 | |             Some(last_time) => {
586 | |                 let now = Utc::now();
...   |
592 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
583 ~         self.last_report_time.map_or(true, |last_time| {
584 +                 let now = Utc::now();
585 +                 let duration = now.signed_duration_since(last_time);
586 +                 
587 +                 // Generar reporte cada 1 hora
588 +                 duration.num_hours() >= 1
589 +             })
    |

warning: the function has a cognitive complexity of (54/30)
   --> src\analytics\performance_analytics.rs:596:14
    |
596 |     async fn generate_time_based_report(&mut self, metrics: &[PerformanceMetric], score: f64) -> Result<()> {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: use of `or_insert_with` to construct default value
   --> src\analytics\performance_analytics.rs:607:55
    |
607 |             categories.entry(metric.category.clone()).or_insert_with(Vec::new).push(metric);
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:635:5
    |
635 |     pub fn get_reporting_stats(&self) -> (Option<DateTime<Utc>>, bool) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_reporting_stats(&self) -> (Option<DateTime<Utc>>, bool)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unused `self` argument
   --> src\analytics\performance_analytics.rs:640:29
    |
640 |     fn generate_predictions(&self, metrics: &[PerformanceMetric]) -> Vec<PerformancePrediction> {
    |                             ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this match arm has an identical body to another arm
   --> src\analytics\performance_analytics.rs:647:17
    |
647 |                 "Declining" => 1.0 + (metric.change_percentage / 100.0) * 0.5,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
646 -                 "Improving" => 1.0 + (metric.change_percentage / 100.0) * 0.5,
647 -                 "Declining" => 1.0 + (metric.change_percentage / 100.0) * 0.5,
646 +                 "Declining" | "Improving" => 1.0 + (metric.change_percentage / 100.0) * 0.5,
    |

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\performance_analytics.rs:646:32
    |
646 |                 "Improving" => 1.0 + (metric.change_percentage / 100.0) * 0.5,
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(metric.change_percentage / 100.0).mul_add(0.5, 1.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\performance_analytics.rs:647:32
    |
647 |                 "Declining" => 1.0 + (metric.change_percentage / 100.0) * 0.5,
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(metric.change_percentage / 100.0).mul_add(0.5, 1.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\analytics\performance_analytics.rs:658:35
    |
658 |                 confidence_level: 0.7 + rand::random::<f64>() * 0.2, // 70-90% confianza
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `rand::random::<f64>().mul_add(0.2, 0.7)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: unused `self` argument
   --> src\analytics\performance_analytics.rs:672:23
    |
672 |     fn identify_risks(&self, metrics: &[PerformanceMetric]) -> Vec<PerformanceRisk> {
    |                       ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this match arm has an identical body to the `_` wildcard arm
   --> src\analytics\performance_analytics.rs:690:21
    |
690 | /                     "System" => 0.5,
691 | |                     _ => 0.5,
    | |____________________^ help: try removing the arm
    |
    = help: or try changing either arm body
note: `_` wildcard arm here
   --> src\analytics\performance_analytics.rs:691:21
    |
691 |                     _ => 0.5,
    |                     ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:777:5
    |
777 |     pub fn generate_summary_report(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn generate_summary_report(&self) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:785:13
    |
785 |             report.push_str(&format!("­ƒÄ» Overall Performance Score: {:.1}/100\n", analysis.overall_performance_score));
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string
    = note: `#[warn(clippy::format_push_string)]` implied by `#[warn(clippy::pedantic)]`

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:786:13
    |
786 | /             report.push_str(&format!("­ƒôê Analyzed {} metrics over {} hours\n", 
787 | |                                    analysis.metrics.len(), analysis.analysis_period_hours));
    | |___________________________________________________________________________________________^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:792:21
    |
792 |                     report.push_str(&format!("  ÔÇó {}\n", strength));
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: variables can be used directly in the `format!` string
   --> src\analytics\performance_analytics.rs:792:38
    |
792 |                     report.push_str(&format!("  ÔÇó {}\n", strength));
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
792 -                     report.push_str(&format!("  ÔÇó {}\n", strength));
792 +                     report.push_str(&format!("  ÔÇó {strength}\n"));
    |

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:799:21
    |
799 |                     report.push_str(&format!("  ÔÇó {}\n", area));
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: variables can be used directly in the `format!` string
   --> src\analytics\performance_analytics.rs:799:38
    |
799 |                     report.push_str(&format!("  ÔÇó {}\n", area));
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
799 -                     report.push_str(&format!("  ÔÇó {}\n", area));
799 +                     report.push_str(&format!("  ÔÇó {area}\n"));
    |

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:806:21
    |
806 | /                     report.push_str(&format!("  {}. {} (Priority: {})\n", 
807 | |                                            i + 1, rec.title, rec.priority));
    | |___________________________________________________________________________^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:812:9
    |
812 |         report.push_str(&format!("\n­ƒôè SYSTEM STATISTICS:\n"));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: useless use of `format!`
   --> src\analytics\performance_analytics.rs:812:26
    |
812 |         report.push_str(&format!("\n­ƒôè SYSTEM STATISTICS:\n"));
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `"\n­ƒôè SYSTEM STATISTICS:\n".to_string()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format
    = note: `#[warn(clippy::useless_format)]` implied by `#[warn(clippy::all)]`

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:813:9
    |
813 |         report.push_str(&format!("  ÔÇó Total Analyses: {}\n", self.stats.total_analyses_performed));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:814:9
    |
814 |         report.push_str(&format!("  ÔÇó Recommendations Generated: {}\n", self.stats.total_recommendations_generated));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:815:9
    |
815 |         report.push_str(&format!("  ÔÇó Active Alerts: {}\n", self.active_alerts.len()));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> src\analytics\performance_analytics.rs:816:9
    |
816 |         report.push_str(&format!("  ÔÇó Average Analysis Time: {:.1}s\n", self.stats.average_analysis_time_seconds));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:822:5
    |
822 |     pub fn get_statistics(&self) -> &AnalyticsStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_statistics(&self) -> &AnalyticsStats`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\analytics\performance_analytics.rs:822:5
    |
822 | /     pub fn get_statistics(&self) -> &AnalyticsStats {
823 | |         &self.stats
824 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
822 |     pub const fn get_statistics(&self) -> &AnalyticsStats {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:827:5
    |
827 |     pub fn get_active_alerts(&self) -> &Vec<PerformanceAlert> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_active_alerts(&self) -> &Vec<PerformanceAlert>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\analytics\performance_analytics.rs:827:5
    |
827 | /     pub fn get_active_alerts(&self) -> &Vec<PerformanceAlert> {
828 | |         &self.active_alerts
829 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
827 |     pub const fn get_active_alerts(&self) -> &Vec<PerformanceAlert> {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\analytics\performance_analytics.rs:832:5
    |
832 |     pub fn is_enabled(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_enabled(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\analytics\performance_analytics.rs:832:5
    |
832 | /     pub fn is_enabled(&self) -> bool {
833 | |         self.config.enabled
834 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
832 |     pub const fn is_enabled(&self) -> bool {
    |         +++++

warning: variables can be used directly in the `format!` string
  --> src\utils\validation.rs:10:22
   |
10 |         .map_err(|e| format!("Invalid pubkey: {}", e))
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
10 -         .map_err(|e| format!("Invalid pubkey: {}", e))
10 +         .map_err(|e| format!("Invalid pubkey: {e}"))
   |

warning: manual `!RangeInclusive::contains` implementation
  --> src\utils\validation.rs:28:8
   |
28 |     if percentage < 0.0 || percentage > 100.0 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!(0.0..=100.0).contains(&percentage)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: item in documentation is missing backticks
  --> src\utils\logging.rs:11:35
   |
11 | /// Enterprise logging system for SniperForge
   |                                   ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
11 - /// Enterprise logging system for SniperForge
11 + /// Enterprise logging system for `SniperForge`
   |

warning: unnecessary `Debug` formatting in `format!` args
  --> src\utils\logging.rs:48:65
   |
48 |                     format!("Failed to open log file {:?}: {}", log_file_path, e)
   |                                                                 ^^^^^^^^^^^^^
   |
   = help: use `Display` formatting and change this to `log_file_path.display()`
   = note: switching to `Display` formatting will change how the value is shown; escaped characters will no longer be escaped and surrounding quotes will be removed
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_debug_formatting

warning: variables can be used directly in the `format!` string
  --> src\utils\logging.rs:48:21
   |
48 |                     format!("Failed to open log file {:?}: {}", log_file_path, e)
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
48 -                     format!("Failed to open log file {:?}: {}", log_file_path, e)
48 +                     format!("Failed to open log file {log_file_path:?}: {e}")
   |

warning: this method could have a `#[must_use]` attribute
   --> src\utils\logging.rs:281:5
    |
281 |     pub fn as_str(&self) -> &'static str {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn as_str(&self) -> &'static str`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\utils\logging.rs:281:5
    |
281 | /     pub fn as_str(&self) -> &'static str {
282 | |         match self {
283 | |             LogLevel::Trace => "trace",
284 | |             LogLevel::Debug => "debug",
...   |
289 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
281 |     pub const fn as_str(&self) -> &'static str {
    |         +++++

warning: unnecessary structure name repetition
   --> src\utils\logging.rs:283:13
    |
283 |             LogLevel::Trace => "trace",
    |             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\utils\logging.rs:284:13
    |
284 |             LogLevel::Debug => "debug",
    |             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\utils\logging.rs:285:13
    |
285 |             LogLevel::Info => "info",
    |             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\utils\logging.rs:286:13
    |
286 |             LogLevel::Warn => "warn",
    |             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\utils\logging.rs:287:13
    |
287 |             LogLevel::Error => "error",
    |             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: item in documentation is missing backticks
  --> src\utils\config_loader.rs:48:22
   |
48 |     /// Create a new ConfigLoader with custom paths
   |                      ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
48 -     /// Create a new ConfigLoader with custom paths
48 +     /// Create a new `ConfigLoader` with custom paths
   |

warning: this method could have a `#[must_use]` attribute
  --> src\utils\config_loader.rs:49:5
   |
49 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: variables can be used directly in the `format!` string
  --> src\utils\config_loader.rs:60:28
   |
60 |             .ok_or_else(|| format!("Environment '{}' not configured", environment))?;
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
60 -             .ok_or_else(|| format!("Environment '{}' not configured", environment))?;
60 +             .ok_or_else(|| format!("Environment '{environment}' not configured"))?;
   |

warning: variables can be used directly in the `format!` string
  --> src\utils\config_loader.rs:63:24
   |
63 |             return Err(format!("Configuration file not found: {}", config_path).into());
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
63 -             return Err(format!("Configuration file not found: {}", config_path).into());
63 +             return Err(format!("Configuration file not found: {config_path}").into());
   |

warning: variables can be used directly in the `format!` string
  --> src\utils\config_loader.rs:67:26
   |
67 |             .map_err(|e| format!("Failed to read config file: {}", e))?;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
67 -             .map_err(|e| format!("Failed to read config file: {}", e))?;
67 +             .map_err(|e| format!("Failed to read config file: {e}"))?;
   |

warning: variables can be used directly in the `format!` string
  --> src\utils\config_loader.rs:70:26
   |
70 |             .map_err(|e| format!("Failed to parse config JSON: {}", e))?;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
70 -             .map_err(|e| format!("Failed to parse config JSON: {}", e))?;
70 +             .map_err(|e| format!("Failed to parse config JSON: {e}"))?;
   |

warning: variables can be used directly in the `format!` string
  --> src\utils\config_loader.rs:80:26
   |
80 |             .map_err(|e| format!("Failed to deserialize config: {}", e).into())
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
80 -             .map_err(|e| format!("Failed to deserialize config: {}", e).into())
80 +             .map_err(|e| format!("Failed to deserialize config: {e}").into())
   |

warning: unused `self` argument
  --> src\utils\config_loader.rs:95:9
   |
95 |         &self,
   |         ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: calling `to_string` on `&&str`
   --> src\utils\config_loader.rs:107:32
    |
107 |                     obj.insert(part.to_string(), serde_json::Value::String(value));
    |                                ^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*part).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: calling `to_string` on `&&str`
   --> src\utils\config_loader.rs:116:36
    |
116 |                         obj.insert(part.to_string(), serde_json::Value::Object(Default::default()));
    |                                    ^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*part).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: calling `Map::default()` is more clear than this expression
   --> src\utils\config_loader.rs:116:80
    |
116 |                         obj.insert(part.to_string(), serde_json::Value::Object(Default::default()));
    |                                                                                ^^^^^^^^^^^^^^^^^^ help: try: `Map::default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access
    = note: `#[warn(clippy::default_trait_access)]` implied by `#[warn(clippy::pedantic)]`

warning: calling `to_string` on `&&str`
   --> src\utils\config_loader.rs:119:36
    |
119 |                     let next_key = part.to_string();
    |                                    ^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*part).to_string()`
    |
    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string

warning: unused `self` argument
   --> src\utils\config_loader.rs:139:29
    |
139 |     fn get_nested_value<'a>(&self, config: &'a serde_json::Value, path: &str) -> Option<&'a serde_json::Value> {
    |                             ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: variables can be used directly in the `format!` string
   --> src\utils\config_loader.rs:152:26
    |
152 |             .map_err(|e| format!("Failed to serialize fallback value: {}", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
152 -             .map_err(|e| format!("Failed to serialize fallback value: {}", e))?;
152 +             .map_err(|e| format!("Failed to serialize fallback value: {e}"))?;
    |

warning: the function has a cognitive complexity of (39/30)
  --> src\utils\tatum_client.rs:31:18
   |
31 |     pub async fn call(&self, method: &str, params: Value) -> Result<Value> {
   |                  ^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: use Option::map_or_else instead of an if let/else
  --> src\utils\tatum_client.rs:67:9
   |
67 | /         if let Some(result) = json_response.get("result") {
68 | |             debug!("Ô£à Tatum RPC call successful");
69 | |             Ok(result.clone())
70 | |         } else {
71 | |             error!("ÔØî Tatum RPC response missing 'result' field: {}", json_response);
72 | |             Err(anyhow!("RPC response missing 'result' field"))
73 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
   |
67 ~         json_response.get("result").map_or_else(|| {
68 ~             error!("ÔØî Tatum RPC response missing 'result' field: {}", json_response);
69 +             Err(anyhow!("RPC response missing 'result' field"))
70 +         }, |result| {
71 ~             debug!("Ô£à Tatum RPC call successful");
72 +             Ok(result.clone())
73 +         })
   |

warning: redundant closure
  --> src\utils\tatum_client.rs:82:23
   |
82 |             .and_then(|v| v.as_u64())
   |                       ^^^^^^^^^^^^^^ help: replace the closure with the method itself: `serde_json::Value::as_u64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: this method could have a `#[must_use]` attribute
   --> src\utils\tatum_client.rs:139:5
    |
139 |     pub fn client(&self) -> &TatumClient {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn client(&self) -> &TatumClient`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\utils\tatum_client.rs:139:5
    |
139 | /     pub fn client(&self) -> &TatumClient {
140 | |         &self.client
141 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
139 |     pub const fn client(&self) -> &TatumClient {
    |         +++++

warning: item in documentation is missing backticks
 --> src\types\mod.rs:1:34
  |
1 | //! Common types used across the SniperForge suite
  |                                  ^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
1 - //! Common types used across the SniperForge suite
1 + //! Common types used across the `SniperForge` suite
  |

warning: item in documentation is missing backticks
  --> src\types\mod.rs:10:21
   |
10 | /// Result type for SniperForge operations
   |                     ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
10 - /// Result type for SniperForge operations
10 + /// Result type for `SniperForge` operations
   |

warning: item in documentation is missing backticks
  --> src\types\mod.rs:43:9
   |
43 |     /// DevNet environment - Real transactions on development network
   |         ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
43 -     /// DevNet environment - Real transactions on development network
43 +     /// `DevNet` environment - Real transactions on development network
   |

warning: item in documentation is missing backticks
  --> src\types\mod.rs:45:9
   |
45 |     /// MainNet environment - Real transactions on production network  
   |         ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
45 -     /// MainNet environment - Real transactions on production network  
45 +     /// `MainNet` environment - Real transactions on production network  
   |

warning: item in documentation is missing backticks
  --> src\types\mod.rs:47:9
   |
47 |     /// TestNet environment - Real transactions on test network
   |         ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
47 -     /// TestNet environment - Real transactions on test network
47 +     /// `TestNet` environment - Real transactions on test network
   |

warning: this method could have a `#[must_use]` attribute
  --> src\types\mod.rs:55:5
   |
55 |     pub fn is_real_trading(&self) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_real_trading(&self) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\types\mod.rs:55:5
   |
55 | /     pub fn is_real_trading(&self) -> bool {
56 | |         matches!(self, TradingMode::DevNet | TradingMode::MainNet | TradingMode::TestNet)
57 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
55 |     pub const fn is_real_trading(&self) -> bool {
   |         +++++

warning: unnecessary structure name repetition
  --> src\types\mod.rs:56:24
   |
56 |         matches!(self, TradingMode::DevNet | TradingMode::MainNet | TradingMode::TestNet)
   |                        ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:56:46
   |
56 |         matches!(self, TradingMode::DevNet | TradingMode::MainNet | TradingMode::TestNet)
   |                                              ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:56:69
   |
56 |         matches!(self, TradingMode::DevNet | TradingMode::MainNet | TradingMode::TestNet)
   |                                                                     ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
  --> src\types\mod.rs:60:5
   |
60 |     pub fn is_production(&self) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_production(&self) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\types\mod.rs:60:5
   |
60 | /     pub fn is_production(&self) -> bool {
61 | |         matches!(self, TradingMode::MainNet)
62 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
60 |     pub const fn is_production(&self) -> bool {
   |         +++++

warning: unnecessary structure name repetition
  --> src\types\mod.rs:61:24
   |
61 |         matches!(self, TradingMode::MainNet)
   |                        ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
  --> src\types\mod.rs:65:5
   |
65 |     pub fn is_safe_testing(&self) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_safe_testing(&self) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\types\mod.rs:65:5
   |
65 | /     pub fn is_safe_testing(&self) -> bool {
66 | |         matches!(self, TradingMode::DevNet | TradingMode::TestNet | TradingMode::Simulation)
67 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
65 |     pub const fn is_safe_testing(&self) -> bool {
   |         +++++

warning: unnecessary structure name repetition
  --> src\types\mod.rs:66:24
   |
66 |         matches!(self, TradingMode::DevNet | TradingMode::TestNet | TradingMode::Simulation)
   |                        ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:66:46
   |
66 |         matches!(self, TradingMode::DevNet | TradingMode::TestNet | TradingMode::Simulation)
   |                                              ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:66:69
   |
66 |         matches!(self, TradingMode::DevNet | TradingMode::TestNet | TradingMode::Simulation)
   |                                                                     ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
  --> src\types\mod.rs:70:5
   |
70 |     pub fn environment_name(&self) -> &'static str {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn environment_name(&self) -> &'static str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\types\mod.rs:70:5
   |
70 | /     pub fn environment_name(&self) -> &'static str {
71 | |         match self {
72 | |             TradingMode::DevNet => "DevNet",
73 | |             TradingMode::MainNet => "MainNet", 
...  |
77 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
70 |     pub const fn environment_name(&self) -> &'static str {
   |         +++++

warning: unnecessary structure name repetition
  --> src\types\mod.rs:72:13
   |
72 |             TradingMode::DevNet => "DevNet",
   |             ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:73:13
   |
73 |             TradingMode::MainNet => "MainNet", 
   |             ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:74:13
   |
74 |             TradingMode::TestNet => "TestNet",
   |             ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:75:13
   |
75 |             TradingMode::Simulation => "Simulation",
   |             ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
  --> src\types\mod.rs:80:5
   |
80 |     pub fn rpc_suffix(&self) -> &'static str {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn rpc_suffix(&self) -> &'static str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
  --> src\types\mod.rs:80:5
   |
80 | /     pub fn rpc_suffix(&self) -> &'static str {
81 | |         match self {
82 | |             TradingMode::DevNet => "devnet",
83 | |             TradingMode::MainNet => "mainnet-beta",
...  |
87 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
80 |     pub const fn rpc_suffix(&self) -> &'static str {
   |         +++++

warning: this match arm has an identical body to another arm
  --> src\types\mod.rs:85:13
   |
85 |             TradingMode::Simulation => "devnet", // Use devnet for simulation
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: try changing either arm body
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
   |
82 ~             TradingMode::MainNet => "mainnet-beta",
83 |             TradingMode::TestNet => "testnet", 
84 ~             TradingMode::Simulation | TradingMode::DevNet => "devnet", // Use devnet for simulation
   |

warning: unnecessary structure name repetition
  --> src\types\mod.rs:82:13
   |
82 |             TradingMode::DevNet => "devnet",
   |             ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:83:13
   |
83 |             TradingMode::MainNet => "mainnet-beta",
   |             ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:84:13
   |
84 |             TradingMode::TestNet => "testnet", 
   |             ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\types\mod.rs:85:13
   |
85 |             TradingMode::Simulation => "devnet", // Use devnet for simulation
   |             ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this `impl` can be derived
  --> src\types\mod.rs:90:1
   |
90 | / impl Default for TradingMode {
91 | |     fn default() -> Self {
92 | |         TradingMode::DevNet // Safe default for development
93 | |     }
94 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls
help: replace the manual implementation with a derive attribute and mark the default variant
   |
42 + #[derive(Default)]
43 ~ pub enum TradingMode {
44 |     /// DevNet environment - Real transactions on development network
45 ~     #[default]
46 ~     DevNet,
   |

warning: unnecessary structure name repetition
  --> src\types\mod.rs:92:9
   |
92 |         TradingMode::DevNet // Safe default for development
   |         ^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: you are deriving `PartialEq` and can implement `Eq`
   --> src\types\mod.rs:103:48
    |
103 | #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
    |                                                ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:131:5
    |
131 |     pub fn new(base: TokenMint, quote: TokenMint) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(base: TokenMint, quote: TokenMint) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\types\mod.rs:131:5
    |
131 | /     pub fn new(base: TokenMint, quote: TokenMint) -> Self {
132 | |         Self { base, quote }
133 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
131 |     pub const fn new(base: TokenMint, quote: TokenMint) -> Self {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:136:5
    |
136 |     pub fn reverse(&self) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn reverse(&self) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src\types\mod.rs:136:5
    |
136 | /     pub fn reverse(&self) -> Self {
137 | |         Self {
138 | |             base: self.quote.clone(),
139 | |             quote: self.base.clone(),
140 | |         }
141 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: unnecessary structure name repetition
   --> src\types\mod.rs:223:9
    |
223 |         SniperForgeError::Config(error)
    |         ^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:316:5
    |
316 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:320:5
    |
320 |     pub fn get_price(&self, symbol: &str) -> Option<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_price(&self, symbol: &str) -> Option<f64>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:329:5
    |
329 |     pub fn get_volume(&self, symbol: &str) -> Option<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_volume(&self, symbol: &str) -> Option<f64>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:337:5
    |
337 |     pub fn get_liquidity(&self, symbol: &str) -> Option<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_liquidity(&self, symbol: &str) -> Option<f64>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:345:5
    |
345 |     pub fn is_stale(&self, max_age: Duration) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_stale(&self, max_age: Duration) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: use Option::map_or instead of an if let/else
   --> src\types\mod.rs:346:9
    |
346 | /         match self.last_updated {
347 | |             Some(updated) => updated.elapsed() > max_age,
348 | |             None => true,
349 | |         }
    | |_________^ help: try: `self.last_updated.map_or(true, |updated| updated.elapsed() > max_age)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:439:5
    |
439 |     pub fn is_healthy(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_healthy(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\types\mod.rs:439:5
    |
439 | /     pub fn is_healthy(&self) -> bool {
440 | |         matches!(self, ComponentHealthStatus::Healthy)
441 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
439 |     pub const fn is_healthy(&self) -> bool {
    |         +++++

warning: unnecessary structure name repetition
   --> src\types\mod.rs:440:24
    |
440 |         matches!(self, ComponentHealthStatus::Healthy)
    |                        ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:444:5
    |
444 |     pub fn is_degraded(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_degraded(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\types\mod.rs:444:5
    |
444 | /     pub fn is_degraded(&self) -> bool {
445 | |         matches!(self, ComponentHealthStatus::Degraded(_))
446 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
444 |     pub const fn is_degraded(&self) -> bool {
    |         +++++

warning: unnecessary structure name repetition
   --> src\types\mod.rs:445:24
    |
445 |         matches!(self, ComponentHealthStatus::Degraded(_))
    |                        ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:449:5
    |
449 |     pub fn is_unhealthy(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_unhealthy(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\types\mod.rs:449:5
    |
449 | /     pub fn is_unhealthy(&self) -> bool {
450 | |         matches!(self, ComponentHealthStatus::Unhealthy(_))
451 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
449 |     pub const fn is_unhealthy(&self) -> bool {
    |         +++++

warning: unnecessary structure name repetition
   --> src\types\mod.rs:450:24
    |
450 |         matches!(self, ComponentHealthStatus::Unhealthy(_))
    |                        ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
   --> src\types\mod.rs:454:5
    |
454 |     pub fn description(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn description(&self) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unnecessary structure name repetition
   --> src\types\mod.rs:456:13
    |
456 |             ComponentHealthStatus::Healthy => "Healthy".to_string(),
    |             ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\types\mod.rs:457:13
    |
457 |             ComponentHealthStatus::Degraded(issues) => format!("Degraded: {}", issues.join(", ")),
    |             ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src\types\mod.rs:458:13
    |
458 |             ComponentHealthStatus::Unhealthy(reason) => format!("Unhealthy: {}", reason),
    |             ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: variables can be used directly in the `format!` string
   --> src\types\mod.rs:458:57
    |
458 |             ComponentHealthStatus::Unhealthy(reason) => format!("Unhealthy: {}", reason),
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
458 -             ComponentHealthStatus::Unhealthy(reason) => format!("Unhealthy: {}", reason),
458 +             ComponentHealthStatus::Unhealthy(reason) => format!("Unhealthy: {reason}"),
    |

warning: item in documentation is missing backticks
 --> src\errors\mod.rs:4:38
  |
4 | /// Enterprise-grade error types for SniperForge arbitrage system
  |                                      ^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
  |
4 - /// Enterprise-grade error types for SniperForge arbitrage system
4 + /// Enterprise-grade error types for `SniperForge` arbitrage system
  |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:43:41
   |
43 |             Self::Configuration(msg) => write!(f, "Configuration error: {}", msg),
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
43 -             Self::Configuration(msg) => write!(f, "Configuration error: {}", msg),
43 +             Self::Configuration(msg) => write!(f, "Configuration error: {msg}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:44:50
   |
44 |             Self::Network { source, message } => write!(f, "Network error from {}: {}", source, message),
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
44 -             Self::Network { source, message } => write!(f, "Network error from {}: {}", source, message),
44 +             Self::Network { source, message } => write!(f, "Network error from {source}: {message}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:45:52
   |
45 |             Self::Trading { operation, reason } => write!(f, "Trading operation '{}' failed: {}", operation, reason),
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
45 -             Self::Trading { operation, reason } => write!(f, "Trading operation '{}' failed: {}", operation, reason),
45 +             Self::Trading { operation, reason } => write!(f, "Trading operation '{operation}' failed: {reason}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:46:52
   |
46 |             Self::PriceFeed { source, message } => write!(f, "Price feed error from {}: {}", source, message),
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
46 -             Self::PriceFeed { source, message } => write!(f, "Price feed error from {}: {}", source, message),
46 +             Self::PriceFeed { source, message } => write!(f, "Price feed error from {source}: {message}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:47:34
   |
47 |             Self::Wallet(msg) => write!(f, "Wallet error: {}", msg),
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
47 -             Self::Wallet(msg) => write!(f, "Wallet error: {}", msg),
47 +             Self::Wallet(msg) => write!(f, "Wallet error: {msg}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:48:36
   |
48 |             Self::Security(msg) => write!(f, "Security error: {}", msg),
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
48 -             Self::Security(msg) => write!(f, "Security error: {}", msg),
48 +             Self::Security(msg) => write!(f, "Security error: {msg}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:49:53
   |
49 |             Self::RateLimit { service, message } => write!(f, "Rate limit exceeded for {}: {}", service, message),
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
49 -             Self::RateLimit { service, message } => write!(f, "Rate limit exceeded for {}: {}", service, message),
49 +             Self::RateLimit { service, message } => write!(f, "Rate limit exceeded for {service}: {message}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:50:39
   |
50 |             Self::DataParsing(msg) => write!(f, "Data parsing error: {}", msg),
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
50 -             Self::DataParsing(msg) => write!(f, "Data parsing error: {}", msg),
50 +             Self::DataParsing(msg) => write!(f, "Data parsing error: {msg}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:51:36
   |
51 |             Self::Internal(msg) => write!(f, "Internal system error: {}", msg),
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
51 -             Self::Internal(msg) => write!(f, "Internal system error: {}", msg),
51 +             Self::Internal(msg) => write!(f, "Internal system error: {msg}"),
   |

warning: variables can be used directly in the `format!` string
  --> src\errors\mod.rs:52:52
   |
52 |             Self::Resource { resource, status } => write!(f, "Resource '{}' is {}", resource, status),
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
52 -             Self::Resource { resource, status } => write!(f, "Resource '{}' is {}", resource, status),
52 +             Self::Resource { resource, status } => write!(f, "Resource '{resource}' is {status}"),
   |

warning: this method could have a `#[must_use]` attribute
   --> src\errors\mod.rs:126:5
    |
126 |     pub fn category(&self) -> &'static str {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn category(&self) -> &'static str`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\errors\mod.rs:126:5
    |
126 | /     pub fn category(&self) -> &'static str {
127 | |         match self {
128 | |             Self::Configuration(..) => "configuration",
129 | |             Self::Network { .. } => "network",
...   |
139 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
126 |     pub const fn category(&self) -> &'static str {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\errors\mod.rs:142:5
    |
142 |     pub fn is_recoverable(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_recoverable(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\errors\mod.rs:142:5
    |
142 | /     pub fn is_recoverable(&self) -> bool {
143 | |         match self {
144 | |             Self::Network { .. } => true,
145 | |             Self::RateLimit { .. } => true,
...   |
155 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
142 |     pub const fn is_recoverable(&self) -> bool {
    |         +++++

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:145:13
    |
145 |             Self::RateLimit { .. } => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
144 -             Self::Network { .. } => true,
145 -             Self::RateLimit { .. } => true,
144 +             Self::RateLimit { .. } | Self::Network { .. } => true,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:146:13
    |
146 |             Self::Resource { .. } => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
144 ~             Self::RateLimit { .. } => true,
145 ~             Self::Resource { .. } | Self::Network { .. } => true,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:145:13
    |
145 |             Self::RateLimit { .. } => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
145 ~             Self::RateLimit { .. } | Self::Resource { .. } => true,
146 ~             Self::PriceFeed { .. } => true,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:147:13
    |
147 |             Self::PriceFeed { .. } => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
144 ~             Self::RateLimit { .. } => true,
145 |             Self::Resource { .. } => true,
146 ~             Self::PriceFeed { .. } | Self::Network { .. } => true,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:145:13
    |
145 |             Self::RateLimit { .. } => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
145 ~             Self::RateLimit { .. } | Self::PriceFeed { .. } => true,
146 |             Self::Resource { .. } => true,
147 ~             Self::Configuration(..) => false,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:146:13
    |
146 |             Self::Resource { .. } => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
146 ~             Self::Resource { .. } | Self::PriceFeed { .. } => true,
147 ~             Self::Configuration(..) => false,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:148:13
    |
148 |             Self::Configuration(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
148 ~             Self::Configuration(..) | Self::Security(..) => false,
149 ~             Self::Wallet(..) => false,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:148:13
    |
148 |             Self::Configuration(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
148 ~             Self::Configuration(..) | Self::Wallet(..) => false,
149 |             Self::Security(..) => false,
150 ~             Self::Trading { .. } => false, // Depends on specific case
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:149:13
    |
149 |             Self::Security(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
149 ~             Self::Security(..) | Self::Wallet(..) => false,
150 ~             Self::Trading { .. } => false, // Depends on specific case
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:148:13
    |
148 |             Self::Configuration(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
148 ~             Self::Configuration(..) | Self::Trading { .. } => false,
149 |             Self::Security(..) => false,
150 |             Self::Wallet(..) => false,
151 ~             // Depends on specific case
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:149:13
    |
149 |             Self::Security(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
149 ~             Self::Security(..) | Self::Trading { .. } => false,
150 |             Self::Wallet(..) => false,
151 ~             // Depends on specific case
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:150:13
    |
150 |             Self::Wallet(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
150 ~             Self::Wallet(..) | Self::Trading { .. } => false,
151 ~             // Depends on specific case
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:148:13
    |
148 |             Self::Configuration(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
148 ~             Self::Configuration(..) | Self::DataParsing(..) => false,
149 |             Self::Security(..) => false,
150 |             Self::Wallet(..) => false,
151 |             Self::Trading { .. } => false, // Depends on specific case
152 ~             Self::Internal(..) => false,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:149:13
    |
149 |             Self::Security(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
149 ~             Self::Security(..) | Self::DataParsing(..) => false,
150 |             Self::Wallet(..) => false,
151 |             Self::Trading { .. } => false, // Depends on specific case
152 ~             Self::Internal(..) => false,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:150:13
    |
150 |             Self::Wallet(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
150 ~             Self::Wallet(..) | Self::DataParsing(..) => false,
151 |             Self::Trading { .. } => false, // Depends on specific case
152 ~             Self::Internal(..) => false,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:151:13
    |
151 |             Self::Trading { .. } => false, // Depends on specific case
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
151 ~             Self::Trading { .. } | Self::DataParsing(..) => false, // Depends on specific case
152 ~             Self::Internal(..) => false,
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:148:13
    |
148 |             Self::Configuration(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
148 ~             Self::Configuration(..) | Self::Internal(..) => false,
149 |             Self::Security(..) => false,
...
152 |             Self::DataParsing(..) => false,
153 ~             }
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:149:13
    |
149 |             Self::Security(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
149 ~             Self::Security(..) | Self::Internal(..) => false,
150 |             Self::Wallet(..) => false,
151 |             Self::Trading { .. } => false, // Depends on specific case
152 |             Self::DataParsing(..) => false,
153 ~             }
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:150:13
    |
150 |             Self::Wallet(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
150 ~             Self::Wallet(..) | Self::Internal(..) => false,
151 |             Self::Trading { .. } => false, // Depends on specific case
152 |             Self::DataParsing(..) => false,
153 ~             }
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:151:13
    |
151 |             Self::Trading { .. } => false, // Depends on specific case
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
151 ~             Self::Trading { .. } | Self::Internal(..) => false, // Depends on specific case
152 |             Self::DataParsing(..) => false,
153 ~             }
    |

warning: this match arm has an identical body to another arm
   --> src\errors\mod.rs:152:13
    |
152 |             Self::DataParsing(..) => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
152 ~             Self::DataParsing(..) | Self::Internal(..) => false,
153 ~             }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\errors\mod.rs:158:5
    |
158 |     pub fn retry_delay_ms(&self) -> Option<u64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn retry_delay_ms(&self) -> Option<u64>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: item in documentation is missing backticks
   --> src\errors\mod.rs:173:27
    |
173 | /// Result type alias for SniperForge operations
    |                           ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
173 - /// Result type alias for SniperForge operations
173 + /// Result type alias for `SniperForge` operations
    |

warning: variables can be used directly in the `format!` string
   --> src\errors\mod.rs:188:51
    |
188 |         self.map_err(|e| SniperForgeError::config(format!("{}: {}", context, e)))
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
188 -         self.map_err(|e| SniperForgeError::config(format!("{}: {}", context, e)))
188 +         self.map_err(|e| SniperForgeError::config(format!("{context}: {e}")))
    |

warning: variables can be used directly in the `format!` string
   --> src\errors\mod.rs:192:72
    |
192 |         self.map_err(|e| SniperForgeError::network(source.to_string(), format!("{}: {}", context, e)))
    |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
192 -         self.map_err(|e| SniperForgeError::network(source.to_string(), format!("{}: {}", context, e)))
192 +         self.map_err(|e| SniperForgeError::network(source.to_string(), format!("{context}: {e}")))
    |

warning: variables can be used directly in the `format!` string
   --> src\errors\mod.rs:196:75
    |
196 |         self.map_err(|e| SniperForgeError::trading(operation.to_string(), format!("{}: {}", context, e)))
    |                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
196 -         self.map_err(|e| SniperForgeError::trading(operation.to_string(), format!("{}: {}", context, e)))
196 +         self.map_err(|e| SniperForgeError::trading(operation.to_string(), format!("{context}: {e}")))
    |

warning: all fields have the same postfix: `metrics`
  --> src\monitoring\enterprise_monitor.rs:29:1
   |
29 | / pub struct MetricsCollector {
30 | |     /// Trading metrics
31 | |     trading_metrics: Arc<RwLock<TradingMetrics>>,
32 | |     /// System performance metrics
...  |
39 | |     business_metrics: Arc<RwLock<BusinessMetrics>>,
40 | | }
   | |_^
   |
   = help: remove the postfixes
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names
   = note: `#[warn(clippy::struct_field_names)]` implied by `#[warn(clippy::pedantic)]`

warning: you should consider adding a `Default` implementation for `EnterpriseMonitor`
   --> src\monitoring\enterprise_monitor.rs:447:5
    |
447 | /     pub fn new() -> Self {
448 | |         Self {
449 | |             metrics_collector: Arc::new(MetricsCollector::new()),
450 | |             performance_analytics: Arc::new(PerformanceAnalytics::new()),
...   |
457 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
445 + impl Default for EnterpriseMonitor {
446 +     fn default() -> Self {
447 +         Self::new()
448 +     }
449 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:447:5
    |
447 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:460:5
    |
460 |     pub fn is_active(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_active(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you should consider adding a `Default` implementation for `MetricsCollector`
   --> src\monitoring\enterprise_monitor.rs:612:5
    |
612 | /     pub fn new() -> Self {
613 | |         Self {
614 | |             trading_metrics: Arc::new(RwLock::new(TradingMetrics::default())),
615 | |             system_metrics: Arc::new(RwLock::new(SystemMetrics::default())),
...   |
620 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
611 + impl Default for MetricsCollector {
612 +     fn default() -> Self {
613 +         Self::new()
614 +     }
615 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:612:5
    |
612 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
   --> src\monitoring\enterprise_monitor.rs:644:17
    |
642 |       async fn collect_api_metrics(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  _________________________________________________________________________________________________-
643 | |         // Implementation for collecting API metrics
644 | |         let mut api_metrics = self.api_metrics.write().await;
    | |                 ^^^^^^^^^^^
645 | |         api_metrics.total_requests += 1;
646 | |         api_metrics.avg_response_time_ms = 45.0;
647 | |         Ok(())
648 | |     }
    | |_____- temporary `api_metrics` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
    |
646 ~         api_metrics.avg_response_time_ms = 45.0;
647 +         drop(api_metrics);
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\monitoring\enterprise_monitor.rs:652:17
    |
650 |       async fn collect_security_metrics(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  ______________________________________________________________________________________________________-
651 | |         // Implementation for collecting security metrics
652 | |         let mut security_metrics = self.security_metrics.write().await;
    | |                 ^^^^^^^^^^^^^^^^
653 | |         security_metrics.failed_auth_attempts = 0;
654 | |         security_metrics.blocked_ips = 0;
655 | |         Ok(())
656 | |     }
    | |_____- temporary `security_metrics` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
    |
654 ~         security_metrics.blocked_ips = 0;
655 +         drop(security_metrics);
    |

warning: temporary with significant `Drop` can be early dropped
   --> src\monitoring\enterprise_monitor.rs:660:17
    |
658 |       async fn collect_business_metrics(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  ______________________________________________________________________________________________________-
659 | |         // Implementation for collecting business metrics
660 | |         let mut business_metrics = self.business_metrics.write().await;
    | |                 ^^^^^^^^^^^^^^^^
661 | |         business_metrics.daily_revenue_usd = 1250.50;
662 | |         business_metrics.active_users_24h = 42;
663 | |         Ok(())
664 | |     }
    | |_____- temporary `business_metrics` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
    |
662 ~         business_metrics.active_users_24h = 42;
663 +         drop(business_metrics);
    |

warning: you should consider adding a `Default` implementation for `PerformanceAnalytics`
   --> src\monitoring\enterprise_monitor.rs:676:5
    |
676 | /     pub fn new() -> Self {
677 | |         Self {
678 | |             historical_data: Arc::new(RwLock::new(Vec::new())),
679 | |             anomaly_detector: Arc::new(AnomalyDetector::new()),
...   |
683 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
675 + impl Default for PerformanceAnalytics {
676 +     fn default() -> Self {
677 +         Self::new()
678 +     }
679 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:676:5
    |
676 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you should consider adding a `Default` implementation for `AnomalyDetector`
   --> src\monitoring\enterprise_monitor.rs:712:5
    |
712 | /     pub fn new() -> Self {
713 | |         Self {
714 | |             thresholds: Arc::new(RwLock::new(AnomalyThresholds::default())),
715 | |             detected_anomalies: Arc::new(RwLock::new(Vec::new())),
716 | |         }
717 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
711 + impl Default for AnomalyDetector {
712 +     fn default() -> Self {
713 +         Self::new()
714 +     }
715 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:712:5
    |
712 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
   --> src\monitoring\enterprise_monitor.rs:725:17
    |
720 |       pub async fn detect_anomalies(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  __________________________________________________________________________________________________-
721 | |         // Use thresholds field
722 | |         let thresholds = self.thresholds.read().await;
...   |
725 | |         let mut anomalies = self.detected_anomalies.write().await;
    | |                 ^^^^^^^^^
...   |
741 | |         Ok(())
742 | |     }
    | |_____- temporary `anomalies` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
725 ~         
726 +             self.detected_anomalies.write().await.push(Anomaly {
727 +                 id: format!("anomaly_{}", Utc::now().timestamp()),
728 +                 anomaly_type: AnomalyType::HighCpuUsage,
729 +                 severity: Severity::Medium,
730 +                 description: "Unusual performance pattern detected".to_string(),
731 +                 detected_at: Utc::now(),
732 +                 metric_value: 85.0,
733 +                 threshold_value: thresholds.max_cpu_usage,
734 +                 resolved: false,
735 +             });
736 |         
737 |         // Simulate anomaly detection logic
738 |         if fastrand::f64() > 0.8 {
739 ~             
    |

warning: you should consider adding a `Default` implementation for `TrendAnalyzer`
   --> src\monitoring\enterprise_monitor.rs:746:5
    |
746 | /     pub fn new() -> Self {
747 | |         Self {
748 | |             trends: Arc::new(RwLock::new(HashMap::new())),
749 | |         }
750 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
745 + impl Default for TrendAnalyzer {
746 +     fn default() -> Self {
747 +         Self::new()
748 +     }
749 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:746:5
    |
746 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you should consider adding a `Default` implementation for `PerformancePredictor`
   --> src\monitoring\enterprise_monitor.rs:782:5
    |
782 | /     pub fn new() -> Self {
783 | |         Self {
784 | |             models: Arc::new(RwLock::new(HashMap::new())),
785 | |         }
786 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
781 + impl Default for PerformancePredictor {
782 +     fn default() -> Self {
783 +         Self::new()
784 +     }
785 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:782:5
    |
782 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you should consider adding a `Default` implementation for `AlertManager`
   --> src\monitoring\enterprise_monitor.rs:814:5
    |
814 | /     pub fn new() -> Self {
815 | |         Self {
816 | |             active_alerts: Arc::new(RwLock::new(Vec::new())),
817 | |             alert_rules: Arc::new(RwLock::new(Vec::new())),
...   |
820 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
813 + impl Default for AlertManager {
814 +     fn default() -> Self {
815 +         Self::new()
816 +     }
817 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:814:5
    |
814 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you should consider adding a `Default` implementation for `HealthChecker`
   --> src\monitoring\enterprise_monitor.rs:863:5
    |
863 | /     pub fn new() -> Self {
864 | |         Self {
865 | |             health_checks: Arc::new(RwLock::new(Vec::new())),
866 | |             system_health: Arc::new(RwLock::new(SystemHealth::default())),
867 | |         }
868 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
862 + impl Default for HealthChecker {
863 +     fn default() -> Self {
864 +         Self::new()
865 +     }
866 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:863:5
    |
863 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: you should consider adding a `Default` implementation for `DistributedTracer`
   --> src\monitoring\enterprise_monitor.rs:891:5
    |
891 | /     pub fn new() -> Self {
892 | |         Self {
893 | |             traces: Arc::new(RwLock::new(HashMap::new())),
894 | |             config: Arc::new(RwLock::new(TracingConfig::default())),
895 | |         }
896 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
890 + impl Default for DistributedTracer {
891 +     fn default() -> Self {
892 +         Self::new()
893 +     }
894 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:891:5
    |
891 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
   --> src\monitoring\enterprise_monitor.rs:919:17
    |
899 |       pub async fn initialize_tracing(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  ____________________________________________________________________________________________________-
900 | |         tracing::debug!("­ƒöì Initializing distributed tracing system");
...   |
919 | |         let mut config = self.config.write().await;
    | |                 ^^^^^^
...   |
923 | |         Ok(())
924 | |     }
    | |_____- temporary `config` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
    |
921 ~         config.max_spans = 10000;
922 +         drop(config);
    |

warning: you should consider adding a `Default` implementation for `BusinessIntelligence`
   --> src\monitoring\enterprise_monitor.rs:928:5
    |
928 | /     pub fn new() -> Self {
929 | |         Self {
930 | |             kpi_dashboard: Arc::new(RwLock::new(KpiDashboard::default())),
931 | |             reports_generator: Arc::new(ReportsGenerator::new()),
932 | |         }
933 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
927 + impl Default for BusinessIntelligence {
928 +     fn default() -> Self {
929 +         Self::new()
930 +     }
931 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:928:5
    |
928 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
   --> src\monitoring\enterprise_monitor.rs:939:17
    |
936 |       pub async fn initialize_dashboard(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  ______________________________________________________________________________________________________-
937 | |         tracing::debug!("­ƒôè Initializing business intelligence dashboard");
938 | |         // Configure KPI dashboard and reports
939 | |         let mut dashboard = self.kpi_dashboard.write().await;
    | |                 ^^^^^^^^^
...   |
943 | |         Ok(())
944 | |     }
    | |_____- temporary `dashboard` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: merge the temporary construction with its single usage
    |
939 ~         
940 +         self.kpi_dashboard.write().await.;
941 ~         
    |

warning: you should consider adding a `Default` implementation for `ReportsGenerator`
   --> src\monitoring\enterprise_monitor.rs:948:5
    |
948 | /     pub fn new() -> Self {
949 | |         Self {
950 | |             templates: Arc::new(RwLock::new(Vec::new())),
951 | |         }
952 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
947 + impl Default for ReportsGenerator {
948 +     fn default() -> Self {
949 +         Self::new()
950 +     }
951 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src\monitoring\enterprise_monitor.rs:948:5
    |
948 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: temporary with significant `Drop` can be early dropped
   --> src\monitoring\enterprise_monitor.rs:957:17
    |
955 |       pub async fn setup_templates(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    |  _________________________________________________________________________________________________-
956 | |         tracing::debug!("­ƒôï Setting up report templates");
957 | |         let mut templates = self.templates.write().await;
    | |                 ^^^^^^^^^
958 | |         templates.push(ReportTemplate {
...   |
973 | |         Ok(())
974 | |     }
    | |_____- temporary `templates` is currently being dropped at the end of its contained scope
    |
    = note: this might lead to unnecessary resource contention
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening
help: drop the temporary after the end of its last usage
    |
971 ~         });
972 +         drop(templates);
    |

warning: unnecessary structure name repetition
  --> src\intelligence\ml_engine.rs:68:13
   |
68 |             MarketRegime::Bullish => write!(f, "BULLISH"),
   |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\intelligence\ml_engine.rs:69:13
   |
69 |             MarketRegime::Bearish => write!(f, "BEARISH"), 
   |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\intelligence\ml_engine.rs:70:13
   |
70 |             MarketRegime::Sideways => write!(f, "SIDEWAYS"),
   |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\intelligence\ml_engine.rs:71:13
   |
71 |             MarketRegime::Volatile => write!(f, "VOLATILE"),
   |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\intelligence\ml_engine.rs:72:13
   |
72 |             MarketRegime::Accumulation => write!(f, "ACCUMULATION"),
   |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src\intelligence\ml_engine.rs:73:13
   |
73 |             MarketRegime::Distribution => write!(f, "DISTRIBUTION"),
   |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
   --> src\intelligence\ml_engine.rs:105:5
    |
105 |     pub fn new(config: AiConfig) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: AiConfig) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: variables can be used directly in the `format!` string
   --> src\intelligence\ml_engine.rs:130:24
    |
130 |             return Err(format!("Prediction horizon {} exceeds max {}", hours_ahead, max_horizon).into());
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
130 -             return Err(format!("Prediction horizon {} exceeds max {}", hours_ahead, max_horizon).into());
130 +             return Err(format!("Prediction horizon {hours_ahead} exceeds max {max_horizon}").into());
    |

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\intelligence\ml_engine.rs:143:25
    |
143 |         let variance = (hours_ahead as f64 * 0.001 * (1.0 - prediction_accuracy)).min(0.1);
    |                         ^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
143 -         let variance = (hours_ahead as f64 * 0.001 * (1.0 - prediction_accuracy)).min(0.1);
143 +         let variance = (f64::from(hours_ahead) * 0.001 * (1.0 - prediction_accuracy)).min(0.1);
    |

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\intelligence\ml_engine.rs:144:39
    |
144 |         let prediction = base_price * (1.0 + (fastrand::f64() - 0.5) * variance);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(fastrand::f64() - 0.5).mul_add(variance, 1.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: this match arm has an identical body to the `_` wildcard arm
   --> src\intelligence\ml_engine.rs:155:13
    |
155 |             "SOL/USDC" => 0.5,  // Medium risk
    |             ^^^^^^^^^^^^^^^^^^^^ help: try removing the arm
    |
    = help: or try changing either arm body
note: `_` wildcard arm here
   --> src\intelligence\ml_engine.rs:157:13
    |
157 |             _ => 0.5,
    |             ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: more than 3 bools in a struct
  --> src\intelligence\market_analysis.rs:16:1
   |
16 | / pub struct IntelligenceConfig {
17 | |     pub sentiment_analysis_enabled: bool,
18 | |     pub correlation_analysis_enabled: bool,
19 | |     pub whale_tracking_enabled: bool,
20 | |     pub news_sentiment_enabled: bool,
21 | | }
   | |_^
   |
   = help: consider using a state machine or refactoring bools into two-variant enums
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools

warning: this method could have a `#[must_use]` attribute
   --> src\intelligence\market_analysis.rs:110:5
    |
110 |     pub fn new(config: IntelligenceConfig) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(config: IntelligenceConfig) -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\intelligence\market_analysis.rs:131:25
    |
131 |             confidence: 0.75 + fastrand::f64() * 0.2,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `fastrand::f64().mul_add(0.2, 0.75)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\intelligence\market_analysis.rs:149:12
    |
149 |         Ok(0.4 + fastrand::f64() * 0.4) // Risk between 0.4 and 0.8
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `fastrand::f64().mul_add(0.4, 0.4)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: variables can be used directly in the `format!` string
   --> src\intelligence\market_analysis.rs:201:17
    |
201 |                 eprintln!("ÔÜá´©Å  Real sentiment analysis failed: {}", e);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
201 -                 eprintln!("ÔÜá´©Å  Real sentiment analysis failed: {}", e);
201 +                 eprintln!("ÔÜá´©Å  Real sentiment analysis failed: {e}");
    |

warning: variables can be used directly in the `format!` string
   --> src\intelligence\market_analysis.rs:222:17
    |
222 |                 eprintln!("ÔÜá´©Å  Detailed sentiment analysis failed: {}", e);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
222 -                 eprintln!("ÔÜá´©Å  Detailed sentiment analysis failed: {}", e);
222 +                 eprintln!("ÔÜá´©Å  Detailed sentiment analysis failed: {e}");
    |

warning: this match arm has an identical body to another arm
   --> src\intelligence\market_analysis.rs:268:17
    |
268 |                 MarketRegime::Accumulation => TrendDirection::Increasing,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
264 ~                 MarketRegime::Bearish => TrendDirection::Decreasing,
265 |                 MarketRegime::Sideways => TrendDirection::Stable,
266 |                 MarketRegime::Volatile => TrendDirection::Volatile,
267 ~                 MarketRegime::Accumulation | MarketRegime::Bullish => TrendDirection::Increasing,
    |

warning: this match arm has an identical body to another arm
   --> src\intelligence\market_analysis.rs:265:17
    |
265 |                 MarketRegime::Bearish => TrendDirection::Decreasing,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
265 ~                 MarketRegime::Bearish | MarketRegime::Distribution => TrendDirection::Decreasing,
266 |                 MarketRegime::Sideways => TrendDirection::Stable,
267 |                 MarketRegime::Volatile => TrendDirection::Volatile,
268 |                 MarketRegime::Accumulation => TrendDirection::Increasing,
269 ~                 },
    |

warning: this method could have a `#[must_use]` attribute
   --> src\intelligence\auto_trader.rs:145:5
    |
145 | /     pub fn new(
146 | |         config: AutonomousConfig,
147 | |         ai_engine: Arc<AdvancedAiEngine>,
148 | |         intelligence_system: Arc<IntelligenceSystem>,
149 | |     ) -> Self {
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
    |
145 |     #[must_use] pub fn new(
    |     +++++++++++

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\intelligence\auto_trader.rs:207:69
    |
207 |             let current_wins = (self.performance_metrics.win_rate * (self.performance_metrics.total_trades - 1) as f64) as u32;
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
207 -             let current_wins = (self.performance_metrics.win_rate * (self.performance_metrics.total_trades - 1) as f64) as u32;
207 +             let current_wins = (self.performance_metrics.win_rate * f64::from(self.performance_metrics.total_trades - 1)) as u32;
    |

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\intelligence\auto_trader.rs:208:49
    |
208 |             self.performance_metrics.win_rate = (current_wins + 1) as f64 / self.performance_metrics.total_trades as f64;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
208 -             self.performance_metrics.win_rate = (current_wins + 1) as f64 / self.performance_metrics.total_trades as f64;
208 +             self.performance_metrics.win_rate = f64::from(current_wins + 1) / self.performance_metrics.total_trades as f64;
    |

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\intelligence\auto_trader.rs:208:77
    |
208 |             self.performance_metrics.win_rate = (current_wins + 1) as f64 / self.performance_metrics.total_trades as f64;
    |                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
208 -             self.performance_metrics.win_rate = (current_wins + 1) as f64 / self.performance_metrics.total_trades as f64;
208 +             self.performance_metrics.win_rate = (current_wins + 1) as f64 / f64::from(self.performance_metrics.total_trades);
    |

warning: this match arm has an identical body to another arm
   --> src\intelligence\auto_trader.rs:229:13
    |
229 |             "Buy" => "BUY",
    |             ^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
228 -             "Strong Buy" => "BUY",
229 -             "Buy" => "BUY",
228 +             "Buy" | "Strong Buy" => "BUY",
    |

warning: this match arm has an identical body to another arm
   --> src\intelligence\auto_trader.rs:230:13
    |
230 |             "Strong Sell" => "SELL",
    |             ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: or try merging the arm patterns and removing the obsolete arm
    |
230 ~             "Strong Sell" | "Sell" => "SELL",
231 ~             "Hold" => "HOLD",
    |

warning: this match arm has an identical body to the `_` wildcard arm
   --> src\intelligence\auto_trader.rs:232:13
    |
232 | /             "Hold" => "HOLD",
233 | |             _ => "HOLD",
    | |____________^ help: try removing the arm
    |
    = help: or try changing either arm body
note: `_` wildcard arm here
   --> src\intelligence\auto_trader.rs:233:13
    |
233 |             _ => "HOLD",
    |             ^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: the function has a cognitive complexity of (42/30)
   --> src\intelligence\auto_trader.rs:240:18
    |
240 |     pub async fn execute_autonomous_trade(&self) {
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this match arm has an identical body to the `_` wildcard arm
   --> src\intelligence\auto_trader.rs:313:13
    |
313 |             "BULLISH" | "BEARISH" => &self.available_strategies[0], // Momentum
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the arm
    |
    = help: or try changing either arm body
note: `_` wildcard arm here
   --> src\intelligence\auto_trader.rs:316:13
    |
316 |             _ => &self.available_strategies[0],
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: this method could have a `#[must_use]` attribute
   --> src\intelligence\auto_trader.rs:332:5
    |
332 |     pub fn get_active_positions_count(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_active_positions_count(&self) -> usize`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src\intelligence\auto_trader.rs:337:5
    |
337 |     pub fn get_position_history_count(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_position_history_count(&self) -> usize`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\intelligence\auto_trader.rs:337:5
    |
337 | /     pub fn get_position_history_count(&self) -> usize {
338 | |         self.position_history.len()
339 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
337 |     pub const fn get_position_history_count(&self) -> usize {
    |         +++++

warning: this could be a `const fn`
   --> src\intelligence\auto_trader.rs:343:5
    |
343 | /     fn new() -> Self {
344 | |         Self {
345 | |             risk_limits: RiskLimits {
346 | |                 max_drawdown: 0.1,
...   |
359 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
343 |     const fn new() -> Self {
    |     +++++

warning: you should consider adding a `Default` implementation for `RealSentimentAnalyzer`
  --> src\intelligence\sentiment\real_analyzer.rs:41:5
   |
41 | /     pub fn new() -> Self {
42 | |         Self {
43 | |             enabled_sources: vec![
44 | |                 "reddit".to_string(),
...  |
51 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
   |
40 + impl Default for RealSentimentAnalyzer {
41 +     fn default() -> Self {
42 +         Self::new()
43 +     }
44 + }
   |

warning: this method could have a `#[must_use]` attribute
  --> src\intelligence\sentiment\real_analyzer.rs:41:5
   |
41 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: redundant clone
   --> src\intelligence\sentiment\real_analyzer.rs:120:47
    |
120 |         self.cache.insert(cache_key, (analysis.clone(), Utc::now()));
    |                                               ^^^^^^^^ help: remove this
    |
note: this value is dropped without further use
   --> src\intelligence\sentiment\real_analyzer.rs:120:39
    |
120 |         self.cache.insert(cache_key, (analysis.clone(), Utc::now()));
    |                                       ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone

warning: variables can be used directly in the `format!` string
  --> src\intelligence\sentiment\real_analyzer.rs:55:25
   |
55 |         let cache_key = format!("sentiment_{}", symbol);
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
55 -         let cache_key = format!("sentiment_{}", symbol);
55 +         let cache_key = format!("sentiment_{symbol}");
   |

warning: variables can be used directly in the `format!` string
  --> src\intelligence\sentiment\real_analyzer.rs:66:9
   |
66 |         println!("­ƒºá Analyzing REAL sentiment for {} from multiple sources...", symbol);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
66 -         println!("­ƒºá Analyzing REAL sentiment for {} from multiple sources...", symbol);
66 +         println!("­ƒºá Analyzing REAL sentiment for {symbol} from multiple sources...");
   |

warning: variables can be used directly in the `format!` string
  --> src\intelligence\sentiment\real_analyzer.rs:78:17
   |
78 |                 println!("   ­ƒô▒ Reddit sentiment: {:.3}", reddit_sentiment);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
78 -                 println!("   ­ƒô▒ Reddit sentiment: {:.3}", reddit_sentiment);
78 +                 println!("   ­ƒô▒ Reddit sentiment: {reddit_sentiment:.3}");
   |

warning: variables can be used directly in the `format!` string
  --> src\intelligence\sentiment\real_analyzer.rs:88:17
   |
88 |                 println!("   ­ƒô░ News sentiment: {:.3}", news_sentiment);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
88 -                 println!("   ­ƒô░ News sentiment: {:.3}", news_sentiment);
88 +                 println!("   ­ƒô░ News sentiment: {news_sentiment:.3}");
   |

warning: variables can be used directly in the `format!` string
  --> src\intelligence\sentiment\real_analyzer.rs:98:17
   |
98 |                 println!("   ­ƒÿ¿ Fear/Greed sentiment: {:.3}", fg_sentiment);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
98 -                 println!("   ­ƒÿ¿ Fear/Greed sentiment: {:.3}", fg_sentiment);
98 +                 println!("   ­ƒÿ¿ Fear/Greed sentiment: {fg_sentiment:.3}");
   |

warning: variables can be used directly in the `format!` string
   --> src\intelligence\sentiment\real_analyzer.rs:122:9
    |
122 |         println!("   ­ƒÄ» Overall sentiment: {:.3} (confidence: {:.2})", overall_sentiment, total_weight);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
122 -         println!("   ­ƒÄ» Overall sentiment: {:.3} (confidence: {:.2})", overall_sentiment, total_weight);
122 +         println!("   ­ƒÄ» Overall sentiment: {overall_sentiment:.3} (confidence: {total_weight:.2})");
    |

warning: variables can be used directly in the `format!` string
   --> src\intelligence\sentiment\real_analyzer.rs:133:25
    |
133 |         let cache_key = format!("sentiment_{}", symbol);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
133 -         let cache_key = format!("sentiment_{}", symbol);
133 +         let cache_key = format!("sentiment_{symbol}");
    |

warning: variables can be used directly in the `format!` string
   --> src\intelligence\sentiment\real_analyzer.rs:183:75
    |
183 |                     if let Ok(post_sentiment) = self.scrape_reddit_posts(&format!("{} {}", symbol, subreddit)).await {
    |                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
183 -                     if let Ok(post_sentiment) = self.scrape_reddit_posts(&format!("{} {}", symbol, subreddit)).await {
183 +                     if let Ok(post_sentiment) = self.scrape_reddit_posts(&format!("{symbol} {subreddit}")).await {
    |

warning: clamp-like pattern without using clamp function
   --> src\intelligence\sentiment\real_analyzer.rs:194:12
    |
194 |         Ok((sentiment / subreddits.len() as f64).max(-1.0).min(1.0))
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `(sentiment / subreddits.len() as f64).clamp(-1.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: unused `self` argument
   --> src\intelligence\sentiment\real_analyzer.rs:198:38
    |
198 |     fn get_symbol_baseline_sentiment(&self, symbol: &str) -> f64 {
    |                                      ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this could be rewritten as `let...else`
   --> src\intelligence\sentiment\real_analyzer.rs:222:9
    |
222 | /         let response = match client.get(&url).send().await {
223 | |             Ok(resp) => resp,
224 | |             Err(_) => return Ok(0.0), // Neutral fallback
225 | |         };
    | |__________^ help: consider writing: `let Ok(response) = client.get(&url).send().await else { return Ok(0.0) };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: casts from `i32` to `f64` can be expressed infallibly using `From`
   --> src\intelligence\sentiment\real_analyzer.rs:246:34
    |
246 |             Ok(total_sentiment / post_count as f64)
    |                                  ^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
246 -             Ok(total_sentiment / post_count as f64)
246 +             Ok(total_sentiment / f64::from(post_count))
    |

warning: this could be rewritten as `let...else`
   --> src\intelligence\sentiment\real_analyzer.rs:268:9
    |
268 | /         let response = match client.get(&search_url).send().await {
269 | |             Ok(resp) => resp,
270 | |             Err(_) => {
...   |
274 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
268 ~         let Ok(response) = client.get(&search_url).send().await else {
269 +                 // Fallback to neutral if Reddit is unavailable
270 +                 return Ok(0.0);
271 +             };
    |

warning: this could be rewritten as `let...else`
   --> src\intelligence\sentiment\real_analyzer.rs:276:9
    |
276 | /         let html_content = match response.text().await {
277 | |             Ok(text) => text,
278 | |             Err(_) => return Ok(0.0),
279 | |         };
    | |__________^ help: consider writing: `let Ok(html_content) = response.text().await else { return Ok(0.0) };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: multiply and add expressions can be calculated more efficiently and accurately
   --> src\intelligence\sentiment\real_analyzer.rs:306:30
    |
306 |                 let weight = 1.0 + (i as f64 * 0.1); // Recent posts get higher weight
    |                              ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(i as f64).mul_add(0.1, 1.0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops

warning: clamp-like pattern without using clamp function
   --> src\intelligence\sentiment\real_analyzer.rs:311:12
    |
311 |         Ok((weighted_sum / total_weight).max(-1.0).min(1.0))
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `(weighted_sum / total_weight).clamp(-1.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: variables can be used directly in the `format!` string
   --> src\intelligence\sentiment\real_analyzer.rs:318:13
    |
318 |             format!("site:coindesk.com {}", symbol),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
318 -             format!("site:coindesk.com {}", symbol),
318 +             format!("site:coindesk.com {symbol}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\intelligence\sentiment\real_analyzer.rs:319:13
    |
319 |             format!("site:cointelegraph.com {}", symbol),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
319 -             format!("site:cointelegraph.com {}", symbol),
319 +             format!("site:cointelegraph.com {symbol}"),
    |

warning: variables can be used directly in the `format!` string
   --> src\intelligence\sentiment\real_analyzer.rs:320:13
    |
320 |             format!("site:decrypt.co {}", symbol),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
320 -             format!("site:decrypt.co {}", symbol),
320 +             format!("site:decrypt.co {symbol}"),
    |

warning: casts from `i32` to `f64` can be expressed infallibly using `From`
   --> src\intelligence\sentiment\real_analyzer.rs:334:34
    |
334 |             Ok(total_sentiment / source_count as f64)
    |                                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
334 -             Ok(total_sentiment / source_count as f64)
334 +             Ok(total_sentiment / f64::from(source_count))
    |

warning: this could be rewritten as `let...else`
   --> src\intelligence\sentiment\real_analyzer.rs:355:9
    |
355 | /         let response = match client.get(&search_url).send().await {
356 | |             Ok(resp) => resp,
357 | |             Err(_) => return Ok(0.0), // Neutral fallback
358 | |         };
    | |__________^ help: consider writing: `let Ok(response) = client.get(&search_url).send().await else { return Ok(0.0) };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
   --> src\intelligence\sentiment\real_analyzer.rs:360:9
    |
360 | /         let html_content = match response.text().await {
361 | |             Ok(text) => text,
362 | |             Err(_) => return Ok(0.0),
363 | |         };
    | |__________^ help: consider writing: `let Ok(html_content) = response.text().await else { return Ok(0.0) };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: clamp-like pattern without using clamp function
   --> src\intelligence\sentiment\real_analyzer.rs:395:12
    |
395 |         Ok((average_sentiment * 0.8).max(-1.0).min(1.0))
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `(average_sentiment * 0.8).clamp(-1.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> src\intelligence\sentiment\real_analyzer.rs:423:9
    |
423 | /         struct FearGreedResponse {
424 | |             data: Vec<FearGreedData>,
425 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements
    = note: `#[warn(clippy::items_after_statements)]` implied by `#[warn(clippy::pedantic)]`

warning: this could be rewritten as `let...else`
   --> src\intelligence\sentiment\real_analyzer.rs:408:9
    |
408 | /         let response = match client.get(api_url).send().await {
409 | |             Ok(resp) => resp,
410 | |             Err(_) => {
...   |
414 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
408 ~         let Ok(response) = client.get(api_url).send().await else {
409 +                 // Fallback: analyze market conditions from price movements
410 +                 return self.calculate_market_sentiment_fallback().await;
411 +             };
    |

warning: this could be rewritten as `let...else`
   --> src\intelligence\sentiment\real_analyzer.rs:416:9
    |
416 | /         let json_text = match response.text().await {
417 | |             Ok(text) => text,
418 | |             Err(_) => return self.calculate_market_sentiment_fallback().await,
419 | |         };
    | |__________^ help: consider writing: `let Ok(json_text) = response.text().await else { return self.calculate_market_sentiment_fallback().await };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: clamp-like pattern without using clamp function
   --> src\intelligence\sentiment\real_analyzer.rs:442:35
    |
442 |                         return Ok(normalized.max(-1.0).min(1.0));
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `normalized.clamp(-1.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: variables can be used directly in the `format!` string
   --> src\intelligence\sentiment\real_analyzer.rs:481:9
    |
481 |         println!("   ­ƒôè Historical sentiment analysis for {} ({} min timeframe): neutral", symbol, minutes);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
481 -         println!("   ­ƒôè Historical sentiment analysis for {} ({} min timeframe): neutral", symbol, minutes);
481 +         println!("   ­ƒôè Historical sentiment analysis for {symbol} ({minutes} min timeframe): neutral");
    |

warning: unused `self` argument
   --> src\intelligence\sentiment\real_analyzer.rs:486:31
    |
486 |     fn analyze_text_sentiment(&self, text: &str) -> f64 {
    |                               ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casts from `i32` to `f64` can be expressed infallibly using `From`
   --> src\intelligence\sentiment\real_analyzer.rs:530:63
    |
530 |         let net_sentiment = (bullish_score - bearish_score) / total_sentiment_words as f64;
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
530 -         let net_sentiment = (bullish_score - bearish_score) / total_sentiment_words as f64;
530 +         let net_sentiment = (bullish_score - bearish_score) / f64::from(total_sentiment_words);
    |

warning: clamp-like pattern without using clamp function
   --> src\intelligence\sentiment\real_analyzer.rs:533:9
    |
533 |         net_sentiment.max(-1.0).min(1.0)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `net_sentiment.clamp(-1.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: unused `self` argument
   --> src\intelligence\sentiment\real_analyzer.rs:536:30
    |
536 |     fn count_bullish_signals(&self, scores: &HashMap<String, f64>) -> u32 {
    |                              ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\intelligence\sentiment\real_analyzer.rs:540:30
    |
540 |     fn count_bearish_signals(&self, scores: &HashMap<String, f64>) -> u32 {
    |                              ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> src\intelligence\sentiment\real_analyzer.rs:544:30
    |
544 |     fn count_neutral_signals(&self, scores: &HashMap<String, f64>) -> u32 {
    |                              ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this method could have a `#[must_use]` attribute
  --> src\intelligence\sentiment\twitter_client.rs:59:5
   |
59 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src\intelligence\sentiment\twitter_client.rs:69:5
   |
69 |     pub fn with_credentials(mut self, credentials: TwitterCredentials) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_credentials(mut self, credentials: TwitterCredentials) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src\intelligence\sentiment\twitter_client.rs:69:5
   |
69 | /     pub fn with_credentials(mut self, credentials: TwitterCredentials) -> Self {
70 | |         self.credentials = Some(credentials);
71 | |         self
72 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: variables can be used directly in the `format!` string
  --> src\intelligence\sentiment\twitter_client.rs:99:27
   |
99 |                 Err(e) => eprintln!("Failed to search tweets for {}: {}", query, e),
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
99 -                 Err(e) => eprintln!("Failed to search tweets for {}: {}", query, e),
99 +                 Err(e) => eprintln!("Failed to search tweets for {query}: {e}"),
   |

warning: unused `self` argument
   --> src\intelligence\sentiment\twitter_client.rs:150:29
    |
150 |     fn build_search_queries(&self, symbol: &str) -> Vec<String> {
    |                             ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src\intelligence\sentiment\twitter_client.rs:175:5
    |
175 | /     fn parse_tweet_data(&self, tweet: &serde_json::Value) -> Result<TweetData> {
176 | |         let id = tweet["id"].as_str().unwrap_or("").to_string();
177 | |         let text = tweet["text"].as_str().unwrap_or("").to_string();
178 | |         let author_id = tweet["author_id"].as_str().unwrap_or("").to_string();
...   |
198 | |         })
199 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
175 -     fn parse_tweet_data(&self, tweet: &serde_json::Value) -> Result<TweetData> {
175 +     fn parse_tweet_data(&self, tweet: &serde_json::Value) -> intelligence::sentiment::twitter_client::TweetData {
    |
help: ...and then change returning expressions
    |
191 ~         TweetData {
192 +             id,
193 +             text,
194 +             author_id,
195 +             public_metrics,
196 +             created_at,
197 +             sentiment_score,
198 +         }
    |

warning: unused `self` argument
   --> src\intelligence\sentiment\twitter_client.rs:202:40
    |
202 |     fn calculate_sentiment_from_tweets(&self, symbol: &str, tweets: Vec<TweetData>) -> TwitterSentimentData {
    |                                        ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this argument is passed by value, but not consumed in the function body
   --> src\intelligence\sentiment\twitter_client.rs:202:69
    |
202 |     fn calculate_sentiment_from_tweets(&self, symbol: &str, tweets: Vec<TweetData>) -> TwitterSentimentData {
    |                                                                     ^^^^^^^^^^^^^^ help: consider changing the type to: `&[TweetData]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: casts from `u32` to `f64` can be expressed infallibly using `From`
   --> src\intelligence\sentiment\twitter_client.rs:211:43
    |
211 |             let engagement_weight = 1.0 + ((tweet.public_metrics.like_count + tweet.public_metrics.retweet_count) as f64).log10().max(0.0);
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `f64::from` instead
    |
211 -             let engagement_weight = 1.0 + ((tweet.public_metrics.like_count + tweet.public_metrics.retweet_count) as f64).log10().max(0.0);
211 +             let engagement_weight = 1.0 + f64::from(tweet.public_metrics.like_count + tweet.public_metrics.retweet_count).log10().max(0.0);
    |

warning: unused `self` argument
   --> src\intelligence\sentiment\twitter_client.rs:260:34
    |
260 |     fn calculate_tweet_sentiment(&self, text: &str) -> f64 {
    |                                  ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: clamp-like pattern without using clamp function
   --> src\intelligence\sentiment\twitter_client.rs:295:9
    |
295 |         sentiment.max(-1.0).min(1.0)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `sentiment.clamp(-1.0, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp

warning: this method could have a `#[must_use]` attribute
   --> src\intelligence\sentiment\twitter_client.rs:299:5
    |
299 |     pub fn get_rate_limit_status(&self) -> (u32, DateTime<Utc>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_rate_limit_status(&self) -> (u32, DateTime<Utc>)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\intelligence\sentiment\twitter_client.rs:299:5
    |
299 | /     pub fn get_rate_limit_status(&self) -> (u32, DateTime<Utc>) {
300 | |         (self.rate_limit_remaining, self.rate_limit_reset)
301 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
299 |     pub const fn get_rate_limit_status(&self) -> (u32, DateTime<Utc>) {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src\intelligence\sentiment\twitter_client.rs:304:5
    |
304 |     pub fn has_credentials(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn has_credentials(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this could be a `const fn`
   --> src\intelligence\sentiment\twitter_client.rs:304:5
    |
304 | /     pub fn has_credentials(&self) -> bool {
305 | |         self.credentials.is_some()
306 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
304 |     pub const fn has_credentials(&self) -> bool {
    |         +++++

warning: item in documentation is missing backticks
  --> src\lib.rs:53:28
   |
53 | /// Current version of the SniperForge Core library
   |                            ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
53 - /// Current version of the SniperForge Core library
53 + /// Current version of the `SniperForge` Core library
   |

warning: item in documentation is missing backticks
  --> src\lib.rs:56:20
   |
56 | /// Initialize the SniperForge Core library with logging
   |                    ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
56 - /// Initialize the SniperForge Core library with logging
56 + /// Initialize the `SniperForge` Core library with logging
   |

warning: unused `async` for function with no await statements
   --> src\trading\arbitrage.rs:343:5
    |
343 | /     async fn analyze_pair(
344 | |         &self,
345 | |         pair: &ArbitragePair,
346 | |         market_data: &MarketData,
...   |
381 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async
    = note: `#[warn(clippy::unused_async)]` implied by `#[warn(clippy::pedantic)]`

warning: unused `async` for function with no await statements
   --> src\trading\arbitrage.rs:417:5
    |
417 | /     pub async fn get_wallet_balance(&self) -> Result<f64> {
418 | |         let balance = self.rpc_client
419 | |             .get_balance(&self.wallet.pubkey())
420 | |             .map_err(|e| format!("Failed to get wallet balance: {}", e))?;
421 | |             
422 | |         Ok(balance as f64 / 1_000_000_000.0) // Convert lamports to SOL
423 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\real_executor.rs:364:5
    |
364 | /     async fn get_real_quote(&self, _request: &RealTradeRequest) -> Result<JupiterQuoteResponse, PlatformError> {
365 | |         debug!("­ƒÆ░ Getting real quote from Jupiter");
...   |
371 | |         Err(PlatformError::JupiterQuoteError("Real quote functionality temporarily disabled during migration".to_string()))
372 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\real_executor.rs:395:5
    |
395 | /     async fn execute_blockchain_swap(
396 | |         &self,
397 | |         _quote: &JupiterQuoteResponse,
398 | |         request: &RealTradeRequest,
...   |
430 | |         })
431 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\real_executor.rs:434:5
    |
434 | /     pub async fn get_real_trading_stats(&self) -> Result<RealTradingStats, PlatformError> {
435 | |         info!("­ƒôè Gathering real trading statistics from blockchain");
...   |
449 | |         })
450 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\engine.rs:410:5
    |
410 | /     pub async fn validate_quote(&self, request: &RealSwapRequest) -> Result<QuoteValidation, PlatformError> {
411 | |         debug!("­ƒöì Validating quote for swap: {} -> {}", request.input_mint, request.output_mint);
412 | |
413 | |         let mut validation_errors = Vec::new();
...   |
470 | |         })
471 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\engine.rs:474:5
    |
474 | /     pub async fn get_swap_info(&self, request: &RealSwapRequest) -> Result<SwapInfo, PlatformError> {
475 | |         debug!("­ƒôè Getting swap information for: {} -> {}", request.input_mint, request.output_mint);
...   |
492 | |         })
493 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\mod.rs:352:5
    |
352 | /     async fn get_quote(&self, _request: &TradeRequest) -> Result<JupiterQuoteResponse, PlatformError> {
353 | |         // TODO: Implement quote request using the new Jupiter client
354 | |         // For now, return a placeholder error until Jupiter client methods are available
355 | |         Err(PlatformError::JupiterQuoteError("Quote functionality temporarily disabled during migration".to_string()))
356 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\mod.rs:431:5
    |
431 | /     async fn validate_quote(&self, _quote: &JupiterQuoteResponse, _request: &TradeRequest) -> Result<bool, PlatformError> {
432 | |         // TODO: Implement quote validation when Jupiter response methods are available
433 | |         // For now, return true as placeholder
434 | |         warn!("ÔÜá´©Å Quote validation temporarily disabled during migration");
435 | |         Ok(true)
436 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\mod.rs:439:5
    |
439 | /     async fn execute_devnet_trade(
440 | |         &self,
441 | |         _quote: &JupiterQuoteResponse,
442 | |         _request: &TradeRequest,
...   |
454 | |         })
455 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\mod.rs:458:5
    |
458 | /     async fn execute_mainnet_real_trade(
459 | |         &self,
460 | |         _quote: &JupiterQuoteResponse,
461 | |         _request: &TradeRequest,
...   |
476 | |         })
477 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\mod.rs:480:5
    |
480 | /     async fn execute_testnet_trade(
481 | |         &self,
482 | |         _quote: &JupiterQuoteResponse,
483 | |         _request: &TradeRequest,
...   |
495 | |         })
496 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\mod.rs:499:5
    |
499 | /     async fn execute_simulation_trade(
500 | |         &self,
501 | |         _quote: &JupiterQuoteResponse,
502 | |         _request: &TradeRequest,
...   |
514 | |         })
515 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\mod.rs:555:5
    |
555 | /     pub async fn get_trade_quote(
556 | |         &self,
557 | |         _input_mint: &str,
558 | |         _output_mint: &str,
...   |
563 | |         Err(PlatformError::JupiterQuoteError("Trade quote functionality temporarily disabled during migration".to_string()))
564 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\execution\mod.rs:595:5
    |
595 | /     pub async fn get_execution_stats(&self) -> ExecutionStats {
596 | |         // TODO: Implement statistics tracking
597 | |         ExecutionStats::default()
598 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
  --> src\trading\risk.rs:31:5
   |
31 | /     pub async fn assess_opportunity(&self, opportunity: &ArbitrageOpportunity) -> Result<RiskAssessment> {
32 | |         let mut assessment = RiskAssessment::default();
33 | |         assessment.is_acceptable = true; // Inicializar como aceptable, cambiar si hay problemas
34 | |         let mut risk_factors = Vec::new();
...  |
91 | |         Ok(assessment)
92 | |     }
   | |_____^
   |
   = help: consider removing the `async` from this function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\risk.rs:113:5
    |
113 | /     pub async fn check_daily_loss_limit(&self, current_loss: f64) -> bool {
114 | |         current_loss < self.max_daily_loss
115 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\triangular.rs:289:5
    |
289 | /     async fn calculate_triangular_profit(&self, path: &[String]) -> Result<TriangularOpportunity> {
290 | |         if path.len() != 4 {
291 | |             return Err(anyhow!("Path inv├ílido para c├ílculo triangular"));
...   |
348 | |         })
349 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\triangular.rs:403:5
    |
403 | /     async fn estimate_remaining_prices(&mut self) -> Result<()> {
404 | |         debug!("­ƒº« Estimando precios faltantes...");
...   |
449 | |         Ok(())
450 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\triangular.rs:526:5
    |
526 | /     pub async fn integrate_with_price_feeds(&mut self, _price_feeds: &crate::apis::RealPriceFeeds) -> Result<()> {
527 | |         info!("­ƒöä Integrando triangular arbitrage con price feeds reales...");
...   |
545 | |         Ok(())
546 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\triangular.rs:624:1
    |
624 | / pub async fn execute_triangular_arbitrage(_opportunity: &TriangularOpportunity) -> Result<String> {
625 | |     // TODO: Implementar ejecuci├│n real de arbitraje triangular
626 | |     // Por ahora retorna simulaci├│n
627 | |     warn!("­ƒÜº Ejecuci├│n triangular en desarrollo - simulando ├®xito");
628 | |     Ok("TRIANGULAR_EXECUTION_VALIDATED".to_string())
629 | | }
    | |_^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\flash_loan.rs:135:5
    |
135 | /     pub async fn scan_flash_loan_opportunities(&mut self) -> Result<Vec<FlashLoanOpportunity>> {
136 | |         if !self.config.enabled {
137 | |             debug!("ÔÜá´©Å Flash loans deshabilitados");
138 | |             return Ok(Vec::new());
...   |
189 | |         Ok(opportunities)
190 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\flash_loan.rs:193:5
    |
193 | /     pub async fn execute_flash_loan(&mut self, opportunity: &FlashLoanOpportunity, simulate: bool) -> Result<bool> {
194 | |         if simulate {
195 | |             info!("­ƒÅª SIMULANDO ejecuci├│n de flash loan - {} SOL pr├®stamo, {:.6} SOL profit neto", 
196 | |                   opportunity.loan_amount_sol, opportunity.net_profit_sol);
...   |
220 | |         Ok(false)
221 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\flash_loan.rs:383:1
    |
383 | / pub async fn execute_flash_loan_arbitrage(_opportunity: &FlashLoanOpportunity) -> Result<String> {
384 | |     // TODO: Implementar ejecuci├│n real de flash loan arbitrage
385 | |     // Por ahora retorna simulaci├│n
386 | |     warn!("­ƒÜº Ejecuci├│n flash loan en desarrollo - simulando ├®xito");
387 | |     Ok("FLASH_LOAN_EXECUTION_VALIDATED".to_string())
388 | | }
    | |_^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\cross_chain.rs:514:5
    |
514 | /     async fn find_opportunity_between_chains(&self, source_chain: &str, target_chain: &str) -> Option<CrossChainOpportunity> {
515 | |         for token in self.price_monitor.get_supported_tokens() {
516 | |             if let Some(price_diff_pct) = self.price_monitor.get_price_difference(token, source_chain, target_chain) {
...   |
560 | |         None
561 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\cross_chain.rs:564:5
    |
564 | /     pub async fn execute_cross_chain_trade(&mut self, opportunity: &CrossChainOpportunity, simulate: bool) -> Result<bool> {
565 | |         if simulate {
566 | |             info!("­ƒîÉ SIMULANDO arbitraje cross-chain - {} ÔåÆ {}, {} USD trade, {:.2} USD profit neto", 
567 | |                   opportunity.source_chain, opportunity.target_chain,
...   |
599 | |         Ok(false)
600 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\cross_chain.rs:789:1
    |
789 | / pub async fn execute_cross_chain_arbitrage(_opportunity: &CrossChainOpportunity) -> Result<String> {
790 | |     // TODO: Implementar ejecuci├│n real de arbitraje cross-chain
791 | |     // Por ahora retorna simulaci├│n
792 | |     warn!("­ƒÜº Ejecuci├│n cross-chain en desarrollo - simulando ├®xito");
793 | |     Ok("CROSS_CHAIN_EXECUTION_VALIDATED".to_string())
794 | | }
    | |_^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\enhanced_system.rs:141:5
    |
141 | /     pub async fn new(config: Option<EnhancedTradingConfig>, settings: SimpleConfig) -> Result<Self> {
142 | |         let config = config.unwrap_or_default();
143 | |         let system_start_time = Utc::now();
...   |
168 | |         })
169 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\enhanced_system.rs:190:5
    |
190 | /     async fn scan_market_opportunities(&self) -> Result<u32> {
191 | |         // Implement real market scanning logic using available APIs
192 | |         let mut opportunities = 0;
...   |
204 | |         Ok(opportunities)
205 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\enhanced_system.rs:208:5
    |
208 | /     async fn validate_opportunity_parameters(&self, opportunity_id: usize) -> Result<bool> {
209 | |         // Implement validation logic
210 | |         debug!("Validating opportunity {}", opportunity_id);
...   |
215 | |         Ok(validation_passed)
216 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\enhanced_system.rs:219:5
    |
219 | /     async fn record_analysis_result(&mut self, opportunity_id: &str, pair: &str, validation_result: bool) {
220 | |         debug!("Recording analysis result for {} on {}: {}", opportunity_id, pair, validation_result);
...   |
228 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\enhanced_system.rs:231:5
    |
231 | /     pub async fn update_system_status(&mut self) {
232 | |         self.system_status.last_update = Utc::now();
233 | |         self.system_status.uptime_seconds = 
234 | |             (Utc::now() - self.system_start_time).num_seconds() as u64;
235 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\enhanced_system.rs:238:5
    |
238 | /     pub async fn display_dashboard(&self) {
239 | |         println!("\nÔòöÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòù");
240 | |         println!("Ôòæ                         ­ƒÜÇ ENHANCED TRADING SYSTEM v2.0                         Ôòæ");
241 | |         println!("ÔòáÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòú");
...   |
255 | |         println!("ÔòÜÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòÉÔòØ");
256 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\enhanced_system.rs:274:5
    |
274 | /     pub async fn stop_system(&mut self) {
275 | |         self.system_status.is_active = false;
276 | |         info!("­ƒøæ Enhanced Trading System detenido");
277 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:113:5
    |
113 | /     async fn start_order_processing_loop(self: Arc<Self>) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
114 | |         let queue = Arc::clone(&self.order_queue);
115 | |         let is_running = self.is_running.clone();
116 | |         let performance_monitor = Arc::clone(&self.performance_monitor);
...   |
146 | |         Ok(())
147 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\trading\hft_engine.rs:136:84
    |
136 |                     Self::process_order_batch(&batch_orders, &performance_monitor).await;
    |                                                                                    ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:185:5
    |
185 | /     async fn execute_market_order(_order: &HftOrder) {
...   |
188 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:190:5
    |
190 | /     async fn execute_limit_order(_order: &HftOrder) {
...   |
193 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:195:5
    |
195 | /     async fn execute_conditional_order(_order: &HftOrder) {
...   |
198 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:201:5
    |
201 | /     async fn warm_memory_pool(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
202 | |         let mut pool = self.memory_pool.write();
...   |
219 | |         Ok(())
220 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:223:5
    |
223 | /     async fn get_from_memory_pool(&self, order: HftOrder) -> Result<Box<HftOrder>, Box<dyn std::error::Error + Send + Sync>> {
224 | |         let mut pool = self.memory_pool.write();
225 | |         
226 | |         if let Some(mut boxed_order) = pool.pop_front() {
...   |
234 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:237:5
    |
237 | /     async fn return_to_memory_pool(&self, order: Box<HftOrder>) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
238 | |         let mut pool = self.memory_pool.write();
239 | |         
240 | |         if pool.len() < 10000 {
...   |
245 | |         Ok(())
246 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:249:5
    |
249 | /     async fn update_performance_metrics(&self, latency_ns: u64) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
250 | |         self.performance_monitor.update_latency(latency_ns);
251 | |         Ok(())
252 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:255:5
    |
255 | /     async fn start_performance_monitoring(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
256 | |         let performance_monitor = Arc::clone(&self.performance_monitor);
257 | |         
258 | |         tokio::spawn(async move {
...   |
265 | |         Ok(())
266 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\trading\hft_engine.rs:260:77
    |
260 |                 tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
    |                                                                             ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\trading\hft_engine.rs:274:5
    |
274 | /     pub async fn stop(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
275 | |         self.is_running.store(false, Ordering::SeqCst);
276 | |         Ok(())
277 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\apis\price_feeds.rs:121:5
    |
121 | /     pub async fn start_price_updates(&self, interval: Duration) -> Result<()> {
122 | |         info!("Starting automatic price updates every {:?}", interval);
123 | |         
124 | |         let manager = self.clone();
...   |
137 | |         Ok(())
138 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\apis\price_feeds.rs:129:39
    |
129 |                 interval_timer.tick().await;
    |                                       ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\apis\real_price_feeds.rs:220:5
    |
220 | /     async fn create_arbitrage_opportunity(
221 | |         &self,
222 | |         symbol: &str,
223 | |         mint: &str,
...   |
252 | |         })
253 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\apis\real_price_feeds.rs:342:5
    |
342 | /     async fn get_fallback_price(&self, mint: &str) -> Result<DEXPrice> {
343 | |         let (symbol, estimated_price) = match mint {
344 | |             "So11111111111111111111111111111111111111112" => ("SOL", 150.0),
345 | |             "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" => ("USDC", 1.0),
...   |
364 | |         })
365 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\secrets.rs:288:5
    |
288 | /     pub async fn create_backup(&self) -> Result<PathBuf> {
289 | |         let backup_path = self.secrets_path.with_extension(
290 | |             format!("backup.{}", Utc::now().format("%Y%m%d_%H%M%S"))
291 | |         );
...   |
297 | |         Ok(backup_path)
298 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\secrets.rs:323:5
    |
323 | /     async fn decrypt_secret(&self, encrypted_secret: &EncryptedSecret) -> Result<String> {
324 | |         let key = self.master_key.as_ref()
325 | |             .context("Secrets manager not initialized")?;
...   |
343 | |             .context("Decrypted data is not valid UTF-8")
344 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\secrets.rs:352:5
    |
352 | /     async fn load_secrets_container_raw(&self) -> Result<SecretsContainer> {
353 | |         let content = fs::read_to_string(&self.secrets_path)
354 | |             .context("Failed to read secrets file")?;
...   |
357 | |             .context("Failed to parse secrets file")
358 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\secrets.rs:361:5
    |
361 | /     async fn save_secrets_container(&self, container: &SecretsContainer) -> Result<()> {
362 | |         let content = serde_json::to_string_pretty(container)
363 | |             .context("Failed to serialize secrets")?;
...   |
368 | |         Ok(())
369 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\keystore.rs:519:5
    |
519 | /     async fn encrypt_key_data(
520 | |         &self,
521 | |         key_id: &str,
522 | |         data: &[u8],
...   |
548 | |         })
549 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\keystore.rs:551:5
    |
551 | /     async fn decrypt_key_data(&self, entry: &EncryptedKeyEntry) -> Result<PrivateKeyData> {
552 | |         let master_key = self.master_key.as_ref()
553 | |             .context("Keystore not unlocked")?;
...   |
567 | |         self.deserialize_key_data(&plaintext, &entry.key_type)
568 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\keystore.rs:574:5
    |
574 | /     async fn load_keystore_container_raw(&self) -> Result<KeystoreContainer> {
575 | |         let content = fs::read_to_string(&self.keystore_path)
576 | |             .context("Failed to read keystore file")?;
...   |
579 | |             .context("Failed to parse keystore file")
580 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\keystore.rs:582:5
    |
582 | /     async fn save_keystore_container(&self, container: &KeystoreContainer) -> Result<()> {
583 | |         let content = serde_json::to_string_pretty(container)
584 | |             .context("Failed to serialize keystore")?;
...   |
589 | |         Ok(())
590 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\keystore.rs:613:5
    |
613 | /     async fn log_audit_event(&self, event_type: &str, key_id: Option<&str>, details: &str) -> Result<()> {
614 | |         // In a production system, this might write to a separate audit log
615 | |         let _entry = AuditEntry {
616 | |             timestamp: Utc::now(),
...   |
630 | |         Ok(())
631 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\validation.rs:196:5
    |
196 | /     pub async fn validate_solana_address(&mut self, address: &str) -> Result<ValidationResult> {
197 | |         self.rate_limiter.check_rate_limit()?;
198 | |         let start_time = std::time::Instant::now();
...   |
257 | |         })
258 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\validation.rs:261:5
    |
261 | /     pub async fn validate_price_data(&mut self, price: &str, source: &str) -> Result<ValidationResult> {
262 | |         self.rate_limiter.check_rate_limit()?;
263 | |         let start_time = std::time::Instant::now();
...   |
354 | |         })
355 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\validation.rs:358:5
    |
358 | /     pub async fn validate_api_response(&mut self, data: &serde_json::Value, api_name: &str) -> Result<ValidationResult> {
359 | |         self.rate_limiter.check_rate_limit()?;
360 | |         let start_time = std::time::Instant::now();
...   |
439 | |         })
440 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\validation.rs:443:5
    |
443 | /     pub async fn validate_trading_amount(&mut self, amount: u64, token_symbol: &str) -> Result<ValidationResult> {
444 | |         self.rate_limiter.check_rate_limit()?;
445 | |         let start_time = std::time::Instant::now();
...   |
508 | |         })
509 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\validation.rs:512:5
    |
512 | /     pub async fn validate_url(&mut self, url: &str, allowed_hosts: Option<&[String]>) -> Result<ValidationResult> {
513 | |         self.rate_limiter.check_rate_limit()?;
514 | |         let start_time = std::time::Instant::now();
...   |
602 | |         })
603 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:322:5
    |
322 | /     pub async fn register_user(
323 | |         &mut self,
324 | |         username: &str,
325 | |         email: &str,
...   |
375 | |         Ok(user_id)
376 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:538:5
    |
538 | /     pub async fn validate_token(&self, token: &str) -> Result<JwtClaims> {
539 | |         let validation = Validation::new(Algorithm::HS256);
540 | |         
541 | |         let token_data = decode::<JwtClaims>(token, &self.jwt_keys.decoding_key, &validation)
...   |
553 | |         Ok(token_data.claims)
554 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:557:5
    |
557 | /     pub async fn check_permission(&self, user_id: &str, permission: &str) -> Result<bool> {
558 | |         if let Some(user) = self.users.get(user_id) {
559 | |             Ok(user.permissions.contains(permission))
560 | |         } else {
...   |
563 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:566:5
    |
566 | /     pub async fn check_role(&self, user_id: &str, role: &str) -> Result<bool> {
567 | |         if let Some(user) = self.users.get(user_id) {
568 | |             Ok(user.roles.contains(role))
569 | |         } else {
...   |
572 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:575:5
    |
575 | /     pub async fn logout(&mut self, session_id: &str) -> Result<()> {
576 | |         if let Some(_session) = self.sessions.remove(session_id) {
577 | |             if self.config.enable_audit_logging {
578 | |                 log::info!("User logged out: session {}", session_id);
...   |
581 | |         Ok(())
582 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:585:5
    |
585 | /     pub async fn change_password(
586 | |         &mut self,
587 | |         user_id: &str,
588 | |         old_password: &str,
...   |
627 | |         Ok(())
628 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:631:5
    |
631 | /     pub async fn cleanup_expired_sessions(&mut self) -> Result<usize> {
632 | |         let now = Utc::now();
633 | |         let initial_count = self.sessions.len();
...   |
643 | |         Ok(removed_count)
644 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:798:5
    |
798 | /     async fn verify_mfa_code(&self, _user_id: &str, code: &str) -> Result<bool> {
799 | |         // In a real implementation, this would verify TOTP codes
800 | |         // For now, we'll accept "123456" as a valid code
801 | |         Ok(code == "123456")
802 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:804:5
    |
804 | /     async fn record_failed_login(&mut self, user_id: &str) -> Result<()> {
805 | |         if let Some(user) = self.users.get_mut(user_id) {
806 | |             user.failed_login_attempts += 1;
...   |
813 | |         Ok(())
814 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:816:5
    |
816 | /     async fn reset_failed_login_attempts(&mut self, user_id: &str) -> Result<()> {
817 | |         if let Some(user) = self.users.get_mut(user_id) {
818 | |             user.failed_login_attempts = 0;
819 | |             if user.status == AccountStatus::Locked {
...   |
824 | |         Ok(())
825 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:827:5
    |
827 | /     async fn update_last_login(&mut self, user_id: &str) -> Result<()> {
828 | |         if let Some(user) = self.users.get_mut(user_id) {
829 | |             user.last_login = Some(Utc::now());
...   |
832 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\auth.rs:834:5
    |
834 | /     async fn cleanup_user_sessions(&mut self, user_id: &str) -> Result<()> {
835 | |         let user_sessions: Vec<_> = self.sessions
836 | |             .iter()
837 | |             .filter(|(_, session)| session.user_id == user_id)
...   |
856 | |         Ok(())
857 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\encryption.rs:489:5
    |
489 | /     async fn encrypt_aes_gcm(&self, data: &[u8], key: &[u8]) -> Result<(Vec<u8>, Vec<u8>, Option<Vec<u8>>)> {
490 | |         let key = Key::<Aes256Gcm>::from_slice(key);
491 | |         let cipher = Aes256Gcm::new(key);
492 | |         let nonce = Aes256Gcm::generate_nonce(&mut OsRng);
...   |
498 | |         Ok((ciphertext, nonce.to_vec(), None))
499 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\encryption.rs:501:5
    |
501 | /     async fn decrypt_aes_gcm(&self, ciphertext: &[u8], nonce: &[u8], _tag: Option<&[u8]>, key: &[u8]) -> Result<Vec<u8>> {
502 | |         let key = Key::<Aes256Gcm>::from_slice(key);
503 | |         let cipher = Aes256Gcm::new(key);
504 | |         let nonce = aes_gcm::Nonce::from_slice(nonce);
...   |
507 | |             .map_err(|e| anyhow::anyhow!("AES-GCM decryption failed: {:?}", e))
508 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\encryption.rs:510:5
    |
510 | /     async fn encrypt_chacha20_poly1305(&self, data: &[u8], key: &[u8]) -> Result<(Vec<u8>, Vec<u8>, Option<Vec<u8>>)> {
511 | |         let key = chacha20poly1305::Key::from_slice(key);
512 | |         let cipher = ChaCha20Poly1305::new(key);
513 | |         let nonce = ChaCha20Poly1305::generate_nonce(&mut OsRng);
...   |
519 | |         Ok((ciphertext, nonce.to_vec(), None))
520 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\encryption.rs:522:5
    |
522 | /     async fn decrypt_chacha20_poly1305(&self, ciphertext: &[u8], nonce: &[u8], key: &[u8]) -> Result<Vec<u8>> {
523 | |         let key = chacha20poly1305::Key::from_slice(key);
524 | |         let cipher = ChaCha20Poly1305::new(key);
525 | |         let nonce = chacha20poly1305::Nonce::from_slice(nonce);
...   |
528 | |             .map_err(|e| anyhow::anyhow!("ChaCha20Poly1305 decryption failed: {:?}", e))
529 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\encryption.rs:594:5
    |
594 | /     async fn derive_master_keys(&mut self, password: &str, _config: &EncryptionConfig) -> Result<()> {
595 | |         let salt = general_purpose::STANDARD.decode(&self.kdf_params.salt)?;
...   |
624 | |         Ok(())
625 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\encryption.rs:627:5
    |
627 | /     async fn get_data_encryption_key(
628 | |         &mut self,
629 | |         algorithm: &EncryptionAlgorithm,
630 | |         context: Option<&str>,
...   |
661 | |         Ok(dek)
662 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\risk_manager.rs:156:5
    |
156 | /     pub async fn assess_opportunity_risk(&mut self, 
157 | |                                        trade_amount_usd: f64,
158 | |                                        volatility: f64,
159 | |                                        liquidity_usd: f64,
...   |
257 | |         Ok(assessment)
258 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\wallet\mod.rs:419:5
    |
419 | /     async fn load_keypair(&self, config: &WalletConfig) -> Result<Keypair> {
420 | |         if let Some(keypair_data) = &config.keypair_data {
421 | |             // Load from base58 string
422 | |             let bytes = bs58::decode(keypair_data).into_vec().map_err(|e| {
...   |
446 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\wallet\mod.rs:514:5
    |
514 | /     async fn create_devnet_wallet(
515 | |         &self,
516 | |         env_config: &WalletEnvironmentConfig,
517 | |     ) -> Result<WalletConfig> {
...   |
540 | |         })
541 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\wallet\mod.rs:606:5
    |
606 | /     async fn start_balance_monitoring(&self) {
607 | |         let _wallets = self.wallets.clone();
608 | |
609 | |         tokio::spawn(async move {
...   |
618 | |         });
619 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\security\wallet\mod.rs:613:33
    |
613 |                 interval.tick().await;
    |                                 ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\wallet\mod.rs:622:5
    |
622 | /     async fn start_daily_reset_task(&self) {
623 | |         let daily_volumes = self.daily_volumes.clone();
624 | |
625 | |         tokio::spawn(async move {
...   |
636 | |         });
637 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\security\wallet\mod.rs:630:33
    |
630 |                 interval.tick().await;
    |                                 ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\security\mod.rs:394:5
    |
394 | /     async fn log_security_event(
395 | |         &mut self,
396 | |         event_type: SecurityEventType,
397 | |         severity: SecuritySeverity,
...   |
424 | |         Ok(())
425 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\analytics\ai_engine.rs:482:5
    |
482 | /     pub async fn predict_price(&mut self, token: &str, current_price: f64, horizon_minutes: u32) -> Result<Option<PricePrediction>> {
483 | |         if !self.config.enabled {
484 | |             return Ok(None);
...   |
525 | |         Ok(prediction)
526 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\analytics\ai_engine.rs:529:5
    |
529 | /     pub async fn optimize_strategy(&mut self, strategy_id: &str) -> Result<StrategyOptimization> {
530 | |         if !self.config.strategy_optimization_enabled {
531 | |             return Err(anyhow::anyhow!("Optimizaci├│n de estrategias deshabilitada"));
...   |
552 | |         Ok(optimization)
553 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\analytics\ai_engine.rs:556:5
    |
556 | /     pub async fn detect_market_anomalies(&mut self, token: &str, current_price: f64) -> Result<Option<MarketAnomaly>> {
557 | |         if !self.config.anomaly_detection_enabled {
558 | |             return Ok(None);
...   |
584 | |         Ok(anomaly)
585 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\analytics\performance_analytics.rs:596:5
    |
596 | /     async fn generate_time_based_report(&mut self, metrics: &[PerformanceMetric], score: f64) -> Result<()> {
597 | |         let now = Utc::now();
598 | |         
599 | |         info!("­ƒôè === REPORTE PERI├ôDICO DE PERFORMANCE ===");
...   |
631 | |         Ok(())
632 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\analytics\performance_analytics.rs:720:5
    |
720 | /     async fn generate_alerts_from_analysis(&mut self, analysis: &PerformanceAnalysis) {
721 | |         if !self.config.automatic_alerts_enabled {
722 | |             return;
...   |
773 | |         self.active_alerts.retain(|alert| alert.timestamp > cutoff);
774 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\monitoring\enterprise_monitor.rs:496:5
    |
496 | /     async fn start_metrics_collection(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
497 | |         let metrics_collector = Arc::clone(&self.metrics_collector);
498 | |         let is_active = Arc::clone(&self.is_active);
...   |
509 | |         Ok(())
510 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\monitoring\enterprise_monitor.rs:502:73
    |
502 |                 if let Err(e) = metrics_collector.collect_all_metrics().await {
    |                                                                         ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\monitoring\enterprise_monitor.rs:513:5
    |
513 | /     async fn start_performance_analytics(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
514 | |         let performance_analytics = Arc::clone(&self.performance_analytics);
515 | |         let is_active = Arc::clone(&self.is_active);
...   |
526 | |         Ok(())
527 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\monitoring\enterprise_monitor.rs:519:77
    |
519 |                 if let Err(e) = performance_analytics.analyze_performance().await {
    |                                                                             ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\monitoring\enterprise_monitor.rs:530:5
    |
530 | /     async fn start_health_checking(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
531 | |         let health_checker = Arc::clone(&self.health_checker);
532 | |         let is_active = Arc::clone(&self.is_active);
...   |
543 | |         Ok(())
544 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\monitoring\enterprise_monitor.rs:536:72
    |
536 |                 if let Err(e) = health_checker.perform_health_checks().await {
    |                                                                        ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\monitoring\enterprise_monitor.rs:547:5
    |
547 | /     async fn start_alert_management(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
548 | |         let alert_manager = Arc::clone(&self.alert_manager);
549 | |         let is_active = Arc::clone(&self.is_active);
...   |
560 | |         Ok(())
561 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
note: `await` used in an async block, which does not require the enclosing function to be `async`
   --> src\monitoring\enterprise_monitor.rs:553:64
    |
553 |                 if let Err(e) = alert_manager.process_alerts().await {
    |                                                                ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\monitoring\enterprise_monitor.rs:576:5
    |
576 | /     pub async fn stop(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
577 | |         self.is_active.store(false, Ordering::SeqCst);
578 | |         tracing::info!("­ƒöì Enterprise monitoring system stopped");
579 | |         Ok(())
580 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\monitoring\enterprise_monitor.rs:632:5
    |
632 | /     async fn collect_trading_metrics(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
633 | |         // Implementation for collecting trading metrics
634 | |         Ok(())
635 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\monitoring\enterprise_monitor.rs:637:5
    |
637 | /     async fn collect_system_metrics(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
638 | |         // Implementation for collecting system metrics
639 | |         Ok(())
640 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
    --> src\monitoring\enterprise_monitor.rs:1120:5
     |
1120 | /     pub async fn initialize_kpis(&mut self) {
1121 | |         tracing::debug!("­ƒôè Initializing KPI dashboard metrics");
1122 | |         self.kpis = vec![
1123 | |             Kpi {
...    |
1140 | |         self.last_updated = Utc::now();
1141 | |     }
     | |_____^
     |
     = help: consider removing the `async` from this function
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\ml_engine.rs:124:5
    |
124 | /     pub async fn predict_price(&self, symbol: &str, hours_ahead: u32) -> Result<f64, Box<dyn std::error::Error + Send + Sync>> {
125 | |         // Use config for prediction parameters
126 | |         let prediction_accuracy = self.config.prediction_accuracy_threshold;
127 | |         let max_horizon = self.config.max_prediction_horizon_hours;
...   |
146 | |         Ok(prediction)
147 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\ml_engine.rs:150:5
    |
150 | /     pub async fn assess_risk(&self, symbol: &str) -> Result<f64, Box<dyn std::error::Error + Send + Sync>> {
151 | |         // Simulate risk assessment
152 | |         let base_risk = match symbol {
153 | |             "BTC/USDC" => 0.3,  // Lower risk
...   |
164 | |         Ok(final_risk)
165 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\ml_engine.rs:168:5
    |
168 | /     pub async fn classify_market_regime(&self, _symbol: &str) -> Result<MarketRegime, Box<dyn std::error::Error + Send + Sync>> {
169 | |         // Simulate market regime classification
170 | |         let regimes = [
171 | |             MarketRegime::Bullish,
...   |
180 | |         Ok(regimes[index].clone())
181 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\ml_engine.rs:184:5
    |
184 | /     pub async fn get_learning_metrics(&self) -> Result<LearningMetrics, Box<dyn std::error::Error + Send + Sync>> {
185 | |         Ok(LearningMetrics {
186 | |             epochs_completed: 150,
187 | |             current_loss: 0.025,
...   |
190 | |         })
191 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\ml_engine.rs:194:5
    |
194 | /     pub async fn initialize(&mut self, _config: &AiConfig) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
195 | |         // Simulate initialization
196 | |         self.learning_metrics.epochs_completed = 0;
197 | |         Ok(())
198 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\ml_engine.rs:201:5
    |
201 | /     pub async fn process_autonomous_decision(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
202 | |         // Simulate AI processing of autonomous decision
203 | |         info!("­ƒñû AI Engine processing autonomous trading decision...");
204 | |         info!("­ƒôè Using models: {} active", self.models.len());
205 | |         info!("­ƒÄ» Current accuracy: {:.2}%", self.performance_tracker.accuracy * 100.0);
206 | |         Ok(())
207 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\market_analysis.rs:148:5
    |
148 | /     async fn calculate_risk_level(&self, _symbol: &str) -> Result<f64, Box<dyn std::error::Error + Send + Sync>> {
149 | |         Ok(0.4 + fastrand::f64() * 0.4) // Risk between 0.4 and 0.8
150 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\market_analysis.rs:153:5
    |
153 | /     async fn generate_recommendation(&self, _symbol: &str, regime: &MarketRegime, risk_level: f64) -> Result<String, Box<dyn std::error::...
154 | |         let recommendation = match regime {
155 | |             MarketRegime::Bullish if risk_level < 0.5 => "Strong Buy",
156 | |             MarketRegime::Bullish => "Buy",
...   |
164 | |         Ok(recommendation.to_string())
165 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\market_analysis.rs:244:5
    |
244 | /     async fn classify_regime(&mut self, symbol: &str) -> Result<MarketRegime, Box<dyn std::error::Error + Send + Sync>> {
245 | |         let regimes = [
246 | |             MarketRegime::Bullish,
247 | |             MarketRegime::Bearish,
...   |
277 | |         Ok(regime)
278 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\market_analysis.rs:290:5
    |
290 | /     pub async fn predict_behavior(&self, symbol: &str) -> Option<String> {
291 | |         // Use behavioral_patterns field
292 | |         if let Some(pattern) = self.behavioral_patterns.get(symbol) {
293 | |             return Some(format!("Pattern: {}", pattern.pattern_type));
...   |
301 | |         None
302 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\auto_trader.rs:196:5
    |
196 | /     pub async fn get_performance_metrics(&self) -> Result<PerformanceMetrics, Box<dyn std::error::Error + Send + Sync>> {
197 | |         // Return actual performance_metrics field value
198 | |         Ok(self.performance_metrics.clone())
199 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\auto_trader.rs:201:5
    |
201 | /     pub async fn update_performance_metrics(&mut self, trade_result: f64, trade_successful: bool) -> Result<(), Box<dyn std::error::Error...
202 | |         // Update performance_metrics field
203 | |         self.performance_metrics.total_pnl += trade_result;
204 | |         self.performance_metrics.total_trades += 1;
...   |
214 | |         Ok(())
215 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\auto_trader.rs:217:5
    |
217 | /     async fn calculate_position_size(&self, market_intel: &crate::intelligence::MarketIntelligence, _strategy: &TradingStrategy) -> Resul...
218 | |         let base_size = self.config.max_position_size;
219 | |         let risk_adjustment = 1.0 - market_intel.risk_assessment;
220 | |         let confidence_adjustment = market_intel.sentiment_score.abs();
...   |
223 | |         Ok(position_size.clamp(0.001, self.config.max_position_size))
224 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\auto_trader.rs:226:5
    |
226 | /     async fn determine_action_type(&self, market_intel: &crate::intelligence::MarketIntelligence, _strategy: &TradingStrategy) -> Result<...
227 | |         let action = match market_intel.trading_recommendation.as_str() {
228 | |             "Strong Buy" => "BUY",
229 | |             "Buy" => "BUY",
...   |
236 | |         Ok(action.to_string())
237 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\auto_trader.rs:299:5
    |
299 | /     async fn select_best_strategy(&mut self, market_intel: &crate::intelligence::MarketIntelligence) -> Result<TradingStrategy, Box<dyn s...
...   |
319 | |         Ok(best_strategy.clone())
320 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\auto_trader.rs:361:5
    |
361 | /     async fn is_trade_allowed(&self, _symbol: &str, risk_assessment: f64) -> Result<bool, Box<dyn std::error::Error + Send + Sync>> {
362 | |         // Use risk_limits field
363 | |         let max_risk = self.risk_limits.max_drawdown;
364 | |         let var_limit = self.risk_limits.var_limit;
...   |
374 | |            && current_drawdown < max_risk)
375 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\sentiment\real_analyzer.rs:452:5
    |
452 | /     async fn calculate_market_sentiment_fallback(&self) -> Result<f64> {
...   |
458 | |         Ok(0.0)
459 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\sentiment\real_analyzer.rs:478:5
    |
478 | /     async fn simulate_timeframe_sentiment(&self, symbol: &str, minutes: u64) -> Result<f64> {
479 | |         // REAL implementation would analyze historical sentiment data
480 | |         // For now, return neutral until we have historical data storage
481 | |         println!("   ­ƒôè Historical sentiment analysis for {} ({} min timeframe): neutral", symbol, minutes);
482 | |         Ok(0.0) // Neutral until we implement historical data
483 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> src\intelligence\mod.rs:55:1
    |
55  | / pub async fn initialize_intelligence_system(config: IntelligenceConfig) -> Result<IntelligenceSystemSuite, Box<dyn std::error::Error + Se...
56  | |     let ai_config = AiConfig {
57  | |         learning_rate: config.learning_rate,
58  | |         batch_size: 64,
...   |
100 | |     })
101 | | }
    | |_^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: this argument is a mutable reference, but not used mutably
   --> src\security\wallet\mod.rs:449:38
    |
449 |     async fn load_configured_wallets(&mut self) -> Result<()> {
    |                                      ^^^^^^^^^ help: consider changing to: `&self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_ref_mut
    = note: `#[warn(clippy::needless_pass_by_ref_mut)]` implied by `#[warn(clippy::nursery)]`

warning: this argument is a mutable reference, but not used mutably
   --> src\intelligence\auto_trader.rs:299:35
    |
299 |     async fn select_best_strategy(&mut self, market_intel: &crate::intelligence::MarketIntelligence) -> Result<TradingStrategy, Box<dyn s...
    |                                   ^^^^^^^^^ help: consider changing to: `&self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_ref_mut

warning: `sniperforge` (lib) generated 1082 warnings (run `cargo clippy --fix --lib -p sniperforge` to apply 694 suggestions)
    Finished `dev` profile [optimized + debuginfo] target(s) in 12.38s
